Index: app_admin_windows.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import itertools\r\nimport time\r\nimport customtkinter\r\nfrom tkinter import *\r\nimport mysql.connector\r\nimport pandas as pd\r\nfrom customtkinter import *\r\nfrom tkinter import messagebox, ttk\r\nfrom CTkTable import CTkTable\r\nfrom PIL import Image\r\nfrom matplotlib import pyplot as plt\r\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\r\nimport connection\r\nfrom tkcalendar import Calendar\r\nfrom calendar import Calendar\r\n\r\nLOGO_IMG_DATA = Image.open(\"images/logo.png\")\r\nDASHBOARD_IMG_DATA = Image.open(\"images/dashboard_icon.png\")\r\nEMPLOYEE_IMG_DATA = Image.open(\"images/employee_icon.png\")\r\nPROJECT_IMG_DATA = Image.open(\"images/project.png\")\r\nSALARY_IMG_DATA = Image.open(\"images/salary_icon.png\")\r\nSETTINGS_IMG_DATA = Image.open(\"images/settings_icon.png\")\r\nLOGOUT_IMG_DATA = Image.open(\"images/log-out.png\")\r\nSEARCH_IMG_DATA = Image.open(\"images/search-icon.png\")\r\n\r\nCOLORS = [\"#D60000\", \"#FF9700\", \"#005DFF\", \"#42F200\", \"#DAE801\"]\r\n\r\nEngineer_salary = 400\r\nManagement_salary = 500\r\nAdministrative_salary = 300\r\n\r\n\r\nclass DashboardWindow(customtkinter.CTk):\r\n    def __init__(self, username, password):\r\n        super().__init__()\r\n        self.title(\"Dashboard\")\r\n        set_appearance_mode(\"system\")\r\n        self.geometry(\"956x645+350+100\")\r\n        self.username = username\r\n        # Images\r\n        self.logo_img = CTkImage(dark_image=LOGO_IMG_DATA, light_image=LOGO_IMG_DATA, size=(77.68, 85.42))\r\n        self.dashboard_img = CTkImage(dark_image=DASHBOARD_IMG_DATA, light_image=DASHBOARD_IMG_DATA)\r\n        self.employee_img = CTkImage(dark_image=EMPLOYEE_IMG_DATA, light_image=EMPLOYEE_IMG_DATA)\r\n        self.project_img = CTkImage(dark_image=PROJECT_IMG_DATA, light_image=PROJECT_IMG_DATA)\r\n        self.salary_img = CTkImage(dark_image=SALARY_IMG_DATA, light_image=SALARY_IMG_DATA)\r\n        self.settings_img = CTkImage(dark_image=SETTINGS_IMG_DATA, light_image=SETTINGS_IMG_DATA)\r\n        self.logout_img = CTkImage(dark_image=LOGOUT_IMG_DATA, light_image=LOGOUT_IMG_DATA)\r\n        self.search_img = CTkImage(dark_image=SEARCH_IMG_DATA, light_image=SEARCH_IMG_DATA)\r\n\r\n        # Frame creation\r\n        self.side_frame = CTkFrame(master=self, fg_color=\"#601e88\", width=176, height=650, corner_radius=0)\r\n        self.side_frame.pack_propagate(0)\r\n        self.side_frame.pack(fill=\"y\", anchor=\"w\", side=\"left\")\r\n\r\n        CTkLabel(master=self.side_frame, text=\"\", image=self.logo_img).pack(pady=(38, 0), anchor=\"center\")\r\n\r\n        self.dashboard_button = CTkButton(master=self.side_frame, image=self.dashboard_img, text=\"Dashboard\",\r\n                                          fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#491669\",\r\n                                          anchor=\"w\", command=self.dashboard)\r\n        self.dashboard_button.pack(anchor=\"center\", ipady=5, pady=(60, 0))\r\n\r\n        self.employee_button = CTkButton(master=self.side_frame, image=self.employee_img, text=\"Employees\",\r\n                                         fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#491669\",\r\n                                         anchor=\"w\", command=self.employees)\r\n        self.employee_button.pack(anchor=\"center\", ipady=5, pady=(16, 0))\r\n\r\n        self.project_button = CTkButton(master=self.side_frame, image=self.project_img, text=\"Projects\",\r\n                                        fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#491669\",\r\n                                        anchor=\"w\", command=self.projects)\r\n        self.project_button.pack(anchor=\"center\", ipady=5, pady=(16, 0))\r\n\r\n        self.salary_button = CTkButton(master=self.side_frame, image=self.salary_img, text=\"Salary\",\r\n                                       fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#491669\",\r\n                                       anchor=\"w\", command=self.salary)\r\n        self.salary_button.pack(anchor=\"center\", ipady=5, pady=(16, 0))\r\n\r\n        self.settings_button = CTkButton(master=self.side_frame, image=self.settings_img, text=\"Settings\",\r\n                                         fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#491669\",\r\n                                         anchor=\"w\", command=self.settings)\r\n        self.settings_button.pack(anchor=\"center\", ipady=5, pady=(16, 0))\r\n\r\n        self.logout_button = CTkButton(master=self.side_frame, image=self.logout_img, text=\"Log Out\",\r\n                                       fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#491669\",\r\n                                       anchor=\"w\", command=self.logout_listner)\r\n        self.logout_button.pack(anchor=\"center\", ipady=5, pady=(160, 0))\r\n\r\n        self.window_count = 1\r\n        if self.window_count == 1:\r\n            self.dashboard()\r\n            global job\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT * FROM employee_details WHERE username=%s\"\r\n            val = (username,)\r\n\r\n            cursor.execute(sql, val)\r\n            job = cursor.fetchall()\r\n            print(job)\r\n            job = job[0][2]\r\n\r\n\r\n        except mysql.connector.Error as e:\r\n            print(e)\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured :{e}\")\r\n\r\n    def dashboard(self):\r\n        if self.window_count == 1:\r\n            pass\r\n        elif self.window_count == 2:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 3:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 4:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 5:\r\n            self.main_frame.destroy()\r\n\r\n        if self.window_count == self.window_count:\r\n            pass\r\n\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        # self.user_button = CTkButton(master=self.main_frame, text=\"username\", fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#ffffff\", anchor=\"ne\")\r\n        self.check_frame = CTkFrame(master=self.main_frame, fg_color=\"#ffffff\", width=200, height=30, corner_radius=0)\r\n        self.check_frame.pack(anchor=\"nw\", padx=10, pady=(10, 0))\r\n        self.radio_var = IntVar(value=0)\r\n        self.check_in = CTkRadioButton(master=self.check_frame, text=\"Check In\", font=(\"Arial Bold\", 14), value=1,\r\n                                       variable=self.radio_var, command=self.stop_timer)\r\n        self.check_in.pack(anchor=\"n\", side=\"left\", padx=27, pady=(20, 0))\r\n        self.check_out = CTkRadioButton(master=self.check_frame, text=\"Check Out\", font=(\"Arial Bold\", 14), value=2,\r\n                                        variable=self.radio_var, command=self.stop_timer)\r\n        self.check_out.pack(anchor=\"n\", side=\"right\", padx=27, pady=(20, 0))\r\n\r\n        self.graph_frame = CTkFrame(master=self.main_frame, fg_color=\"#F0F0F0\", width=720, height=280, corner_radius=13)\r\n        self.graph_frame.pack(anchor=\"center\", padx=27, pady=(20, 0))\r\n\r\n        global dt\r\n        # create a connection to the database\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n\r\n            # read the data from the database\r\n            query = 'SELECT employee_name, working_hours  FROM salary'\r\n            df = pd.read_sql(query, con=db)\r\n            dt = pd.DataFrame(df.sort_values(by='working_hours'))\r\n            print(dt)\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n            print(e)\r\n        # plot the data as a bar graph\r\n        plt.figure(figsize=(12, 9))\r\n        plt.bar(dt['employee_name'], dt['working_hours'])\r\n        plt.xlabel('employee name')\r\n        plt.ylabel('time (in hrs)')\r\n        plt.title('analytics')\r\n        # plt.style.use(\"Solarize_light2\")\r\n\r\n        # plt.show()\r\n        self.add = plt.gcf()\r\n        canvas = FigureCanvasTkAgg(self.add, master=self.graph_frame)\r\n        canvas.get_tk_widget().configure(width=900, height=360)\r\n        ctk_canvas = canvas.get_tk_widget()\r\n        ctk_canvas.place(relx=0, rely=0, anchor=\"nw\")\r\n\r\n        self.task_number = 5\r\n        self.complete_task = 10\r\n        self.current = float(self.task_number / self.complete_task)\r\n        self.task_progress_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"#F0F0F0\", width=345, height=200,\r\n                                                      corner_radius=13)\r\n        self.task_progress_frame.pack(anchor=\"n\", side=\"left\", padx=(27, 0), pady=(20, 0))\r\n\r\n        self.progress_bar_width = 310\r\n        self.label1 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\",\r\n                               width=30).pack(anchor=\"ne\", padx=(0, 25), pady=(5, 0))\r\n        self.progress_bar1 = CTkProgressBar(master=self.task_progress_frame, fg_color=\"#F0F0F0\",\r\n                                            width=self.progress_bar_width, height=20, corner_radius=8,\r\n                                            progress_color=COLORS[0], border_color=\"#491669\", border_width=2)\r\n        self.progress_bar1.pack(anchor=\"n\", padx=10, pady=(5, 0))\r\n        self.progress_bar1.set(self.current)\r\n\r\n        self.label2 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\",\r\n                               width=30).pack(\r\n            anchor=\"ne\", padx=(0, 25), pady=(35, 0))\r\n        self.progress_bar2 = CTkProgressBar(master=self.task_progress_frame, fg_color=\"#F0F0F0\",\r\n                                            width=self.progress_bar_width, height=20,\r\n                                            corner_radius=8, progress_color=COLORS[1], border_color=\"#491669\",\r\n                                            border_width=2)\r\n        self.progress_bar2.pack(anchor=\"n\", padx=10, pady=(5, 0))\r\n\r\n        self.label3 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\",\r\n                               width=30).pack(\r\n            anchor=\"ne\", padx=(0, 25), pady=(35, 0))\r\n        self.progress_bar3 = CTkProgressBar(master=self.task_progress_frame, fg_color=\"#F0F0F0\",\r\n                                            width=self.progress_bar_width, height=20,\r\n                                            corner_radius=8, progress_color=COLORS[4], border_color=\"#491669\",\r\n                                            border_width=2)\r\n        self.progress_bar3.pack(anchor=\"n\", padx=10, pady=(5, 0))\r\n\r\n        # self.label4 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\", width=30).pack(\r\n        #     anchor=\"ne\", padx=(0, 25), pady=(35, 0))\r\n        # self.progress_bar4 = CTkProgressBar(master=self.task_progress_frame, fg_color=\"#F0F0F0\", width=self.progress_bar_width, height=20,\r\n        #                                     corner_radius=8, progress_color=COLORS[2], border_color=\"#491669\", border_width=2)\r\n        # self.progress_bar4.pack(anchor=\"n\", padx=10, pady=(5, 0))\r\n        #\r\n        # self.label5 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\", width=30).pack(\r\n        #     anchor=\"ne\", padx=(0, 25), pady=(35, 0))\r\n        # self.progress_bar5 = CTkProgressBar(master=self.task_progress_frame, fg_color=\"#F0F0F0\", width=self.progress_bar_width, height=20,\r\n        #                                     corner_radius=8, progress_color=COLORS[3], border_color=\"#491669\", border_width=2)\r\n        # self.progress_bar5.pack(anchor=\"n\", padx=10, pady=(5, 0))\r\n\r\n        self.calendar_frame = CTkFrame(master=self.main_frame, fg_color=\"#F0F0F0\", width=330, height=230,\r\n                                       corner_radius=13)\r\n        self.calendar_frame.pack(anchor=\"n\", side=\"right\", padx=(0, 27), pady=(20, 0))\r\n\r\n        # self.cal = Calendar(self.calendar_frame, selectmode=\"day\", date_pattern=\"y-mm-dd\")\r\n        # self.cal.pack(fill=\"both\", expand=True)\r\n        self.window_count = 1\r\n\r\n    def stop_timer(self):\r\n        global stop_time, elapsed_time, salary\r\n        self.val = self.radio_var.get()\r\n        if self.val == 1:\r\n            stop_time = time.time()\r\n        # input(\"Press enter to stop the timer...\"\r\n        elif self.val == 2:\r\n            elapsed_time = time.time() - stop_time\r\n            elapsed_time = round(elapsed_time)\r\n            print(f\"time spend {elapsed_time} seconds\")\r\n            final_time = (elapsed_time * 10) / 60\r\n            print(final_time)\r\n            if job == 'Engineer':\r\n                salary = final_time * Engineer_salary\r\n            elif job == \"Administrator\":\r\n                salary = final_time * Administrative_salary\r\n            elif job == \"Management\":\r\n                salary = final_time * Management_salary\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"UPDATE salary SET working_hours=%s, salary=%s WHERE username=%s\"\r\n                val = (final_time, salary, self.username,)\r\n                cursor.execute(sql, val)\r\n\r\n                db.commit()\r\n            except mysql.connector.Error as e:\r\n                messagebox.showinfo(\"Database Error\", f\"Error Occured: {e}\")\r\n                print(e)\r\n\r\n    def employees(self):\r\n        if self.window_count == 1:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 2:\r\n            pass\r\n        elif self.window_count == 3:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 4:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 5:\r\n            self.main_frame.destroy()\r\n\r\n        if self.window_count == self.window_count:\r\n            pass\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        title_frame.pack(anchor=\"n\", fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n        self.label = CTkLabel(master=title_frame, text=\"Employee & their details\", font=(\"Arial Black\", 23),\r\n                              text_color=\"#601e88\")\r\n        self.label.pack(anchor=\"nw\", side=\"left\", pady=(8, 0))\r\n\r\n        self.add_employee_button = CTkButton(master=title_frame, text=\"+ New Employee\", font=(\"Arial Black\", 15),\r\n                                             text_color=\"#fff\", fg_color=\"#601e88\", hover_color=\"#491669\",\r\n                                             corner_radius=15, command=self.add_employee)\r\n        self.add_employee_button.pack(anchor=\"ne\", side=\"right\", ipady=10)\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Employee with its ID or Name\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28, command=self.search)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT * FROM employee_details\"\r\n            cursor.execute(sql)\r\n            results = cursor.fetchall()\r\n            for result in results:\r\n                print(result)\r\n        except mysql.connector.Error as e:\r\n            print(e)\r\n\r\n        self.table_data = [\r\n            [(\"ID\", \"Name\", \"Profession\", \"Date of Joining\", \"Contact No.\", \"Emergency\\nContact No.\")]\r\n        ]\r\n        self.table_data.append(results)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.pack(expand=True)\r\n\r\n        self.window_count = 2\r\n\r\n    def add_employee(self):\r\n        self.main_frame.destroy()\r\n        if self.window_count == 1:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 2:\r\n            pass\r\n        elif self.window_count == 3:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 4:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 5:\r\n            self.main_frame.destroy()\r\n\r\n        if self.window_count == self.window_count:\r\n            pass\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        title_frame.pack(anchor=\"n\", fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n        self.label = CTkLabel(master=title_frame, text=\"Employee & their details\", font=(\"Arial Black\", 23),\r\n                              text_color=\"#601e88\")\r\n        self.label.pack(anchor=\"nw\", side=\"left\", pady=(8, 0))\r\n\r\n        self.add_employee_button = CTkButton(master=title_frame, text=\"+ New Employee\", font=(\"Arial Black\", 15),\r\n                                             text_color=\"#fff\", fg_color=\"#601e88\", hover_color=\"#491669\",\r\n                                             corner_radius=15, command=self.add_employee)\r\n        self.add_employee_button.pack(anchor=\"ne\", side=\"right\", ipady=10)\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Employee with its ID or Name\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28, command=self.search)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT * FROM requests\"\r\n            cursor.execute(sql)\r\n            request = cursor.fetchall()\r\n            for result in request:\r\n                print(result)\r\n        except mysql.connector.Error as e:\r\n            print(e)\r\n\r\n        self.table_data = [\r\n            [(\"ID\", \"Name\", \"Profession\", \"Date of Joining\", \"Contact No.\", \"Emergency\\nContact No.\")]\r\n        ]\r\n        self.table_data.append(request)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.pack(expand=True)\r\n        # self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        # self.main_frame.pack_propagate(0)\r\n        # self.main_frame.pack(side=\"left\")\r\n        #\r\n        # self.s_pass = IntVar(value=0)\r\n        # self.name_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Enter name of Employee\", height=35,\r\n        #                            width=330,\r\n        #                            fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        # self.name_entry.pack(anchor=\"n\", padx=(25, 25), pady=(80, 0))\r\n        # self.profession_entry = CTkComboBox(master=self.main_frame, height=35, width=330, border_color=\"#601e88\",\r\n        #                                     button_color=\"#601e88\", dropdown_fg_color=\"#601e88\",\r\n        #                                     dropdown_text_color=\"#ffffff\", dropdown_hover_color=\"#491669\",\r\n        #                                     button_hover_color=\"#601e88\",\r\n        #                                     values=[\"Select Job role\", \"Administrator\", \"Engineer\", \"Management\"])\r\n        # self.profession_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n        # self.date_of_joining_entry = CTkEntry(master=self.main_frame,\r\n        #                                       placeholder_text=\"Enter Date of Joining i.e. dd/mm/yyyy\",\r\n        #                                       height=35, width=330, fg_color=\"#EEEEEE\", border_color=\"#601e88\",\r\n        #                                       font=(\"Arial\", 14))\r\n        # self.date_of_joining_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n        # self.contact_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Contact No.\", height=35, width=330,\r\n        #                               fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        # self.contact_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n        # self.emergency_contact_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Emergency Contact No.\",\r\n        #                                         height=35,\r\n        #                                         width=330, fg_color=\"#EEEEEE\", border_color=\"#601e88\",\r\n        #                                         font=(\"Arial\", 14))\r\n        # self.emergency_contact_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n        # self.username_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Username\", height=35, width=330,\r\n        #                                fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        # self.username_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n        # self.password_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Password\", height=35, width=330,\r\n        #                                fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14), show=\"●\")\r\n        # self.password_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n        # self.show_password = CTkCheckBox(master=self.main_frame, checkbox_height=15, checkbox_width=15,\r\n        #                                  text=\"Show Password ?\",\r\n        #                                  text_color=\"#7E7E7E\", variable=self.s_pass, onvalue=1, offvalue=0,\r\n        #                                  command=self.toggle_password).pack(anchor=\"n\", padx=(200, 0), pady=(5, 0))\r\n        # self.add_button = CTkButton(master=self.main_frame, text=\"Add Employee\", height=35, fg_color=\"#601e88\",\r\n        #                             hover_color=\"#491669\", text_color=\"#ffffff\", font=(\"Arial\", 14),\r\n        #                             command=self.get_entries).pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n\r\n    def get_entries(self):\r\n         global username\r\n        # employee_name = self.name_entry.get()\r\n        # profession = self.profession_entry.get()\r\n        # date_of_joining = self.date_of_joining_entry.get()\r\n        # contact = self.contact_entry.get()\r\n        # emergency_contact = self.emergency_contact_entry.get()\r\n        # username = self.username_entry.get()\r\n        # password = self.password_entry.get()\r\n        #\r\n        # if (\r\n        #         employee_name == '' or profession == '' or date_of_joining == '' or contact == '' or username == '' or password == ''):\r\n        #     messagebox.showinfo(\"Null Info\", \"All fields are required to create profile\")\r\n        # elif contact.isdigit() is not True or emergency_contact.isdigit() is not True:\r\n        #     messagebox.showinfo(\"Invalid\", \"Contact number should contain only digits\")\r\n        # elif len(contact) != 10 or len(emergency_contact) != 10:\r\n        #     messagebox.showinfo(\"Invalid\", \"Contact number should contain 10 digits\")\r\n        # elif password.isdigit() is not True:\r\n        #     messagebox.showinfo(\"Invalid\", \"Password should contain digits only\")\r\n        # elif not self.check_duplicate_user(username):\r\n        #     if profession == \"Select Job role\":\r\n        #         messagebox.showinfo(\"change\", \"Please select your Job role\")\r\n        #     elif profession == \"Administrator\":\r\n        #         hourly_salary = 300\r\n        #     elif profession == \"Engineer\":\r\n        #         hourly_salary = 400\r\n        #     elif profession == \"Management\":\r\n        #         hourly_salary = 500\r\n        #     try:\r\n        #         db = connection.Connection().get_connection()\r\n        #         cursor = db.cursor()\r\n        #\r\n        #         sql = \"INSERT INTO employee_details (employee_name, profession, date_of_joining, contact_no, emergency_contact_no) VALUES (%s, %s, %s, %s, %s)\"\r\n        #         val = (employee_name, profession, date_of_joining, contact, emergency_contact)\r\n        #         sql_2 = \"INSERT INTO salary (employee_name, profession, hourly_salary) VALUES (%s, %s, %s)\"\r\n        #         val_2 = (employee_name, profession, str(hourly_salary))\r\n        #\r\n        #         sql_1 = \"INSERT INTO user_login (username, password) VALUES (%s, %s)\"\r\n        #         val_1 = (username, password)\r\n        #\r\n        #         cursor.execute(sql, val)\r\n        #         cursor.execute(sql_1, val_1)\r\n        #         cursor.execute(sql_2, val_2)\r\n        #         print(\"name\")\r\n        #\r\n        #         db.commit()\r\n        #         self.main_frame.destroy()\r\n        #         messagebox.showinfo(\"Successful\", \"Employee profile is created successfully\")\r\n        #         self.main_frame.destroy()\r\n        #     except mysql.connector.Error as e:\r\n        #         messagebox.showerror(\"Database Error\", f\"Error occured: {e}\")\r\n        # else:\r\n        #     print(\"hello\")\r\n        # self.employees()\r\n\r\n    def search(self):\r\n        search_data = self.search_entry.get()\r\n        global data\r\n        if search_data == '':\r\n            messagebox.showinfo(\"Null Field\", \"There is Nothing to Search\")\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT * FROM employee_details WHERE employee_name=%s\"\r\n            val = (search_data,)\r\n\r\n            cursor.execute(sql, val)\r\n            data_fetch = cursor.fetchall()\r\n            for data in data_fetch:\r\n                print(data)\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n            print(e)\r\n        self.main_frame.destroy()\r\n\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        title_frame.pack(anchor=\"n\", fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n        self.label = CTkLabel(master=title_frame, text=\"Employee & their details\", font=(\"Arial Black\", 23),\r\n                              text_color=\"#601e88\")\r\n        self.label.pack(anchor=\"nw\", side=\"left\", pady=(8, 0))\r\n\r\n        self.add_employee_button = CTkButton(master=title_frame, text=\"+ New Employee\", font=(\"Arial Black\", 15),\r\n                                             text_color=\"#fff\", fg_color=\"#601e88\", hover_color=\"#491669\",\r\n                                             corner_radius=15, command=self.add_employee)\r\n        self.add_employee_button.pack(anchor=\"ne\", side=\"right\", ipady=10)\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Employee with its ID or Name\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28, command=self.search)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.table_data = [\r\n            [(\"ID\", \"Name\", \"Profession\", \"Date of Joining\", \"Contact No.\", \"Emergency\\nContact No.\")]\r\n        ]\r\n        self.table_data.append(data_fetch)\r\n        # print(self.table_data)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.pack(expand=True)\r\n\r\n        self.window_count = 2\r\n\r\n    def projects(self):\r\n        if self.window_count == 1:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 2:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 3:\r\n            pass\r\n        elif self.window_count == self.window_count:\r\n            pass\r\n        elif self.window_count == 4:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 5:\r\n            self.main_frame.destroy()\r\n\r\n        if self.window_count == self.window_count:\r\n            pass\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        title_frame.pack(anchor=\"n\", fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n        self.label = CTkLabel(master=title_frame, text=\"Project Details\", font=(\"Arial Black\", 23),\r\n                              text_color=\"#601e88\")\r\n        self.label.pack(anchor=\"nw\", side=\"left\", pady=(8, 0))\r\n\r\n        self.add_project_button = CTkButton(master=title_frame, text=\"Create New Project\", font=(\"Arial Black\", 15),\r\n                                            text_color=\"#fff\", fg_color=\"#601e88\", hover_color=\"#491669\",\r\n                                            corner_radius=15, command=self.create_new_project)\r\n        self.add_project_button.pack(anchor=\"ne\", side=\"right\", ipady=10)\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Project with Unique ID\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28, command=self.search_project)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT * FROM project\"\r\n            cursor.execute(sql)\r\n            results = cursor.fetchall()\r\n            for result in results:\r\n                print(result)\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n            print(e)\r\n\r\n        self.table_data = [\r\n            [(\"Unique\\nID\", \"Project Name\", \"Start Date\", \"Due Date\", \"Project\\nHead\", \"Number\\nof Tasks\",\r\n              \"Completed\\nTasks\")]\r\n        ]\r\n\r\n        self.table_data.append(results)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.edit_column(1, width=200)\r\n        self.table.pack(expand=True)\r\n\r\n        self.window_count = 3\r\n\r\n    def create_new_project(self):\r\n        self.main_frame.destroy()\r\n\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        self.s_pass = IntVar(value=0)\r\n        self.project_name_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Enter name of Project\", height=35,\r\n                                           width=330,\r\n                                           fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        self.project_name_entry.pack(anchor=\"n\", padx=(25, 25), pady=(120, 0))\r\n        self.start_date_entry = CTkEntry(master=self.main_frame,\r\n                                         placeholder_text=\"Enter Start Date of project i.e. dd/mm/yyyy\", height=35,\r\n                                         width=330,\r\n                                         fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        self.start_date_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n\r\n        self.due_date_entry = CTkEntry(master=self.main_frame,\r\n                                       placeholder_text=\"Enter Due date of project i.e. dd/mm/yyyy\", height=35,\r\n                                       width=330,\r\n                                       fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        self.due_date_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n\r\n        self.assign_task_entry = CTkEntry(master=self.main_frame,\r\n                                          placeholder_text=\"Enter name of Employee to assign this project\", height=35,\r\n                                          width=330,\r\n                                          fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        self.assign_task_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n\r\n        self.no_of_tasks_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Enter Number of Tasks\", height=35,\r\n                                          width=330,\r\n                                          fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        self.no_of_tasks_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n\r\n        self.create_project_button = CTkButton(master=self.main_frame, text=\"Create Project\", height=35,\r\n                                               fg_color=\"#601e88\",\r\n                                               hover_color=\"#491669\", text_color=\"#ffffff\", font=(\"Arial\", 14),\r\n                                               command=self.get_entries_project).pack(anchor=\"n\", padx=(25, 25),\r\n                                                                                      pady=(25, 0))\r\n\r\n    def get_entries_project(self):\r\n        project_name = self.project_name_entry.get()\r\n        start_date = self.start_date_entry.get()\r\n        due_date = self.due_date_entry.get()\r\n        assign_task = self.assign_task_entry.get()\r\n        number_of_tasks = self.no_of_tasks_entry.get()\r\n\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"INSERT INTO project (project_name, start_date, due_date, employee_name, total_tasks, tasks_done) VALUES (%s, %s, %s, %s, %s)\"\r\n            val = (project_name, start_date, due_date, assign_task, number_of_tasks)\r\n\r\n            # sql_1 = \"INSERT INTO user_login (username, password) VALUES (%s, %s)\"\r\n            # val_1 = (username, password)\r\n\r\n            cursor.execute(sql, val)\r\n            # cursor.execute(sql_1, val_1)\r\n            print(\"name\")\r\n\r\n            db.commit()\r\n            # self.main_frame.destroy()\r\n            messagebox.showinfo(\"Successful\", \"Project is created successfully\")\r\n            self.main_frame.destroy()\r\n            self.projects()\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database Error\", f\"Error occured: {e}\")\r\n\r\n    def search_project(self):\r\n        search_project = self.search_entry.get()\r\n\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT * FROM project WHERE project_name=%s\"\r\n            val = (search_project,)\r\n            cursor.execute(sql, val)\r\n\r\n            fetch_project = cursor.fetchall()\r\n            for project in fetch_project:\r\n                print(project)\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n            print(e)\r\n        self.main_frame.destroy()\r\n\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        title_frame.pack(anchor=\"n\", fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n        self.label = CTkLabel(master=title_frame, text=\"Project Details\", font=(\"Arial Black\", 23),\r\n                              text_color=\"#601e88\")\r\n        self.label.pack(anchor=\"nw\", side=\"left\", pady=(8, 0))\r\n\r\n        self.add_project_button = CTkButton(master=title_frame, text=\"Create New Project\", font=(\"Arial Black\", 15),\r\n                                            text_color=\"#fff\", fg_color=\"#601e88\", hover_color=\"#491669\",\r\n                                            corner_radius=15)\r\n        self.add_project_button.pack(anchor=\"ne\", side=\"right\", ipady=10)\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Project with Unique ID\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.table_data = [\r\n            [(\"Unique\\nID\", \"Project Name\", \"Start Date\", \"Due Date\", \"Project\\nHead\", \"Number\\nof Tasks\",\r\n              \"No. of\\nCompleted Tasks\")]\r\n        ]\r\n\r\n        self.table_data.append(fetch_project)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.edit_column(1, width=200)\r\n        self.table.pack(expand=True)\r\n\r\n        self.window_count = 3\r\n\r\n    def salary(self):\r\n        if self.window_count == 1:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 2:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 3:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 4:\r\n            pass\r\n        elif self.window_count == self.window_count:\r\n            pass\r\n        elif self.window_count == 5:\r\n            self.main_frame.destroy()\r\n\r\n        if self.window_count == self.window_count:\r\n            pass\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        # title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        # title_frame.pack(anchor=\"n\", fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n        # self.label = CTkLabel(master=title_frame, text=\"Projects History\", font=(\"Arial Black\", 23),\r\n        #                       text_color=\"#601e88\")\r\n        # self.label.pack(anchor=\"nw\", side=\"left\", pady=(8, 0))\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(anchor=\"n\", fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Employee with  its ID or Name\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28, command=self.salary_search)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT employee_id, employee_name, profession, working_hours, salary FROM salary\"\r\n            cursor.execute(sql)\r\n            results = cursor.fetchall()\r\n            for result in results:\r\n                print(result)\r\n        except mysql.connector.Error as e:\r\n            print(e)\r\n\r\n        self.table_data = [\r\n            [(\"ID\", \"Name\", \"Profession\", \"Working\\nHours\", \"Salary\")]\r\n        ]\r\n        self.table_data.append(results)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.pack(expand=True)\r\n\r\n        self.window_count = 4\r\n\r\n    def salary_search(self):\r\n        search_data = self.search_entry.get()\r\n        global data\r\n        if search_data == '':\r\n            messagebox.showinfo(\"Null Field\", \"There is Nothing to Search\")\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT employee_id, employee_name, profession, working_hours, salary FROM salary WHERE %s IN (employee_id, employee_name)\"\r\n            val = (search_data,)\r\n\r\n            cursor.execute(sql, val)\r\n            data_fetch = cursor.fetchall()\r\n            for data in data_fetch:\r\n                print(data)\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n            print(e)\r\n        self.main_frame.destroy()\r\n\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(anchor=\"n\", fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Employee with  its ID or Name\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.table_data = [\r\n            [(\"ID\", \"Name\", \"Profession\", \"Working\\nHours\", \"Salary\")]\r\n        ]\r\n        self.table_data.append(data_fetch)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.pack(expand=True)\r\n\r\n        self.window_count = 4\r\n\r\n    def settings(self):\r\n        if self.window_count == 1:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 2:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 3:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 4:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 5:\r\n            pass\r\n        elif self.window_count == self.window_count:\r\n            pass\r\n\r\n        if self.window_count == self.window_count:\r\n            pass\r\n\r\n        self.window_count = 5\r\n        pass\r\n\r\n    def toggle_password(self):\r\n        if self.s_pass.get() == 1:\r\n            self.password_entry.configure(show='')\r\n        else:\r\n            self.password_entry.configure(show='●')\r\n\r\n    def check_duplicate_user(self, e_username):\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"select * from user_login;\"\r\n            cursor.execute(sql)\r\n            users = cursor.fetchall()\r\n\r\n            for user in users:\r\n                db_username = user[0]\r\n                if e_username == db_username:\r\n                    messagebox.showinfo(\"Already Exist\", \"Username already exist\")\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database error\", f\"Error occured: {e}\")\r\n\r\n    def logout_listner(self):\r\n        self.destroy()\r\n        import user_login\r\n        app = user_login.Login()\r\n        app.mainloop()\r\n\r\n# if __name__ == '__main__':\r\n#     app = DashboardWindow()\r\n#     app.mainloop()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app_admin_windows.py b/app_admin_windows.py
--- a/app_admin_windows.py	
+++ b/app_admin_windows.py	
@@ -34,9 +34,10 @@
     def __init__(self, username, password):
         super().__init__()
         self.title("Dashboard")
-        set_appearance_mode("system")
+        set_appearance_mode("Light")
         self.geometry("956x645+350+100")
         self.username = username
+        self.timer_running = False
         # Images
         self.logo_img = CTkImage(dark_image=LOGO_IMG_DATA, light_image=LOGO_IMG_DATA, size=(77.68, 85.42))
         self.dashboard_img = CTkImage(dark_image=DASHBOARD_IMG_DATA, light_image=DASHBOARD_IMG_DATA)
@@ -138,7 +139,7 @@
         self.graph_frame = CTkFrame(master=self.main_frame, fg_color="#F0F0F0", width=720, height=280, corner_radius=13)
         self.graph_frame.pack(anchor="center", padx=27, pady=(20, 0))
 
-        global dt
+        global df, dt
         # create a connection to the database
         try:
             db = connection.Connection().get_connection()
@@ -146,7 +147,7 @@
             # read the data from the database
             query = 'SELECT employee_name, working_hours  FROM salary'
             df = pd.read_sql(query, con=db)
-            dt = pd.DataFrame(df.sort_values(by='working_hours'))
+            dt = pd.DataFrame(df.sort_values(by="working_hours"))
             print(dt)
         except mysql.connector.Error as e:
             messagebox.showerror("Database Error", f"Error Occured: {e}")
@@ -166,39 +167,52 @@
         ctk_canvas = canvas.get_tk_widget()
         ctk_canvas.place(relx=0, rely=0, anchor="nw")
 
-        self.task_number = 5
-        self.complete_task = 10
-        self.current = float(self.task_number / self.complete_task)
+        try:
+            username = [self.username]
+            db = connection.Connection().get_connection()
+            cursor = db.cursor()
+            sql = "SELECT unique_id, project_name, total_tasks, tasks_done FROM project WHERE username = %s"
+            cursor.execute(sql, username, )
+            result = cursor.fetchall()
+            print(result)
+        except mysql.connector.Error as e:
+            print(e)
+
+        number_of_task = 1
+        self.task_number = int(result[0][3])
+        self.complete_task = int(result[0][2])
         self.task_progress_frame = CTkScrollableFrame(master=self.main_frame, fg_color="#F0F0F0", width=345, height=200,
                                                       corner_radius=13)
         self.task_progress_frame.pack(anchor="n", side="left", padx=(27, 0), pady=(20, 0))
 
         self.progress_bar_width = 310
-        self.label1 = CTkLabel(master=self.task_progress_frame, text=f"{self.task_number}/{self.complete_task}",
-                               width=30).pack(anchor="ne", padx=(0, 25), pady=(5, 0))
-        self.progress_bar1 = CTkProgressBar(master=self.task_progress_frame, fg_color="#F0F0F0",
-                                            width=self.progress_bar_width, height=20, corner_radius=8,
-                                            progress_color=COLORS[0], border_color="#491669", border_width=2)
-        self.progress_bar1.pack(anchor="n", padx=10, pady=(5, 0))
-        self.progress_bar1.set(self.current)
+        for i in range(number_of_task):
+            self.label2 = (CTkLabel(master=self.task_progress_frame, text=result[0][1],
+                                    width=30, fg_color="#F0F0F0").pack(anchor="w", padx=(0, 25), pady=(5, 0)))
+            self.label1 = (CTkLabel(master=self.task_progress_frame, text=f"{self.task_number}/{self.complete_task}",
+                                    width=30, fg_color="#F0F0F0").pack(anchor="w", padx=(0, 25), pady=(5, 0)))
+            self.progress_bar1 = CTkProgressBar(master=self.task_progress_frame, fg_color="#F0F0F0",
+                                                width=self.progress_bar_width, height=20, corner_radius=8,
+                                                progress_color=COLORS[0], border_color="#491669", border_width=2)
+            self.progress_bar1.pack(anchor="n", padx=10, pady=(5, 0))
+            self.progress_bar1.set((self.task_number / self.complete_task))
 
-        self.label2 = CTkLabel(master=self.task_progress_frame, text=f"{self.task_number}/{self.complete_task}",
-                               width=30).pack(
-            anchor="ne", padx=(0, 25), pady=(35, 0))
-        self.progress_bar2 = CTkProgressBar(master=self.task_progress_frame, fg_color="#F0F0F0",
-                                            width=self.progress_bar_width, height=20,
-                                            corner_radius=8, progress_color=COLORS[1], border_color="#491669",
-                                            border_width=2)
-        self.progress_bar2.pack(anchor="n", padx=10, pady=(5, 0))
-
-        self.label3 = CTkLabel(master=self.task_progress_frame, text=f"{self.task_number}/{self.complete_task}",
-                               width=30).pack(
-            anchor="ne", padx=(0, 25), pady=(35, 0))
-        self.progress_bar3 = CTkProgressBar(master=self.task_progress_frame, fg_color="#F0F0F0",
-                                            width=self.progress_bar_width, height=20,
-                                            corner_radius=8, progress_color=COLORS[4], border_color="#491669",
-                                            border_width=2)
-        self.progress_bar3.pack(anchor="n", padx=10, pady=(5, 0))
+        # self.label1 = CTkLabel(master=self.task_progress_frame, text=f"{self.task_number}/{self.complete_task}", width=30).pack(anchor="ne", padx=(0, 25), pady=(5,0))
+        # self.progress_bar1 = CTkProgressBar(master=self.task_progress_frame, fg_color="#F0F0F0", width=self.progress_bar_width, height=20, corner_radius=8, progress_color=COLORS[0], border_color="#491669", border_width=2)
+        # self.progress_bar1.pack(anchor="n", padx=10, pady=(5, 0))
+        # self.progress_bar1.set(self.current)
+        #
+        # self.label2 = CTkLabel(master=self.task_progress_frame, text=f"{self.task_number}/{self.complete_task}", width=30).pack(
+        #     anchor="ne", padx=(0, 25), pady=(35, 0))
+        # self.progress_bar2 = CTkProgressBar(master=self.task_progress_frame, fg_color="#F0F0F0", width=self.progress_bar_width, height=20,
+        #                                     corner_radius=8, progress_color=COLORS[1], border_color="#491669", border_width=2)
+        # self.progress_bar2.pack(anchor="n", padx=10, pady=(5, 0))
+        #
+        # self.label3 = CTkLabel(master=self.task_progress_frame, text=f"{self.task_number}/{self.complete_task}", width=30).pack(
+        #     anchor="ne", padx=(0, 25), pady=(35, 0))
+        # self.progress_bar3 = CTkProgressBar(master=self.task_progress_frame, fg_color="#F0F0F0", width=self.progress_bar_width, height=20,
+        #                                     corner_radius=8, progress_color=COLORS[4], border_color="#491669", border_width=2)
+        # self.progress_bar3.pack(anchor="n", padx=10, pady=(5, 0))
 
         # self.label4 = CTkLabel(master=self.task_progress_frame, text=f"{self.task_number}/{self.complete_task}", width=30).pack(
         #     anchor="ne", padx=(0, 25), pady=(35, 0))
@@ -324,169 +338,102 @@
 
     def add_employee(self):
         self.main_frame.destroy()
-        if self.window_count == 1:
-            self.main_frame.destroy()
-        elif self.window_count == 2:
-            pass
-        elif self.window_count == 3:
-            self.main_frame.destroy()
-        elif self.window_count == 4:
-            self.main_frame.destroy()
-        elif self.window_count == 5:
-            self.main_frame.destroy()
-
-        if self.window_count == self.window_count:
-            pass
         self.main_frame = CTkFrame(master=self, fg_color="#ffffff", width=780, height=650, corner_radius=0)
         self.main_frame.pack_propagate(0)
         self.main_frame.pack(side="left")
 
-        title_frame = CTkFrame(master=self.main_frame, fg_color="transparent")
-        title_frame.pack(anchor="n", fill="x", padx=27, pady=(29, 0))
-
-        self.label = CTkLabel(master=title_frame, text="Employee & their details", font=("Arial Black", 23),
-                              text_color="#601e88")
-        self.label.pack(anchor="nw", side="left", pady=(8, 0))
-
-        self.add_employee_button = CTkButton(master=title_frame, text="+ New Employee", font=("Arial Black", 15),
-                                             text_color="#fff", fg_color="#601e88", hover_color="#491669",
-                                             corner_radius=15, command=self.add_employee)
-        self.add_employee_button.pack(anchor="ne", side="right", ipady=10)
-
-        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color="#F0F0F0")
-        self.search_container.pack(fill="x", pady=(30, 0), padx=27)
+        self.s_pass = IntVar(value=0)
+        self.name_entry = CTkEntry(master=self.main_frame, placeholder_text="Enter name of Employee", height=35,
+                                   width=330,
+                                   fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14))
+        self.name_entry.pack(anchor="n", padx=(25, 25), pady=(80, 0))
+        self.profession_entry = CTkComboBox(master=self.main_frame, height=35, width=330, border_color="#601e88",
+                                            button_color="#601e88", dropdown_fg_color="#601e88",
+                                            dropdown_text_color="#ffffff", dropdown_hover_color="#491669",
+                                            button_hover_color="#601e88",
+                                            values=["Select Job role", "Administrator", "Engineer", "Management"])
+        self.profession_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
+        self.date_of_joining_entry = CTkEntry(master=self.main_frame,
+                                              placeholder_text="Enter Date of Joining i.e. dd/mm/yyyy",
+                                              height=35, width=330, fg_color="#EEEEEE", border_color="#601e88",
+                                              font=("Arial", 14))
+        self.date_of_joining_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
+        self.contact_entry = CTkEntry(master=self.main_frame, placeholder_text="Contact No.", height=35, width=330,
+                                      fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14))
+        self.contact_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
+        self.emergency_contact_entry = CTkEntry(master=self.main_frame, placeholder_text="Emergency Contact No.",
+                                                height=35,
+                                                width=330, fg_color="#EEEEEE", border_color="#601e88",
+                                                font=("Arial", 14))
+        self.emergency_contact_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
+        self.username_entry = CTkEntry(master=self.main_frame, placeholder_text="Username", height=35, width=330,
+                                       fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14))
+        self.username_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
+        self.password_entry = CTkEntry(master=self.main_frame, placeholder_text="Password", height=35, width=330,
+                                       fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14), show="●")
+        self.password_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
+        self.show_password = CTkCheckBox(master=self.main_frame, checkbox_height=15, checkbox_width=15,
+                                         text="Show Password ?",
+                                         text_color="#7E7E7E", variable=self.s_pass, onvalue=1, offvalue=0,
+                                         command=self.toggle_password).pack(anchor="n", padx=(200, 0), pady=(5, 0))
+        self.add_button = CTkButton(master=self.main_frame, text="Add Employee", height=35, fg_color="#601e88",
+                                    hover_color="#491669", text_color="#ffffff", font=("Arial", 14),
+                                    command=self.get_entries).pack(anchor="n", padx=(25, 25), pady=(25, 0))
 
-        self.search_entry = CTkEntry(master=self.search_container, width=650,
-                                     placeholder_text="Search Employee with its ID or Name",
-                                     border_color="#70438C", border_width=2)
-        self.search_entry.pack(side="left", padx=(13, 0), pady=15)
+    def get_entries(self):
+        global username
+        employee_name = self.name_entry.get()
+        profession = self.profession_entry.get()
+        date_of_joining = self.date_of_joining_entry.get()
+        contact = self.contact_entry.get()
+        emergency_contact = self.emergency_contact_entry.get()
+        username = self.username_entry.get()
+        password = self.password_entry.get()
 
-        self.search_button = CTkButton(master=self.search_container, text="", image=self.search_img, fg_color="#601e88",
-                                       hover_color="#491669", width=28, command=self.search)
-        self.search_button.pack(side="left", padx=(13, 0), pady=15)
-
-        try:
-            db = connection.Connection().get_connection()
-            cursor = db.cursor()
+        if (
+                employee_name == '' or profession == '' or date_of_joining == '' or contact == '' or username == '' or password == ''):
+            messagebox.showinfo("Null Info", "All fields are required to create profile")
+        elif contact.isdigit() is not True or emergency_contact.isdigit() is not True:
+            messagebox.showinfo("Invalid", "Contact number should contain only digits")
+        elif len(contact) != 10 or len(emergency_contact) != 10:
+            messagebox.showinfo("Invalid", "Contact number should contain 10 digits")
+        elif password.isdigit() is not True:
+            messagebox.showinfo("Invalid", "Password should contain digits only")
+        elif not self.check_duplicate_user(username):
+            if profession == "Select Job role":
+                messagebox.showinfo("change", "Please select your Job role")
+            elif profession == "Administrator":
+                hourly_salary = 300
+            elif profession == "Engineer":
+                hourly_salary = 400
+            elif profession == "Management":
+                hourly_salary = 500
+            try:
+                db = connection.Connection().get_connection()
+                cursor = db.cursor()
 
-            sql = "SELECT * FROM requests"
-            cursor.execute(sql)
-            request = cursor.fetchall()
-            for result in request:
-                print(result)
-        except mysql.connector.Error as e:
-            print(e)
-
-        self.table_data = [
-            [("ID", "Name", "Profession", "Date of Joining", "Contact No.", "Emergency\nContact No.")]
-        ]
-        self.table_data.append(request)
-        self.table_data = list(itertools.chain(*self.table_data))
-
-        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color="transparent")
-        self.table_frame.pack(expand=True, fill="both", padx=27, pady=21)
-        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=["#E6E6E6", "#EEEEEE"],
-                              header_color="#601e88",
-                              hover_color="#DCDCDC")
-        self.table.edit_row(0, font=("Arial Bold", 14))
-        self.table.edit_row(0, text_color="#fff", hover_color="#491669")
-        self.table.pack(expand=True)
-        # self.main_frame = CTkFrame(master=self, fg_color="#ffffff", width=780, height=650, corner_radius=0)
-        # self.main_frame.pack_propagate(0)
-        # self.main_frame.pack(side="left")
-        #
-        # self.s_pass = IntVar(value=0)
-        # self.name_entry = CTkEntry(master=self.main_frame, placeholder_text="Enter name of Employee", height=35,
-        #                            width=330,
-        #                            fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14))
-        # self.name_entry.pack(anchor="n", padx=(25, 25), pady=(80, 0))
-        # self.profession_entry = CTkComboBox(master=self.main_frame, height=35, width=330, border_color="#601e88",
-        #                                     button_color="#601e88", dropdown_fg_color="#601e88",
-        #                                     dropdown_text_color="#ffffff", dropdown_hover_color="#491669",
-        #                                     button_hover_color="#601e88",
-        #                                     values=["Select Job role", "Administrator", "Engineer", "Management"])
-        # self.profession_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
-        # self.date_of_joining_entry = CTkEntry(master=self.main_frame,
-        #                                       placeholder_text="Enter Date of Joining i.e. dd/mm/yyyy",
-        #                                       height=35, width=330, fg_color="#EEEEEE", border_color="#601e88",
-        #                                       font=("Arial", 14))
-        # self.date_of_joining_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
-        # self.contact_entry = CTkEntry(master=self.main_frame, placeholder_text="Contact No.", height=35, width=330,
-        #                               fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14))
-        # self.contact_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
-        # self.emergency_contact_entry = CTkEntry(master=self.main_frame, placeholder_text="Emergency Contact No.",
-        #                                         height=35,
-        #                                         width=330, fg_color="#EEEEEE", border_color="#601e88",
-        #                                         font=("Arial", 14))
-        # self.emergency_contact_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
-        # self.username_entry = CTkEntry(master=self.main_frame, placeholder_text="Username", height=35, width=330,
-        #                                fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14))
-        # self.username_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
-        # self.password_entry = CTkEntry(master=self.main_frame, placeholder_text="Password", height=35, width=330,
-        #                                fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14), show="●")
-        # self.password_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
-        # self.show_password = CTkCheckBox(master=self.main_frame, checkbox_height=15, checkbox_width=15,
-        #                                  text="Show Password ?",
-        #                                  text_color="#7E7E7E", variable=self.s_pass, onvalue=1, offvalue=0,
-        #                                  command=self.toggle_password).pack(anchor="n", padx=(200, 0), pady=(5, 0))
-        # self.add_button = CTkButton(master=self.main_frame, text="Add Employee", height=35, fg_color="#601e88",
-        #                             hover_color="#491669", text_color="#ffffff", font=("Arial", 14),
-        #                             command=self.get_entries).pack(anchor="n", padx=(25, 25), pady=(25, 0))
-
-    def get_entries(self):
-         global username
-        # employee_name = self.name_entry.get()
-        # profession = self.profession_entry.get()
-        # date_of_joining = self.date_of_joining_entry.get()
-        # contact = self.contact_entry.get()
-        # emergency_contact = self.emergency_contact_entry.get()
-        # username = self.username_entry.get()
-        # password = self.password_entry.get()
-        #
-        # if (
-        #         employee_name == '' or profession == '' or date_of_joining == '' or contact == '' or username == '' or password == ''):
-        #     messagebox.showinfo("Null Info", "All fields are required to create profile")
-        # elif contact.isdigit() is not True or emergency_contact.isdigit() is not True:
-        #     messagebox.showinfo("Invalid", "Contact number should contain only digits")
-        # elif len(contact) != 10 or len(emergency_contact) != 10:
-        #     messagebox.showinfo("Invalid", "Contact number should contain 10 digits")
-        # elif password.isdigit() is not True:
-        #     messagebox.showinfo("Invalid", "Password should contain digits only")
-        # elif not self.check_duplicate_user(username):
-        #     if profession == "Select Job role":
-        #         messagebox.showinfo("change", "Please select your Job role")
-        #     elif profession == "Administrator":
-        #         hourly_salary = 300
-        #     elif profession == "Engineer":
-        #         hourly_salary = 400
-        #     elif profession == "Management":
-        #         hourly_salary = 500
-        #     try:
-        #         db = connection.Connection().get_connection()
-        #         cursor = db.cursor()
-        #
-        #         sql = "INSERT INTO employee_details (employee_name, profession, date_of_joining, contact_no, emergency_contact_no) VALUES (%s, %s, %s, %s, %s)"
-        #         val = (employee_name, profession, date_of_joining, contact, emergency_contact)
-        #         sql_2 = "INSERT INTO salary (employee_name, profession, hourly_salary) VALUES (%s, %s, %s)"
-        #         val_2 = (employee_name, profession, str(hourly_salary))
-        #
-        #         sql_1 = "INSERT INTO user_login (username, password) VALUES (%s, %s)"
-        #         val_1 = (username, password)
-        #
-        #         cursor.execute(sql, val)
-        #         cursor.execute(sql_1, val_1)
-        #         cursor.execute(sql_2, val_2)
-        #         print("name")
-        #
-        #         db.commit()
-        #         self.main_frame.destroy()
-        #         messagebox.showinfo("Successful", "Employee profile is created successfully")
-        #         self.main_frame.destroy()
-        #     except mysql.connector.Error as e:
-        #         messagebox.showerror("Database Error", f"Error occured: {e}")
-        # else:
-        #     print("hello")
-        # self.employees()
+                sql = "INSERT INTO employee_details (employee_name, profession, date_of_joining, contact_no, emergency_contact_no) VALUES (%s, %s, %s, %s, %s)"
+                val = (employee_name, profession, date_of_joining, contact, emergency_contact)
+                sql_2 = "INSERT INTO salary (employee_name, profession, hourly_salary) VALUES (%s, %s, %s)"
+                val_2 = (employee_name, profession, str(hourly_salary))
+
+                sql_1 = "INSERT INTO user_login (username, password) VALUES (%s, %s)"
+                val_1 = (username, password)
+
+                cursor.execute(sql, val)
+                cursor.execute(sql_1, val_1)
+                cursor.execute(sql_2, val_2)
+                print("name")
+
+                db.commit()
+                self.main_frame.destroy()
+                messagebox.showinfo("Successful", "Employee profile is created successfully")
+                self.main_frame.destroy()
+            except mysql.connector.Error as e:
+                messagebox.showerror("Database Error", f"Error occured: {e}")
+        else:
+            print("hello")
+        self.employees()
 
     def search(self):
         search_data = self.search_entry.get()
Index: demo.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/demo.py b/demo.py
new file mode 100644
--- /dev/null	
+++ b/demo.py	
@@ -0,0 +1,35 @@
+import tkinter as tk
+
+class TimerApp:
+    def __init__(self, root):
+        self.root = root
+        self.counter = 0
+        self.timer_running = False
+
+        self.root.protocol("WM_DELETE_WINDOW", self.stop_timer)
+
+        self.timer_label = tk.Label(self.root, text="0")
+        self.timer_label.pack()
+
+        self.start_timer()
+
+    def start_timer(self):
+        self.timer_running = True
+        self.update_timer()
+
+    def stop_timer(self):
+        global time
+        self.timer_running = False
+        time = self.counter
+        print(time)
+        root.destroy()
+
+    def update_timer(self):
+        if self.timer_running:
+            self.counter += 1
+            self.timer_label.config(text=str(self.counter))
+            self.root.after(1000, self.update_timer)
+
+root = tk.Tk()
+app = TimerApp(root)
+root.mainloop()
\ No newline at end of file
