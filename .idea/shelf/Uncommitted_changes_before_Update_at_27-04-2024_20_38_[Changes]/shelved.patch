Index: connection.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import mysql.connector\r\n\r\n\r\nclass Connection:\r\n    _instance = None\r\n\r\n    def __new__(cls, *args, **kwargs):\r\n        try:\r\n            if not cls._instance:\r\n                cls._instance = super().__new__(cls)\r\n                cls._instance.cnx = mysql.connector.connect(\r\n                    user='root',\r\n                    password='Omkar@2802',\r\n                    host='localhost',\r\n                    port='3306',\r\n                    database='wms'\r\n                )\r\n                print(\"Connection done\")\r\n            return cls._instance\r\n\r\n        except mysql.connector.Error as e:\r\n            print(\"Connection failed\", e)\r\n\r\n    def get_connection(self):\r\n        return self.cnx\r\n\r\nif __name__ == \"__main__\":\r\n    connection = Connection()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/connection.py b/connection.py
--- a/connection.py	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
+++ b/connection.py	(date 1714230110391)
@@ -10,7 +10,7 @@
                 cls._instance = super().__new__(cls)
                 cls._instance.cnx = mysql.connector.connect(
                     user='root',
-                    password='Omkar@2802',
+                    password='529374Channe@',
                     host='localhost',
                     port='3306',
                     database='wms'
Index: starter.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from tkinter import *\r\nfrom PIL import Image\r\nimport customtkinter\r\n\r\nCOLORS = [\"#FFFFFF\", \"#491669\"]\r\nFONTS = [\"Arial Bold\", \"Arial\", \"Century Gothic\"]\r\nANCHORS = [\"nw\", \"n\", \"ne\", \"w\", \"center\", \"e\"]\r\n\r\n\r\nclass Stater(customtkinter.CTk):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.title(\"Workspace Management System\")\r\n        self.geometry(\"895x680+350+80\")\r\n        self.config(bg=COLORS[1])\r\n        self.resizable(False, False)\r\n        self.image = customtkinter.CTkImage(light_image=Image.open('Images/WORK.png'),\r\n                                            dark_image=Image.open('Images/WORK.png'),\r\n                                            size=(895, 640))\r\n        self.label = customtkinter.CTkLabel(self, image=self.image, text=\"\")\r\n        self.label.pack()\r\n\r\n        self.button = customtkinter.CTkButton(self, text=\"Get Started as Admin\", width=140, height=28, corner_radius=16,\r\n                                              bg_color=COLORS[1], fg_color=COLORS[1], text_color=COLORS[0],\r\n                                              font=(FONTS[2], 18, \"underline\"), hover=False,\r\n                                              command=self.login_as_admin)\r\n        self.button.pack(anchor=ANCHORS[4], side=\"left\", padx=(175, 0))\r\n\r\n        self.button1 = customtkinter.CTkButton(self, text=\"Get Started as User\", width=140, height=28, corner_radius=16,\r\n                                              bg_color=COLORS[1], fg_color=COLORS[1], text_color=COLORS[0],\r\n                                              font=(FONTS[2], 18, \"underline\"), hover=False,\r\n                                              command=self.login_as_user)\r\n        self.button1.pack(anchor=ANCHORS[2], side=\"right\", padx=(0, 175))\r\n\r\n    def login_as_user(self):\r\n        self.destroy()\r\n        import user_login\r\n        user_login = user_login.Login()\r\n        user_login.mainloop()\r\n\r\n    def login_as_admin(self):\r\n        self.destroy()\r\n        import admin_login\r\n        admin_login = admin_login.Starter()\r\n        admin_login.mainloop()\r\n\r\n\r\nif __name__ == '__main__':\r\n    stater = Stater()\r\n    stater.mainloop()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/starter.py b/starter.py
--- a/starter.py	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
+++ b/starter.py	(date 1714230110420)
@@ -27,9 +27,9 @@
         self.button.pack(anchor=ANCHORS[4], side="left", padx=(175, 0))
 
         self.button1 = customtkinter.CTkButton(self, text="Get Started as User", width=140, height=28, corner_radius=16,
-                                              bg_color=COLORS[1], fg_color=COLORS[1], text_color=COLORS[0],
-                                              font=(FONTS[2], 18, "underline"), hover=False,
-                                              command=self.login_as_user)
+                                               bg_color=COLORS[1], fg_color=COLORS[1], text_color=COLORS[0],
+                                               font=(FONTS[2], 18, "underline"), hover=False,
+                                               command=self.login_as_user)
         self.button1.pack(anchor=ANCHORS[2], side="right", padx=(0, 175))
 
     def login_as_user(self):
@@ -47,4 +47,4 @@
 
 if __name__ == '__main__':
     stater = Stater()
-    stater.mainloop()
\ No newline at end of file
+    stater.mainloop()
Index: app_admin_windows.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import datetime\r\nimport itertools\r\nimport time\r\n\r\nimport customtkinter\r\nfrom tkinter import *\r\nimport mysql.connector\r\nimport pandas as pd\r\nfrom customtkinter import *\r\nfrom tkinter import messagebox, ttk\r\nfrom CTkTable import CTkTable\r\nfrom PIL import Image\r\nfrom matplotlib import pyplot as plt\r\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\r\n\r\nimport connection\r\nfrom tkcalendar import Calendar\r\nfrom calendar import Calendar\r\n\r\n\r\nLOGO_IMG_DATA = Image.open(\"images/logo.png\")\r\nDASHBOARD_IMG_DATA = Image.open(\"images/dashboard_icon.png\")\r\nEMPLOYEE_IMG_DATA = Image.open(\"images/employee_icon.png\")\r\nPROJECT_IMG_DATA = Image.open(\"images/project.png\")\r\nSALARY_IMG_DATA = Image.open(\"images/salary_icon.png\")\r\nSETTINGS_IMG_DATA = Image.open(\"images/settings_icon.png\")\r\nLOGOUT_IMG_DATA = Image.open(\"images/log-out.png\")\r\nSEARCH_IMG_DATA = Image.open(\"images/search-icon.png\")\r\nUSER_IMG_DATA = Image.open(\"images/user_icon.png\")\r\nOPEN_IMG_DATA = Image.open(\"images/open.png\")\r\nLOGOUT_IMG2_DATA = Image.open(\"images/logout_set.png\")\r\n\r\nCOLORS = [\"#FFFFFF\", \"#601E88\", \"#491669\", \"#DCDCDC\", \"#F0F0F0\", \"#70438C\", \"#EEEEEE\"]\r\nPROGRESS_COLORS = [\"#D60000\", \"#FF9700\", \"#005DFF\", \"#42F200\", \"#DAE801\"]\r\nANCHORS = [\"nw\", \"n\", \"ne\", \"w\", \"center\", \"e\"]\r\nFONTS = [\"Arial\", \"Arial Bold\", \"Rockwell\"]\r\n\r\nEngineer_salary = 400\r\nManagement_salary = 500\r\nAdministrative_salary = 300\r\n\r\n\r\nclass DashboardWindow(customtkinter.CTk):\r\n    def __init__(self, username, password):\r\n        super().__init__()\r\n        self.title(\"Dashboard\")\r\n        set_appearance_mode(\"Light\")\r\n        self.geometry(\"956x645+350+100\")\r\n        self.username = username\r\n        # Images\r\n        self.logo_img = CTkImage(dark_image=LOGO_IMG_DATA, light_image=LOGO_IMG_DATA, size=(77.68, 85.42))\r\n        self.dashboard_img = CTkImage(dark_image=DASHBOARD_IMG_DATA, light_image=DASHBOARD_IMG_DATA)\r\n        self.employee_img = CTkImage(dark_image=EMPLOYEE_IMG_DATA, light_image=EMPLOYEE_IMG_DATA)\r\n        self.project_img = CTkImage(dark_image=PROJECT_IMG_DATA, light_image=PROJECT_IMG_DATA)\r\n        self.salary_img = CTkImage(dark_image=SALARY_IMG_DATA, light_image=SALARY_IMG_DATA)\r\n        self.settings_img = CTkImage(dark_image=SETTINGS_IMG_DATA, light_image=SETTINGS_IMG_DATA)\r\n        self.logout_img = CTkImage(dark_image=LOGOUT_IMG_DATA, light_image=LOGOUT_IMG_DATA)\r\n        self.search_img = CTkImage(dark_image=SEARCH_IMG_DATA, light_image=SEARCH_IMG_DATA)\r\n        self.user_img = CTkImage(dark_image=USER_IMG_DATA, light_image=USER_IMG_DATA)\r\n        self.open_img = CTkImage(dark_image=OPEN_IMG_DATA, light_image=OPEN_IMG_DATA)\r\n        self.logout_img2 = CTkImage(dark_image=LOGOUT_IMG2_DATA, light_image=LOGOUT_IMG2_DATA)\r\n\r\n        # Frame creation\r\n        self.side_frame = CTkFrame(master=self, fg_color= COLORS[1], width=176, height=650, corner_radius=0)\r\n        self.side_frame.pack_propagate(0)\r\n        self.side_frame.pack(fill=\"y\", anchor=ANCHORS[3], side=\"left\")\r\n\r\n        CTkLabel(master=self.side_frame, text=\"\", image=self.logo_img).pack(pady=(38, 0), anchor=ANCHORS[4])\r\n\r\n        self.dashboard_button = CTkButton(master=self.side_frame, image=self.dashboard_img, text=\"Dashboard\", fg_color=\"transparent\", font=(FONTS[1], 14), hover_color=COLORS[2], anchor=ANCHORS[3], command=self.dashboard)\r\n        self.dashboard_button.pack(anchor=ANCHORS[4], ipady=5, pady=(60, 0))\r\n\r\n        self.employee_button = CTkButton(master=self.side_frame, image=self.employee_img, text=\"Employees\", fg_color=\"transparent\", font=(FONTS[1], 14), hover_color=COLORS[2], anchor=ANCHORS[3], command=self.employees)\r\n        self.employee_button.pack(anchor=ANCHORS[4], ipady=5, pady=(16, 0))\r\n\r\n\r\n        self.project_button = CTkButton(master=self.side_frame, image=self.project_img, text=\"Projects\", fg_color=\"transparent\", font=(FONTS[1], 14), hover_color=COLORS[2], anchor=ANCHORS[3], command=self.projects)\r\n        self.project_button.pack(anchor=ANCHORS[4], ipady=5, pady=(16, 0))\r\n\r\n        self.salary_button = CTkButton(master=self.side_frame, image=self.salary_img, text=\"Salary\", fg_color=\"transparent\", font=(FONTS[1], 14), hover_color=COLORS[2], anchor=ANCHORS[3], command=self.salary)\r\n        self.salary_button.pack(anchor=ANCHORS[4], ipady=5, pady=(16, 0))\r\n\r\n        self.settings_button = CTkButton(master=self.side_frame, image=self.settings_img, text=\"Settings\", fg_color=\"transparent\", font=(FONTS[1], 14), hover_color=COLORS[2], anchor=ANCHORS[3], command=self.settings)\r\n        self.settings_button.pack(anchor=ANCHORS[4], ipady=5, pady=(16, 0))\r\n\r\n        self.logout_button = CTkButton(master=self.side_frame, image=self.logout_img, text=\"Log Out\", fg_color=\"transparent\", font=(FONTS[1], 14), hover_color=COLORS[2], anchor=ANCHORS[3], command=self.logout_listner)\r\n        self.logout_button.pack(anchor=ANCHORS[4], ipady=5, pady=(160, 0))\r\n\r\n        self.window_count = 0\r\n        if self.window_count == 0:\r\n            self.dashboard()\r\n            global job\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT * FROM employee_details WHERE username=%s\"\r\n            val = (username, )\r\n\r\n            cursor.execute(sql, val)\r\n            job = cursor.fetchall()\r\n            print(job)\r\n            job = job[0][2]\r\n\r\n\r\n        except mysql.connector.Error as e:\r\n            print(e)\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured :{e}\")\r\n\r\n    def dashboard(self):\r\n        if self.window_count == 2 or self.window_count == 3 or self.window_count == 3 or self.window_count == 4 or self.window_count == 5 or self.window_count == 6 or self.window_count == 7 or self.window_count == 8 or self.window_count == 9 or self.window_count == 10 or self.window_count == 11 or self.window_count == 12:\r\n            self.main_frame.destroy()\r\n        if self.window_count == 1:\r\n            pass\r\n        else:\r\n            self.main_frame = CTkFrame(master=self, fg_color=COLORS[0], width=780, height=650, corner_radius=0)\r\n            self.main_frame.pack_propagate(0)\r\n            self.main_frame.pack(side=\"left\")\r\n\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"SELECT employee_name FROM employee_details WHERE username=%s\"\r\n                val = (self.username, )\r\n                cursor.execute(sql, val)\r\n                result = cursor.fetchall()\r\n                username = result[0][0]\r\n            except mysql.connector.Error as e:\r\n                print(e)\r\n                messagebox.showerror(\"Database Error\", f\"Error Occured:{e}\")\r\n\r\n            self.profile_button = CTkButton(master=self.main_frame, image=self.user_img, text=f\"{username}\",\r\n                                            text_color=\"#000000\", fg_color=\"transparent\", width=200, height=35,\r\n                                            font=(FONTS[1], 16), hover_color=COLORS[0], compound=\"left\")\r\n            self.profile_button.pack(anchor=ANCHORS[1], ipady=5, padx=(600, 0), pady=(15, 0))\r\n\r\n            # self.user_button = CTkButton(master=self.main_frame, text=\"username\", fg_color=\"transparent\", font=(FONTS[1], 14), hover_color=COLORS[0], anchor=ANCHORS[2])\r\n\r\n            self.graph_frame = CTkFrame(master=self.main_frame, fg_color=COLORS[4], width=720, height=280, corner_radius=13)\r\n            self.graph_frame.pack(anchor=ANCHORS[4], padx=27, pady=(20, 0))\r\n\r\n            global df, data_fetch\r\n            # create a connection to the database\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n\r\n                # read the data from the database\r\n                query = 'SELECT employee_name, working_hours  FROM salary'\r\n                df = pd.read_sql(query, con=db)\r\n                dt = pd.DataFrame(df.sort_values(by=\"working_hours\"))\r\n                print(dt)\r\n            except mysql.connector.Error as e:\r\n                messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n                print(e)\r\n            # plot the data as a bar graph\r\n            plt.figure(figsize=(12, 9))\r\n            plt.bar(dt['employee_name'], dt['working_hours'])\r\n            plt.xlabel('employee name')\r\n            plt.ylabel('time (in hrs)')\r\n            plt.title('analytics')\r\n            # plt.subplots(facecolor=COLORS[4])\r\n            # plt.style.use(\"Solarize_light2\")\r\n\r\n\r\n            # plt.show()\r\n            self.add = plt.gcf()\r\n            canvas = FigureCanvasTkAgg(self.add, master=self.graph_frame)\r\n            canvas.get_tk_widget().configure(width=900, height=360)\r\n            ctk_canvas = canvas.get_tk_widget()\r\n            ctk_canvas.place(relx=0, rely=0, anchor=ANCHORS[0])\r\n\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n                sql = \"SELECT unique_id, project_name, total_tasks, tasks_done FROM project WHERE username = %s\"\r\n                val = (self.username, )\r\n                cursor.execute(sql, val)\r\n                result = cursor.fetchall()\r\n                print(result)\r\n            except mysql.connector.Error as e:\r\n                print(e)\r\n\r\n            self.task_number = int(result[0][2])\r\n            self.complete_task = int(result[0][3])\r\n            self.task_progress_frame = CTkScrollableFrame(master=self.main_frame, fg_color=COLORS[4], width=345, height=210, corner_radius=13)\r\n            self.task_progress_frame.pack(anchor=ANCHORS[1], side=\"left\", padx=(27, 0), pady=(20, 0))\r\n\r\n            self.description_frame = CTkScrollableFrame(master=self.main_frame, fg_color=COLORS[4], width=310, height=210,\r\n                                                        corner_radius=13)\r\n            self.description_frame.pack(anchor=ANCHORS[1], side=\"right\", padx=(0, 27), pady=(20, 0))\r\n\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"SELECT working_task , total_task,project_id FROM project_details WHERE username=%s\"\r\n                val = (self.username, )\r\n                cursor.execute(sql, val)\r\n                data_fetch = cursor.fetchall()\r\n                print(data_fetch)\r\n            except mysql.connector.Error as e:\r\n                print(e)\r\n                messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n\r\n            self.progress_bar_width = 310\r\n            index = 0\r\n            task_index = 0\r\n            prjt = 0\r\n            for i in range(len(data_fetch)):\r\n                self.task_number = data_fetch[index][task_index]\r\n                self.complete_task = data_fetch[index][task_index+1]\r\n                self.project = data_fetch[index][prjt+2]\r\n\r\n                try:\r\n                    db = connection.Connection().get_connection()\r\n                    cursor = db.cursor()\r\n\r\n                    sql = \"SELECT project_name FROM project WHERE unique_id=%s\"\r\n                    val = (self.project,)\r\n                    cursor.execute(sql, val)\r\n                    project_name = cursor.fetchall()\r\n                    print(project_name)\r\n                    sql2 = \"SELECT project_name, description FROM project WHERE unique_id=%s\"\r\n                    # val2 = (self.username,)\r\n                    cursor.execute(sql2, val)\r\n                    result = cursor.fetchall()\r\n                    print(result)\r\n                except mysql.connector.Error as e:\r\n                    print(e)\r\n                index += 1\r\n                progress = self.task_number/self.complete_task\r\n                print(i,progress)\r\n\r\n                self.name_frame = CTkFrame(master=self.task_progress_frame, width=50, fg_color=\"transparent\")\r\n                self.name_frame.pack(anchor=ANCHORS[1], fill=\"x\", pady=(10, 0))\r\n\r\n                self.label2 = (CTkLabel(master=self.name_frame, text=f\"{project_name[0][0]}\",\r\n                                        width=30, fg_color=COLORS[4]).pack(anchor=ANCHORS[3], side=\"left\", padx=(25, 25), pady=(5, 0)))\r\n                self.label1 = (CTkLabel(master=self.name_frame, text=f\"{self.task_number}/{self.complete_task}\",\r\n                                        width=30, fg_color=COLORS[4]).pack(anchor=ANCHORS[3], side=\"right\", padx=(25, 25), pady=(5, 0)))\r\n                self.progress_bar1 = CTkProgressBar(master=self.task_progress_frame, fg_color=COLORS[4],\r\n                                                    width=self.progress_bar_width, height=20, corner_radius=8,\r\n                                                    progress_color=PROGRESS_COLORS[0], border_color=COLORS[2], border_width=2)\r\n                self.progress_bar1.pack(anchor=ANCHORS[1], padx=10, pady=(5, 0))\r\n\r\n                self.progress_bar1.set(progress)\r\n\r\n                self.p_name = result[0][0]\r\n                self.p_description = result[0][1]\r\n\r\n                self.project_name = CTkTextbox(master=self.description_frame, height=35, fg_color=COLORS[3],\r\n                                               text_color=COLORS[2], font=(FONTS[1], 14))\r\n                self.project_name.pack(anchor=ANCHORS[1], fill=\"x\", padx=(5, 0), pady=(5, 0))\r\n                self.project_name.insert('1.0', self.p_name)\r\n\r\n                self.description_label = CTkTextbox(master=self.description_frame, fg_color=COLORS[3], height=100,\r\n                                                    text_color=\"#000000\", font=(FONTS[0], 13))\r\n                self.description_label.pack(anchor=ANCHORS[1], fill=\"x\", padx=(5, 0), pady=(5, 0))\r\n                self.description_label.insert('1.0', self.p_description)\r\n            # self.label1 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\", width=30).pack(anchor=ANCHORS[2], padx=(0, 25), pady=(5,0))\r\n            # self.progress_bar1 = CTkProgressBar(master=self.task_progress_frame, fg_color=COLORS[4], width=self.progress_bar_width, height=20, corner_radius=8, progress_color=COLORS[0], border_color=COLORS[2], border_width=2)\r\n            # self.progress_bar1.pack(anchor=ANCHORS[1], padx=10, pady=(5, 0))\r\n            # self.progress_bar1.set(self.current)\r\n            #\r\n            # self.label2 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\", width=30).pack(\r\n            #     anchor=ANCHORS[2], padx=(0, 25), pady=(35, 0))\r\n            # self.progress_bar2 = CTkProgressBar(master=self.task_progress_frame, fg_color=COLORS[4], width=self.progress_bar_width, height=20,\r\n            #                                     corner_radius=8, progress_color=COLORS[1], border_color=COLORS[2], border_width=2)\r\n            # self.progress_bar2.pack(anchor=ANCHORS[1], padx=10, pady=(5, 0))\r\n            #\r\n            # self.label3 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\", width=30).pack(\r\n            #     anchor=ANCHORS[2], padx=(0, 25), pady=(35, 0))\r\n            # self.progress_bar3 = CTkProgressBar(master=self.task_progress_frame, fg_color=COLORS[4], width=self.progress_bar_width, height=20,\r\n            #                                     corner_radius=8, progress_color=COLORS[4], border_color=COLORS[2], border_width=2)\r\n            # self.progress_bar3.pack(anchor=ANCHORS[1], padx=10, pady=(5, 0))\r\n\r\n            # self.label4 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\", width=30).pack(\r\n            #     anchor=ANCHORS[2], padx=(0, 25), pady=(35, 0))\r\n            # self.progress_bar4 = CTkProgressBar(master=self.task_progress_frame, fg_color=COLORS[4], width=self.progress_bar_width, height=20,\r\n            #                                     corner_radius=8, progress_color=COLORS[2], border_color=COLORS[2], border_width=2)\r\n            # self.progress_bar4.pack(anchor=ANCHORS[1], padx=10, pady=(5, 0))\r\n            #\r\n            # self.label5 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\", width=30).pack(\r\n            #     anchor=ANCHORS[2], padx=(0, 25), pady=(35, 0))\r\n            # self.progress_bar5 = CTkProgressBar(master=self.task_progress_frame, fg_color=COLORS[4], width=self.progress_bar_width, height=20,\r\n            #                                     corner_radius=8, progress_color=COLORS[3], border_color=COLORS[2], border_width=2)\r\n            # self.progress_bar5.pack(anchor=ANCHORS[1], padx=10, pady=(5, 0))\r\n\r\n\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"SELECT project_name, description FROM project WHERE username=%s\"\r\n                val = (self.username, )\r\n                cursor.execute(sql, val)\r\n                result = cursor.fetchall()\r\n                print(result)\r\n            except mysql.connector.Error as e:\r\n                print(e)\r\n                messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n\r\n            # for project_name in result:\r\n\r\n            # self.cal = Calendar(self.calendar_frame, selectmode=\"day\", date_pattern=\"y-mm-dd\")\r\n            # self.cal.pack(fill=\"both\", expand=True)\r\n            self.window_count = 1\r\n\r\n    def stop_timer(self):\r\n        global stop_time, elapsed_time, salary\r\n        self.val = self.radio_var.get()\r\n        if self.val == 1:\r\n            stop_time = time.time()\r\n        # input(\"Press enter to stop the timer...\"\r\n        elif self.val == 2:\r\n            elapsed_time = time.time() - stop_time\r\n            elapsed_time = round(elapsed_time)\r\n            print(f\"time spend {elapsed_time} seconds\")\r\n            final_time = (elapsed_time * 10) / 60\r\n            print(final_time)\r\n            if job == 'Engineer':\r\n                salary = final_time * Engineer_salary\r\n            elif job == \"Administrator\":\r\n                salary = final_time * Administrative_salary\r\n            elif job == \"Management\":\r\n                salary = final_time * Management_salary\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"UPDATE salary SET working_hours=%s, salary=%s WHERE username=%s\"\r\n                val = (final_time, salary, self.username, )\r\n                cursor.execute(sql, val)\r\n\r\n                db.commit()\r\n            except mysql.connector.Error as e:\r\n                messagebox.showinfo(\"Database Error\", f\"Error Occured: {e}\")\r\n                print(e)\r\n\r\n    def employees(self):\r\n        if self.window_count != 2:\r\n            self.main_frame.destroy()\r\n        if self.window_count == 2:\r\n            pass\r\n        else:\r\n            self.main_frame = CTkFrame(master=self, fg_color=COLORS[0], width=780, height=650, corner_radius=0)\r\n            self.main_frame.pack_propagate(0)\r\n            self.main_frame.pack(side=\"left\")\r\n\r\n            title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n            title_frame.pack(anchor=ANCHORS[1], fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n            self.label = CTkLabel(master=title_frame, text=\"Employee & their details\", font=(\"Arial Black\", 23),\r\n                                  text_color=COLORS[1])\r\n            self.label.pack(anchor=ANCHORS[0], side=\"left\", pady=(8, 0))\r\n\r\n            self.add_employee_button = CTkButton(master=title_frame, text=\"+ New Employee\", font=(\"Arial Black\", 15),\r\n                                                 text_color=\"#fff\", fg_color=COLORS[1], hover_color=COLORS[2],\r\n                                                 corner_radius=15, command=self.add_employee)\r\n            self.add_employee_button.pack(anchor=ANCHORS[2], side=\"right\", ipady=10)\r\n\r\n            self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=COLORS[4])\r\n            self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n            self.search_entry = CTkEntry(master=self.search_container, width=650, placeholder_text=\"Search Employee with its ID or Name\",\r\n                                         border_color=COLORS[5], border_width=2)\r\n            self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n            self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=COLORS[1], hover_color=COLORS[2], width=28, command=self.search)\r\n            self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"SELECT * FROM employee_details\"\r\n                cursor.execute(sql)\r\n                results = cursor.fetchall()\r\n                for result in results:\r\n                    print(result)\r\n            except mysql.connector.Error as e:\r\n                print(e)\r\n\r\n            self.table_data = [\r\n                [(\"ID\", \"Name\", \"Profession\", \"Date of Joining\", \"Contact No.\", \"Emergency\\nContact No.\")]\r\n            ]\r\n            self.table_data.append(results)\r\n            self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n            self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n            self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n            self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", COLORS[6]], header_color=COLORS[1],\r\n                                  hover_color=COLORS[3])\r\n            self.table.edit_row(0, font=(FONTS[1], 14))\r\n            self.table.edit_row(0, text_color=\"#fff\", hover_color=COLORS[2])\r\n            self.table.pack(expand=True)\r\n\r\n            self.window_count = 2\r\n\r\n    def add_employee(self):\r\n        if self.window_count != 3:\r\n            self.main_frame.destroy()\r\n        if self.window_count == 3:\r\n            pass\r\n        else:\r\n            self.main_frame.destroy()\r\n            self.main_frame = CTkFrame(master=self, fg_color=COLORS[0], width=780, height=650, corner_radius=0)\r\n            self.main_frame.pack_propagate(0)\r\n            self.main_frame.pack(side=\"left\")\r\n\r\n            title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n            title_frame.pack(anchor=ANCHORS[1], fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n            self.label = CTkLabel(master=title_frame, text=\"Applicant & their details\", font=(\"Arial Black\", 23),\r\n                                  text_color=COLORS[1])\r\n            self.label.pack(anchor=ANCHORS[0], side=\"left\", pady=(8, 0))\r\n\r\n            self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=COLORS[4])\r\n            self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n            self.request_entry = CTkEntry(master=self.search_container, width=650,\r\n                                          placeholder_text=\"Search Employee with its ID or Name\",\r\n                                          border_color=COLORS[5], border_width=2)\r\n            self.request_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n            self.request_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img,\r\n                                            fg_color=COLORS[1],\r\n                                            hover_color=COLORS[2], width=28, command=self.request_to_accept)\r\n            self.request_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"SELECT * FROM requests\"\r\n                cursor.execute(sql)\r\n                results = cursor.fetchall()\r\n                for result in results:\r\n                    print(result)\r\n            except mysql.connector.Error as e:\r\n                print(e)\r\n\r\n            self.table_data = [\r\n                [(\"Request ID\", \"Applicants Name\", \"Profession\", \"Contact No.\", \"Emergency\\nContact No.\")]\r\n            ]\r\n            self.table_data.append(results)\r\n            self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n            self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n            self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n            self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", COLORS[6]],\r\n                                  header_color=COLORS[1],\r\n                                  hover_color=COLORS[3])\r\n            self.table.edit_row(0, font=(FONTS[1], 14))\r\n            self.table.edit_row(0, text_color=\"#fff\", hover_color=COLORS[2])\r\n            self.table.pack(expand=True)\r\n\r\n            self.window_count = 3\r\n\r\n        # self.main_frame = CTkFrame(master=self, fg_color=COLORS[0], width=780, height=650, corner_radius=0)\r\n        # self.main_frame.pack_propagate(0)\r\n        # self.main_frame.pack(side=\"left\")\r\n        #\r\n        # self.s_pass = IntVar(value=0)\r\n        #\r\n        # self.label = CTkLabel(master=self.main_frame, text=\"Creating New Profile....\", fg_color=\"transparent\",\r\n        #                       text_color=COLORS[1], font=(FONTS[1], 25))\r\n        # self.label.pack(anchor=ANCHORS[0], padx=(25, 25), pady=(40, 0))\r\n        #\r\n        # self.name_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Enter name of Employee\", height=35, width=330,\r\n        #                            fg_color=COLORS[6], border_color=COLORS[1], font=(FONTS[0], 14))\r\n        # self.name_entry.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(40, 0))\r\n        # self.profession_entry = CTkComboBox(master=self.main_frame, height=35, width=330, border_color=COLORS[1],\r\n        #                                     button_color=COLORS[1], dropdown_fg_color=COLORS[1],\r\n        #                                     dropdown_text_color=COLORS[0], dropdown_hover_color=COLORS[2],\r\n        #                                     button_hover_color=COLORS[1],\r\n        #                                     values=[\"Select Job role\", \"Administrator\", \"Engineer\", \"Management\"])\r\n        # self.profession_entry.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(25, 0))\r\n        # self.date_of_joining_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Enter Date of Joining i.e. dd/mm/yyyy\",\r\n        #                                       height=35, width=330, fg_color=COLORS[6], border_color=COLORS[1],\r\n        #                                       font=(FONTS[0], 14))\r\n        # self.date_of_joining_entry.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(25, 0))\r\n        # self.contact_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Contact No.\", height=35, width=330,\r\n        #                               fg_color=COLORS[6], border_color=COLORS[1], font=(FONTS[0], 14))\r\n        # self.contact_entry.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(25, 0))\r\n        # self.emergency_contact_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Emergency Contact No.\", height=35,\r\n        #                                         width=330, fg_color=COLORS[6], border_color=COLORS[1],\r\n        #                                         font=(FONTS[0], 14))\r\n        # self.emergency_contact_entry.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(25, 0))\r\n        # self.username_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Username\", height=35, width=330,\r\n        #                                fg_color=COLORS[6], border_color=COLORS[1], font=(FONTS[0], 14))\r\n        # self.username_entry.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(25, 0))\r\n        # self.password_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Password\", height=35, width=330,\r\n        #                                fg_color=COLORS[6], border_color=COLORS[1], font=(FONTS[0], 14), show=\"●\")\r\n        # self.password_entry.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(25, 0))\r\n        # self.show_password = CTkCheckBox(master=self.main_frame, checkbox_height=15, checkbox_width=15, text=\"Show Password ?\",\r\n        #                                  text_color=\"#7E7E7E\", variable=self.s_pass, onvalue=1, offvalue=0,\r\n        #                                  command=self.toggle_password).pack(anchor=ANCHORS[1], padx=(200, 0), pady=(5, 0))\r\n        # self.add_button = CTkButton(master=self.main_frame, text=\"Create Profile\", height=35, fg_color=COLORS[1],\r\n        #                             hover_color=COLORS[2], text_color=COLORS[0], font=(FONTS[0], 14),\r\n        #                             command=self.get_entries).pack(anchor=ANCHORS[1], padx=(25, 25), pady=(25, 0))\r\n\r\n    def request_to_accept(self):\r\n        request_id = self.request_entry.get()\r\n        now = datetime.datetime.now()\r\n        today = now.date()\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"select  employee_name, profession, contact_no, emergency_contact_no,username from requests where request_id = %s\"\r\n            values = (request_id,)\r\n\r\n            cursor.execute(sql, values)\r\n            result = cursor.fetchall()\r\n            print(result)\r\n\r\n            print(today)\r\n            today = f\"{today}\"\r\n            result = result[0]\r\n            print(result)\r\n            results = result + (today,)\r\n            sql2 = (\"insert into employee_details ( employee_name, profession, \"\r\n                    \"contact_no, emergency_contact_no, username,date_of_joining) values(%s,%s,%s,%s,%s,%s)\")\r\n            values2 = results\r\n            cursor.execute(sql2, values2, )\r\n\r\n            sql3 = \"delete from requests where request_id =%s\"\r\n            values3 = (request_id,)\r\n            cursor.execute(sql3, values3, )\r\n\r\n            sql4 = \"select * from request_login where username = %s\"\r\n            values4 = (result[4],)\r\n            cursor.execute(sql4, values4)\r\n            cred = cursor.fetchall()\r\n            print(cred)\r\n\r\n            sql5 = \"Insert into user_login(username, password) values(%s,%s)\"\r\n            values5 = (cred[0][0], cred[0][1])\r\n            cursor.execute(sql5, values5, )\r\n\r\n            sql6 = \"delete from request_login where username = %s\"\r\n            values6 = (cred[0][0],)\r\n            cursor.execute(sql6, values6)\r\n            db.commit()\r\n            print(result)\r\n            self.main_frame.destroy()\r\n            self.employees()\r\n        except mysql.connector.Error as e:\r\n            print(e)\r\n            \r\n    def get_entries(self):\r\n        global username\r\n        employee_name = self.name_entry.get()\r\n        profession = self.profession_entry.get()\r\n        date_of_joining = self.date_of_joining_entry.get()\r\n        contact = self.contact_entry.get()\r\n        emergency_contact = self.emergency_contact_entry.get()\r\n        username = self.username_entry.get()\r\n        password = self.password_entry.get()\r\n\r\n        if (employee_name == '' or profession == '' or date_of_joining == '' or contact == '' or username == '' or password == ''):\r\n            messagebox.showinfo(\"Null Info\", \"All fields are required to create profile\")\r\n        elif contact.isdigit() is not True or emergency_contact.isdigit() is not True:\r\n            messagebox.showinfo(\"Invalid\", \"Contact number should contain only digits\")\r\n        elif len(contact) != 10 or len(emergency_contact) != 10:\r\n            messagebox.showinfo(\"Invalid\", \"Contact number should contain 10 digits\")\r\n        elif password.isdigit() is not True:\r\n            messagebox.showinfo(\"Invalid\", \"Password should contain digits only\")\r\n        elif not self.check_duplicate_user(username):\r\n            if profession == \"Select Job role\":\r\n                messagebox.showinfo(\"change\", \"Please select your Job role\")\r\n            elif profession == \"Administrator\":\r\n                hourly_salary = 300\r\n            elif profession == \"Engineer\":\r\n                hourly_salary = 400\r\n            elif profession == \"Management\":\r\n                hourly_salary = 500\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"INSERT INTO employee_details (employee_name, profession, date_of_joining, contact_no, emergency_contact_no) VALUES (%s, %s, %s, %s, %s)\"\r\n                val = (employee_name, profession, date_of_joining, contact, emergency_contact)\r\n                sql_2 = \"INSERT INTO salary (employee_name, profession, hourly_salary) VALUES (%s, %s, %s)\"\r\n                val_2 = (employee_name, profession, str(hourly_salary))\r\n\r\n                sql_1 = \"INSERT INTO user_login (username, password) VALUES (%s, %s)\"\r\n                val_1 = (username, password)\r\n\r\n                cursor.execute(sql, val)\r\n                cursor.execute(sql_1, val_1)\r\n                cursor.execute(sql_2, val_2)\r\n                print(\"name\")\r\n\r\n                db.commit()\r\n                self.main_frame.destroy()\r\n                messagebox.showinfo(\"Successful\", \"Employee profile is created successfully\")\r\n                self.main_frame.destroy()\r\n            except mysql.connector.Error as e:\r\n                messagebox.showerror(\"Database Error\", f\"Error occured: {e}\")\r\n        else:\r\n            print(\"hello\")\r\n        self.employees()\r\n\r\n\r\n    def search(self):\r\n        if self.window_count != 4:\r\n            self.main_frame.destroy()\r\n        if self.window_count == 4:\r\n            pass\r\n        else:\r\n            search_data = self.search_entry.get()\r\n            global data\r\n            if search_data == '':\r\n                messagebox.showinfo(\"Null Field\", \"There is Nothing to Search\")\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"SELECT * FROM employee_details WHERE employee_name=%s\"\r\n                val = (search_data, )\r\n\r\n                cursor.execute(sql, val)\r\n                data_fetch = cursor.fetchall()\r\n                for data in data_fetch:\r\n                    print(data)\r\n            except mysql.connector.Error as e:\r\n                messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n                print(e)\r\n            self.main_frame.destroy()\r\n\r\n            self.main_frame = CTkFrame(master=self, fg_color=COLORS[0], width=780, height=650, corner_radius=0)\r\n            self.main_frame.pack_propagate(0)\r\n            self.main_frame.pack(side=\"left\")\r\n\r\n            title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n            title_frame.pack(anchor=ANCHORS[1], fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n            self.label = CTkLabel(master=title_frame, text=\"Employee & their details\", font=(\"Arial Black\", 23),\r\n                                  text_color=COLORS[1])\r\n            self.label.pack(anchor=ANCHORS[0], side=\"left\", pady=(8, 0))\r\n\r\n            self.add_employee_button = CTkButton(master=title_frame, text=\"+ New Employee\", font=(\"Arial Black\", 15),\r\n                                                 text_color=\"#fff\", fg_color=COLORS[1], hover_color=COLORS[2],\r\n                                                 corner_radius=15, command=self.add_employee)\r\n            self.add_employee_button.pack(anchor=ANCHORS[2], side=\"right\", ipady=10)\r\n\r\n            self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=COLORS[4])\r\n            self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n            self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                         placeholder_text=\"Search Employee with its ID or Name\",\r\n                                         border_color=COLORS[5], border_width=2)\r\n            self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n            self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=COLORS[1],\r\n                                           hover_color=COLORS[2], width=28, command=self.search)\r\n            self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n            self.table_data = [\r\n                [(\"ID\", \"Name\", \"Profession\", \"Date of Joining\", \"Contact No.\", \"Emergency\\nContact No.\")]\r\n            ]\r\n            self.table_data.append(data_fetch)\r\n            # print(self.table_data)\r\n            self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n            self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n            self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n            self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", COLORS[6]],\r\n                                  header_color=COLORS[1],\r\n                                  hover_color=COLORS[3])\r\n            self.table.edit_row(0, font=(FONTS[1], 14))\r\n            self.table.edit_row(0, text_color=\"#fff\", hover_color=COLORS[2])\r\n            self.table.pack(expand=True)\r\n\r\n            self.window_count = 4\r\n\r\n    def projects(self):\r\n        if self.window_count != 5:\r\n            self.main_frame.destroy()\r\n        if self.window_count == 5:\r\n            pass\r\n        else:\r\n            self.main_frame = CTkFrame(master=self, fg_color=COLORS[0], width=780, height=650, corner_radius=0)\r\n            self.main_frame.pack_propagate(0)\r\n            self.main_frame.pack(side=\"left\")\r\n\r\n            title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n            title_frame.pack(anchor=ANCHORS[1], fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n            self.label = CTkLabel(master=title_frame, text=\"Project Details\", font=(\"Arial Black\", 23),\r\n                                  text_color=COLORS[1])\r\n            self.label.pack(anchor=ANCHORS[0], side=\"left\", pady=(8, 0))\r\n\r\n            self.add_project_button = CTkButton(master=title_frame, text=\"Create New Project\", font=(\"Arial Black\", 15),\r\n                                                text_color=\"#fff\", fg_color=COLORS[1], hover_color=COLORS[2],\r\n                                                corner_radius=15, command=self.create_new_project)\r\n            self.add_project_button.pack(anchor=ANCHORS[2], side=\"right\", ipady=10)\r\n\r\n            self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=COLORS[4])\r\n            self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n            self.search_entry = CTkEntry(master=self.search_container, width=650, placeholder_text=\"Search Project with Unique ID\",\r\n                                         border_color=COLORS[5], border_width=2)\r\n            self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n            self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=COLORS[1],\r\n                                           hover_color=COLORS[2], width=28, command=self.search_project)\r\n            self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"SELECT unique_id, project_name, start_date, due_date, total_tasks, tasks_done FROM project\"\r\n                cursor.execute(sql)\r\n                results = cursor.fetchall()\r\n                for result in results:\r\n                    print(result)\r\n            except mysql.connector.Error as e:\r\n                messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n                print(e)\r\n\r\n            self.table_data = [\r\n                [(\"Unique\\nID\", \"Project Name\", \"Start Date\", \"Due Date\", \"Number\\nof Tasks\", \"Completed\\nTasks\")]\r\n            ]\r\n\r\n            self.table_data.append(results)\r\n            self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n            self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n            self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n            self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", COLORS[6]], header_color=COLORS[1],\r\n                                  hover_color=COLORS[3])\r\n            self.table.edit_row(0, font=(FONTS[1], 14))\r\n            self.table.edit_row(0, text_color=\"#fff\", hover_color=COLORS[2])\r\n            self.table.edit_column(1, width=200)\r\n            self.table.pack(expand=True)\r\n\r\n            self.window_count = 5\r\n\r\n    def create_new_project(self):\r\n        if self.window_count != 6:\r\n            self.main_frame.destroy()\r\n        if self.window_count == 6:\r\n            pass\r\n        else:\r\n            self.main_frame.destroy()\r\n\r\n            self.main_frame = CTkFrame(master=self, fg_color=COLORS[0], width=780, height=650, corner_radius=0)\r\n            self.main_frame.pack_propagate(0)\r\n            self.main_frame.pack(side=\"left\")\r\n\r\n            self.s_pass = IntVar(value=0)\r\n            self.label = CTkLabel(master=self.main_frame, text=\"Creating New Project....\", fg_color=\"transparent\", text_color=COLORS[1], font=(FONTS[1], 25))\r\n            self.label.pack(anchor=ANCHORS[0], padx=(25, 25), pady=(40, 0))\r\n\r\n            self.project_name_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Enter name of Project\", height=35, width=330,\r\n                                       fg_color=COLORS[6], border_color=COLORS[1], font=(FONTS[0], 14))\r\n            self.project_name_entry.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(60, 0))\r\n            # self.start_date_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Enter Start Date of project i.e. dd/mm/yyyy\", height=35, width=330,\r\n            #                            fg_color=COLORS[6], border_color=COLORS[1], font=(FONTS[0], 14))\r\n            # self.start_date_entry.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(25, 0))\r\n\r\n            self.due_date_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Enter Due date of project i.e. dd/mm/yyyy\", height=35, width=330,\r\n                                       fg_color=COLORS[6], border_color=COLORS[1], font=(FONTS[0], 14))\r\n            self.due_date_entry.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(25, 0))\r\n\r\n            # self.number_of_participants = CTkEntry(master=self.main_frame, placeholder_text=\"Enter Number of Participants\", height=35, width=330,\r\n            #                            fg_color=COLORS[6], border_color=COLORS[1], font=(FONTS[0], 14))\r\n            # self.number_of_participants.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(25, 0))\r\n            self.assign_task_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Enter name of Employee to assign this project\", height=35, width=330,\r\n                                               fg_color=COLORS[6], border_color=COLORS[1], font=(FONTS[0], 14))\r\n            self.assign_task_entry.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(25, 0))\r\n\r\n            self.no_of_tasks_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Enter Number of Tasks\", height=35, width=330,\r\n                                               fg_color=COLORS[6], border_color=COLORS[1], font=(FONTS[0], 14))\r\n            self.no_of_tasks_entry.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(25, 0))\r\n\r\n            self.description_entry = CTkTextbox(master=self.main_frame, height=100, width=330, fg_color=COLORS[6], border_width=2, border_color=COLORS[1], font=(FONTS[0], 14))\r\n            self.description_entry.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(25, 0))\r\n\r\n            self.create_project_button = CTkButton(master=self.main_frame, text=\"Create Project\", height=35, fg_color=COLORS[1],\r\n                                        hover_color=COLORS[2], text_color=COLORS[0], font=(FONTS[0], 14),\r\n                                        command=self.get_entries_project).pack(anchor=ANCHORS[1], padx=(25, 25), pady=(25, 0))\r\n\r\n            self.assign_project_button = CTkButton(master=self.main_frame, text=\"Assign existing Project\", height=35,\r\n                                                   fg_color=\"transparent\",\r\n                                                   hover_color=COLORS[0], text_color=\"#7E7E7E\", font=(FONTS[0], 13, \"underline\"),\r\n                                                   command=self.assign_project).pack(anchor=ANCHORS[1], padx=(25, 25),\r\n                                                                                          pady=(20, 0))\r\n\r\n            self.window_count = 6\r\n\r\n    def get_entries_project(self):\r\n        project_name = self.project_name_entry.get()\r\n        start_date = datetime.datetime.now().date()\r\n        due_date = self.due_date_entry.get()\r\n        assign_task = self.assign_task_entry.get()\r\n        assign_task = [int(x) for x in assign_task.split(',')]\r\n        project_description = self.description_entry.get('0.0', \"end\")\r\n        number_of_tasks = self.no_of_tasks_entry.get()\r\n        number_of_tasks = [int(x) for x in number_of_tasks.split(',')]\r\n\r\n        if len(assign_task) < len(number_of_tasks):\r\n            messagebox.showinfo(\"\", \"Number of Empployees and Number of tasks should be same\")\r\n        elif len(assign_task) > len(number_of_tasks):\r\n            messagebox.showinfo(\"\", \"Number of Empployees and Number of tasks should be same\")\r\n        else:\r\n            print(f\"assign tasks:{assign_task}, datatype={type(assign_task)}\")\r\n            print(f\"number_of tasks:{number_of_tasks}, datatype={type(number_of_tasks)}\")\r\n\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"INSERT INTO project (project_name, start_date, due_date, participants, tasks, description) VALUES (%s, %s, %s, %s, %s, %s)\"\r\n                val = (project_name, start_date, due_date, str(assign_task), str(number_of_tasks), project_description)\r\n\r\n                # sql_1 = \"INSERT INTO user_login (username, password) VALUES (%s, %s)\"\r\n                # val_1 = (username, password)\r\n\r\n                cursor.execute(sql, val)\r\n                # cursor.execute(sql_1, val_1)\r\n                print(\"name\")\r\n\r\n                db.commit()\r\n                # self.main_frame.destroy()\r\n                messagebox.showinfo(\"Successful\", \"Project is created successfully\")\r\n                self.main_frame.destroy()\r\n                self.projects()\r\n            except mysql.connector.Error as e:\r\n                messagebox.showerror(\"Database Error\", f\"Error occured: {e}\")\r\n            global project_details, id\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n                sql = \"SELECT * FROM project\"\r\n                cursor.execute(sql)\r\n                result = cursor.fetchall()\r\n                project_details = result[-1]\r\n                id = project_details[0]\r\n                print(id)\r\n                print(project_details)\r\n            except mysql.connector.Error as e:\r\n                messagebox.showerror(\"Database Error\", f\"Error Occured:{e}\")\r\n            index = 0\r\n            for i in range(len(assign_task)):\r\n                try:\r\n                    db = connection.Connection().get_connection()\r\n                    cursor = db.cursor()\r\n\r\n                    sql = \"SELECT username FROM employee_details WHERE employee_id=%s\"\r\n                    val = (assign_task[index], )\r\n\r\n                    cursor.execute(sql, val)\r\n                    result = cursor.fetchall()\r\n                    result = result[0][0]\r\n                    print(result)\r\n                    index += 1\r\n                    sql1 = \"SELECT project FROM employee_details WHERE username=%s\"\r\n                    val1 = (result, )\r\n                    cursor.execute(sql1, val1)\r\n                    result1 = cursor.fetchall()\r\n                    print(result1[0][0])\r\n                    import ast\r\n                    result1 = ast.literal_eval(result1)\r\n                    print(type(result1))\r\n                except mysql.connector.Error as e:\r\n                    messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n\r\n    def search_project(self):\r\n        if self.window_count != 7:\r\n            self.main_frame.destroy()\r\n        if self.window_count == 7:\r\n            pass\r\n        else:\r\n            search_project = self.search_entry.get()\r\n\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"SELECT * FROM project WHERE project_name=%s\"\r\n                val = (search_project, )\r\n                cursor.execute(sql, val)\r\n\r\n                fetch_project = cursor.fetchall()\r\n                for project in fetch_project:\r\n                    print(project)\r\n            except mysql.connector.Error as e:\r\n                messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n                print(e)\r\n            self.main_frame.destroy()\r\n\r\n            self.main_frame = CTkFrame(master=self, fg_color=COLORS[0], width=780, height=650, corner_radius=0)\r\n            self.main_frame.pack_propagate(0)\r\n            self.main_frame.pack(side=\"left\")\r\n\r\n            title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n            title_frame.pack(anchor=ANCHORS[1], fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n            self.label = CTkLabel(master=title_frame, text=\"Project Details\", font=(\"Arial Black\", 23),\r\n                                  text_color=COLORS[1])\r\n            self.label.pack(anchor=ANCHORS[0], side=\"left\", pady=(8, 0))\r\n\r\n            self.add_project_button = CTkButton(master=title_frame, text=\"Create New Project\", font=(\"Arial Black\", 15),\r\n                                                text_color=\"#fff\", fg_color=COLORS[1], hover_color=COLORS[2],\r\n                                                corner_radius=15)\r\n            self.add_project_button.pack(anchor=ANCHORS[2], side=\"right\", ipady=10)\r\n\r\n            self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=COLORS[4])\r\n            self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n            self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                         placeholder_text=\"Search Project with Unique ID\",\r\n                                         border_color=COLORS[5], border_width=2)\r\n            self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n            self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=COLORS[1],\r\n                                           hover_color=COLORS[2], width=28)\r\n            self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n            self.table_data = [\r\n                [(\"Unique\\nID\", \"Project Name\", \"Start Date\", \"Due Date\", \"Project\\nHead\", \"Number\\nof Tasks\", \"No. of\\nCompleted Tasks\")]\r\n            ]\r\n\r\n            self.table_data.append(fetch_project)\r\n            self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n            self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n            self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n            self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", COLORS[6]],\r\n                                  header_color=COLORS[1],\r\n                                  hover_color=COLORS[3])\r\n            self.table.edit_row(0, font=(FONTS[1], 14))\r\n            self.table.edit_row(0, text_color=\"#fff\", hover_color=COLORS[2])\r\n            self.table.edit_column(1, width=200)\r\n            self.table.pack(expand=True)\r\n\r\n            self.window_count = 7\r\n\r\n    def assign_project(self):\r\n        if self.window_count != 8:\r\n            self.main_frame.destroy()\r\n        if self.window_count == 8:\r\n            pass\r\n        else:\r\n            self.main_frame.destroy()\r\n\r\n            self.main_frame = CTkFrame(master=self, fg_color=COLORS[0], width=780, height=650, corner_radius=0)\r\n            self.main_frame.pack_propagate(0)\r\n            self.main_frame.pack(side=\"left\", fill=\"y\")\r\n\r\n            title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n            title_frame.pack(anchor=ANCHORS[1], fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n            self.label = CTkLabel(master=title_frame, text=\"Project Details\", font=(\"Arial Black\", 23),\r\n                                  text_color=COLORS[1])\r\n            self.label.pack(anchor=ANCHORS[0], side=\"left\", pady=(8, 0))\r\n\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"SELECT * FROM project\"\r\n                cursor.execute(sql)\r\n                results = cursor.fetchall()\r\n                for result in results:\r\n                    print(result)\r\n            except mysql.connector.Error as e:\r\n                messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n                print(e)\r\n\r\n            self.table_data = [\r\n                [(\"Unique\\nID\", \"Project Name\", \"Start Date\", \"Due Date\", \"Project\\nHead\", \"Number\\nof Tasks\",\r\n                  \"Completed\\nTasks\")]\r\n            ]\r\n\r\n            self.table_data.append(results)\r\n            self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n            self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n            self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=(21, 0))\r\n            self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", COLORS[6]],\r\n                                  header_color=COLORS[1],\r\n                                  hover_color=COLORS[3])\r\n            self.table.edit_row(0, font=(FONTS[1], 14))\r\n            self.table.edit_row(0, text_color=\"#fff\", hover_color=COLORS[2])\r\n            self.table.edit_column(1, width=200)\r\n            self.table.pack(expand=True)\r\n\r\n            entry_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n            entry_frame.pack(anchor=ANCHORS[1], fill=\"x\", padx=27, pady=(10, 0))\r\n\r\n            self.employee_id_entry = CTkEntry(master=entry_frame, placeholder_text=\"Enter Employee_ID\", width=290, height=35, border_color=COLORS[1], font=(FONTS[1], 14))\r\n            self.employee_id_entry.pack(anchor=ANCHORS[0], side=\"left\", padx=(55, 25), pady=(10, 0))\r\n\r\n            self.project_id_entry = CTkEntry(master=entry_frame, placeholder_text=\"Enter Project_ID\", width=290, height=35, border_color=COLORS[1], font=(FONTS[1], 14))\r\n            self.project_id_entry.pack(anchor=ANCHORS[0], side=\"right\", padx=(25, 55), pady=(10, 0))\r\n\r\n            self.assign_button = CTkButton(master=self.main_frame, text=\"Assign Project\", height=35, fg_color=COLORS[1], hover_color=COLORS[2], font=(FONTS[1], 14))\r\n            self.assign_button.pack(anchor=ANCHORS[4], padx=(25, 25), pady=10)\r\n\r\n            self.window_count = 8\r\n\r\n    def salary(self):\r\n        if self.window_count != 9:\r\n            self.main_frame.destroy()\r\n        if self.window_count == 9:\r\n            pass\r\n        else:\r\n            self.main_frame = CTkFrame(master=self, fg_color=COLORS[0], width=780, height=650, corner_radius=0)\r\n            self.main_frame.pack_propagate(0)\r\n            self.main_frame.pack(side=\"left\")\r\n\r\n            # title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n            # title_frame.pack(anchor=ANCHORS[1], fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n            # self.label = CTkLabel(master=title_frame, text=\"Projects History\", font=(\"Arial Black\", 23),\r\n            #                       text_color=COLORS[1])\r\n            # self.label.pack(anchor=ANCHORS[0], side=\"left\", pady=(8, 0))\r\n\r\n            self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=COLORS[4])\r\n            self.search_container.pack(anchor=ANCHORS[1], fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n            self.search_entry = CTkEntry(master=self.search_container, width=650, placeholder_text=\"Search Employee with  its ID or Name\",\r\n                                         border_color=COLORS[5], border_width=2)\r\n            self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n            self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=COLORS[1],\r\n                                           hover_color=COLORS[2], width=28, command=self.salary_search)\r\n            self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"SELECT employee_id, employee_name, profession, working_hours, salary FROM salary\"\r\n                cursor.execute(sql)\r\n                results = cursor.fetchall()\r\n                for result in results:\r\n                    print(result)\r\n            except mysql.connector.Error as e:\r\n                print(e)\r\n\r\n            self.table_data = [\r\n                [(\"ID\", \"Name\", \"Profession\", \"Working\\nHours\", \"Salary\")]\r\n            ]\r\n            self.table_data.append(results)\r\n            self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n            self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n            self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n            self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", COLORS[6]], header_color=COLORS[1],\r\n                                  hover_color=COLORS[3])\r\n            self.table.edit_row(0, font=(FONTS[1], 14))\r\n            self.table.edit_row(0, text_color=\"#fff\", hover_color=COLORS[2])\r\n            self.table.pack(expand=True)\r\n\r\n            self.window_count = 9\r\n\r\n    def salary_search(self):\r\n        if self.window_count != 10:\r\n            self.main_frame.destroy()\r\n        if self.window_count == 10:\r\n            pass\r\n        else:\r\n            search_data = self.search_entry.get()\r\n            global data\r\n            if search_data == '':\r\n                messagebox.showinfo(\"Null Field\", \"There is Nothing to Search\")\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"SELECT employee_id, employee_name, profession, working_hours, salary FROM salary WHERE %s IN (employee_id, employee_name)\"\r\n                val = (search_data,)\r\n\r\n                cursor.execute(sql, val)\r\n                data_fetch = cursor.fetchall()\r\n                for data in data_fetch:\r\n                    print(data)\r\n            except mysql.connector.Error as e:\r\n                messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n                print(e)\r\n            self.main_frame.destroy()\r\n\r\n            self.main_frame = CTkFrame(master=self, fg_color=COLORS[0], width=780, height=650, corner_radius=0)\r\n            self.main_frame.pack_propagate(0)\r\n            self.main_frame.pack(side=\"left\")\r\n\r\n            self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=COLORS[4])\r\n            self.search_container.pack(anchor=ANCHORS[1], fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n            self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                         placeholder_text=\"Search Employee with  its ID or Name\",\r\n                                         border_color=COLORS[5], border_width=2)\r\n            self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n            self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=COLORS[1],\r\n                                           hover_color=COLORS[2], width=28)\r\n            self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n            self.table_data = [\r\n                [(\"ID\", \"Name\", \"Profession\", \"Working\\nHours\", \"Salary\")]\r\n            ]\r\n            self.table_data.append(data_fetch)\r\n            self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n            self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n            self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n            self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", COLORS[6]],\r\n                                  header_color=COLORS[1],\r\n                                  hover_color=COLORS[3])\r\n            self.table.edit_row(0, font=(FONTS[1], 14))\r\n            self.table.edit_row(0, text_color=\"#fff\", hover_color=COLORS[2])\r\n            self.table.pack(expand=True)\r\n\r\n            self.window_count = 10\r\n\r\n    def settings(self):\r\n        if self.window_count != 11:\r\n            self.main_frame.destroy()\r\n        if self.window_count == 11:\r\n            pass\r\n        else:\r\n            self.main_frame.destroy()\r\n\r\n            self.main_frame = CTkFrame(master=self, fg_color=COLORS[0], width=780, height=650, corner_radius=0)\r\n            self.main_frame.pack_propagate(0)\r\n            self.main_frame.pack(side=\"left\")\r\n\r\n            self.edit_profile_button = CTkButton(master=self.main_frame, image=self.open_img,\r\n                                                 text=\"     Edit Profile                                                                                             \",\r\n                                                 width=620, height=60, fg_color=COLORS[1], font=(FONTS[2], 22),\r\n                                                 hover_color=COLORS[2], anchor=ANCHORS[3], compound=\"right\",\r\n                                                 command=self.update_profile).pack(anchor=ANCHORS[4], fill=\"x\", padx=30,\r\n                                                                                   ipadx=10, ipady=10, pady=(70, 0))\r\n            self.theme_button = CTkButton(master=self.main_frame, image=self.open_img,\r\n                                          text=\"     Set appearance mode                                                                         \",\r\n                                          height=60, fg_color=COLORS[1], font=(FONTS[2], 22), hover_color=COLORS[2],\r\n                                          anchor=ANCHORS[3], compound=\"right\").pack(anchor=ANCHORS[4], fill=\"x\", padx=30, ipadx=10,\r\n                                                                             ipady=10, pady=(25, 0))\r\n            self.logout_button = CTkButton(master=self.main_frame, image=self.logout_img2,\r\n                                           text=\"     Log out                                                                                                    \",\r\n                                           height=60, fg_color=COLORS[1], font=(FONTS[2], 22), hover_color=COLORS[2],\r\n                                           anchor=ANCHORS[3], compound=\"right\", command=self.logout_listner).pack(anchor=ANCHORS[4], fill=\"x\", padx=30, ipadx=10,\r\n                                                                              ipady=10, pady=(25, 0))\r\n\r\n            self.window_count = 11\r\n\r\n    def save_changes(self):\r\n        e_id = self.employee_id.get()\r\n        e_name = self.employee_name.get()\r\n        e_doj = self.date_of_joining.get()\r\n        e_contact = self.contact_no.get()\r\n        e_emer_conatct = self.emergency_contact.get()\r\n        # e_username = self.username_entry.get()\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"UPDATE employee_details SET employee_id = %s, employee_name = %s, date_of_joining = %s, contact_no = %s, emergency_contact_no = %s WHERE username=%s\"\r\n            val = (e_id, e_name, e_doj, e_contact, e_emer_conatct, self.username)\r\n            cursor.execute(sql, val)\r\n            db.commit()\r\n            messagebox.showinfo(\"Successful\", \"Data has been updated successfully\")\r\n            self.main_frame.destroy()\r\n            self.settings()\r\n        except mysql.connector.Error as e:\r\n            print(e)\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured:{e}\")\r\n\r\n    def update_profile(self):\r\n        if self.window_count != 12:\r\n            self.main_frame.destroy()\r\n        if self.window_count == 12:\r\n            pass\r\n        else:\r\n            self.main_frame.destroy()\r\n\r\n            self.main_frame = CTkFrame(master=self, fg_color=COLORS[0], width=780, height=650, corner_radius=0)\r\n            self.main_frame.pack_propagate(0)\r\n            self.main_frame.pack(side=\"left\")\r\n\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"SELECT employee_id, employee_name, date_of_joining, contact_no, emergency_contact_no, username FROM employee_details WHERE username=%s\"\r\n                val = (self.username, )\r\n                cursor.execute(sql, val)\r\n                results = cursor.fetchall()\r\n                print(results)\r\n            except mysql.connector.Error as e:\r\n                print(e)\r\n                messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n\r\n            global id, name, doj, contact, e_contact, username\r\n            for result in results:\r\n                id = result[0]\r\n                name = result[1]\r\n                doj = result[2]\r\n                contact = result[3]\r\n                e_contact = result[4]\r\n                username = result[5]\r\n\r\n            self.id_label = CTkLabel(master=self.main_frame, text=\"Employee ID:\", width=350, font=(FONTS[1], 14), text_color=COLORS[1])\r\n            self.id_label.pack(anchor=ANCHORS[0], padx=(100, 25), pady=(60, 0))\r\n            self.employee_id = CTkEntry(master=self.main_frame, width=330, height=35, border_color=COLORS[1], fg_color=COLORS[6], font=(FONTS[1], 14))\r\n            self.employee_id.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(5, 0))\r\n            self.employee_id.insert(0, id)\r\n\r\n            self.name_label = CTkLabel(master=self.main_frame, text=\"Name:\", width=350, font=(FONTS[1], 14), text_color=COLORS[1])\r\n            self.name_label.pack(anchor=ANCHORS[0], padx=(77, 25), pady=(10, 0))\r\n            self.employee_name = CTkEntry(master=self.main_frame, width=330, height=35, border_color=COLORS[1], fg_color=COLORS[6], font=(FONTS[1], 14))\r\n            self.employee_name.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(5, 0))\r\n            self.employee_name.insert(0, name)\r\n\r\n            self.doj_label = CTkLabel(master=self.main_frame, text=\"Date of Joining:\", width=350, font=(FONTS[1], 14),\r\n                                       text_color=COLORS[1])\r\n            self.doj_label.pack(anchor=ANCHORS[0], padx=(107, 25), pady=(10, 0))\r\n            self.date_of_joining = CTkEntry(master=self.main_frame, width=330, height=35, border_color=COLORS[1], fg_color=COLORS[6], font=(FONTS[1], 14))\r\n            self.date_of_joining.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(5, 0))\r\n            self.date_of_joining.insert(0, doj)\r\n\r\n            self.contact_label = CTkLabel(master=self.main_frame, text=\"Contact No.:\", width=350, font=(FONTS[1], 14),\r\n                                       text_color=COLORS[1])\r\n            self.contact_label.pack(anchor=ANCHORS[0], padx=(97, 25), pady=(10, 0))\r\n            self.contact_no = CTkEntry(master=self.main_frame, width=330, height=35, border_color=COLORS[1], fg_color=COLORS[6], font=(FONTS[1], 14))\r\n            self.contact_no.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(5, 0))\r\n            self.contact_no.insert(0, contact)\r\n\r\n            self.e_contact_label = CTkLabel(master=self.main_frame, text=\"Emergency Contact No.:\", width=350, font=(FONTS[1], 14),\r\n                                       text_color=COLORS[1])\r\n            self.e_contact_label.pack(anchor=ANCHORS[0], padx=(140, 25), pady=(10, 0))\r\n            self.emergency_contact = CTkEntry(master=self.main_frame, width=330, height=35, border_color=COLORS[1], fg_color=COLORS[6], font=(FONTS[1], 14))\r\n            self.emergency_contact.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(5, 0))\r\n            self.emergency_contact.insert(0, e_contact)\r\n\r\n            # self.username_label = CTkLabel(master=self.main_frame, text=\"Username:\", width=350, font=(FONTS[1], 14),\r\n            #                            text_color=COLORS[1])\r\n            # self.username_label.pack(anchor=ANCHORS[0], padx=(93, 25), pady=(10, 0))\r\n            # self.username_entry = CTkEntry(master=self.main_frame, width=330, height=35, border_color=COLORS[1], fg_color=COLORS[6], font=(FONTS[1], 14))\r\n            # self.username_entry.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(5, 0))\r\n            # self.username_entry.insert(0, username)\r\n            # self.password = CTkEntry(master=self.main_frame)\r\n            # self.password.pack()\r\n            # self.show_password = CTkCheckBox(master=self.main_frame)\r\n            # self.show_password.pack()\r\n\r\n            self.save_changes = CTkButton(master=self.main_frame, height=40, width=150, fg_color=COLORS[1], hover_color=COLORS[2], text=\"Save Changes\", font=(FONTS[1], 14), command=self.save_changes)\r\n            self.save_changes.pack(anchor=ANCHORS[1], padx=(25, 25), pady=(25, 0))\r\n\r\n            self.window_count = 12\r\n\r\n    def toggle_password(self):\r\n        if self.s_pass.get() == 1:\r\n            self.password_entry.configure(show='')\r\n        else:\r\n            self.password_entry.configure(show='●')\r\n\r\n    def check_duplicate_user(self, e_username):\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"select * from user_login;\"\r\n            cursor.execute(sql)\r\n            users = cursor.fetchall()\r\n\r\n            for user in users:\r\n                db_username = user[0]\r\n                if e_username == db_username:\r\n                    messagebox.showinfo(\"Already Exist\", \"Username already exist\")\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database error\", f\"Error occured: {e}\")\r\n\r\n    def logout_listner(self):\r\n        self.destroy()\r\n        import admin_login\r\n        login = admin_login.Starter()\r\n        login.mainloop()\r\n\r\n\r\n# if __name__ == '__main__':\r\n#     app = DashboardWindow()\r\n#     app.mainloop()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app_admin_windows.py b/app_admin_windows.py
--- a/app_admin_windows.py	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
+++ b/app_admin_windows.py	(date 1714230512100)
@@ -833,6 +833,8 @@
                 self.projects()
             except mysql.connector.Error as e:
                 messagebox.showerror("Database Error", f"Error occured: {e}")
+
+
             global project_details, id
             try:
                 db = connection.Connection().get_connection()
@@ -846,6 +848,8 @@
                 print(project_details)
             except mysql.connector.Error as e:
                 messagebox.showerror("Database Error", f"Error Occured:{e}")
+
+
             index = 0
             for i in range(len(assign_task)):
                 try:
@@ -860,11 +864,13 @@
                     result = result[0][0]
                     print(result)
                     index += 1
+
                     sql1 = "SELECT project FROM employee_details WHERE username=%s"
                     val1 = (result, )
                     cursor.execute(sql1, val1)
                     result1 = cursor.fetchall()
                     print(result1[0][0])
+
                     import ast
                     result1 = ast.literal_eval(result1)
                     print(type(result1))
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_51__Changes_1.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_51__Changes_1.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_51__Changes_1.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_51__Changes_1.xml	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
+++ /dev/null	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_20-04-2024_13_51_[Changes]1" date="1713601299133" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_51_[Changes]1/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 20-04-2024 13:51 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_00_44__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_00_44__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_00_44__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_00_44__Changes_.xml	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
+++ /dev/null	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_20-04-2024_00_44_[Changes]" date="1713554087643" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_00_44_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 20-04-2024 00:44 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_49__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_49__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_49__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_49__Changes_.xml	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
+++ /dev/null	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_20-04-2024_13_49_[Changes]" date="1713601205139" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_49_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 20-04-2024 13:49 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_19-04-2024_23_24__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_19-04-2024_23_24__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_19-04-2024_23_24__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_19-04-2024_23_24__Changes_.xml	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
+++ /dev/null	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_19-04-2024_23_24_[Changes]" date="1713549294137" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_19-04-2024_23_24_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 19-04-2024 23:24 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_51_[Changes]1/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_51_[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_51_[Changes]1/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_51_[Changes]1/shelved.patch	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
+++ /dev/null	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
@@ -1,425 +0,0 @@
-Index: app_admin_windows.py
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import itertools\r\nimport time\r\nimport customtkinter\r\nfrom tkinter import *\r\nimport mysql.connector\r\nimport pandas as pd\r\nfrom customtkinter import *\r\nfrom tkinter import messagebox, ttk\r\nfrom CTkTable import CTkTable\r\nfrom PIL import Image\r\nfrom matplotlib import pyplot as plt\r\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\r\nimport connection\r\nfrom tkcalendar import Calendar\r\nfrom calendar import Calendar\r\n\r\nLOGO_IMG_DATA = Image.open(\"images/logo.png\")\r\nDASHBOARD_IMG_DATA = Image.open(\"images/dashboard_icon.png\")\r\nEMPLOYEE_IMG_DATA = Image.open(\"images/employee_icon.png\")\r\nPROJECT_IMG_DATA = Image.open(\"images/project.png\")\r\nSALARY_IMG_DATA = Image.open(\"images/salary_icon.png\")\r\nSETTINGS_IMG_DATA = Image.open(\"images/settings_icon.png\")\r\nLOGOUT_IMG_DATA = Image.open(\"images/log-out.png\")\r\nSEARCH_IMG_DATA = Image.open(\"images/search-icon.png\")\r\n\r\nCOLORS = [\"#D60000\", \"#FF9700\", \"#005DFF\", \"#42F200\", \"#DAE801\"]\r\n\r\nEngineer_salary = 400\r\nManagement_salary = 500\r\nAdministrative_salary = 300\r\n\r\n\r\nclass DashboardWindow(customtkinter.CTk):\r\n    def __init__(self, username, password):\r\n        super().__init__()\r\n        self.title(\"Dashboard\")\r\n        set_appearance_mode(\"system\")\r\n        self.geometry(\"956x645+350+100\")\r\n        self.username = username\r\n        # Images\r\n        self.logo_img = CTkImage(dark_image=LOGO_IMG_DATA, light_image=LOGO_IMG_DATA, size=(77.68, 85.42))\r\n        self.dashboard_img = CTkImage(dark_image=DASHBOARD_IMG_DATA, light_image=DASHBOARD_IMG_DATA)\r\n        self.employee_img = CTkImage(dark_image=EMPLOYEE_IMG_DATA, light_image=EMPLOYEE_IMG_DATA)\r\n        self.project_img = CTkImage(dark_image=PROJECT_IMG_DATA, light_image=PROJECT_IMG_DATA)\r\n        self.salary_img = CTkImage(dark_image=SALARY_IMG_DATA, light_image=SALARY_IMG_DATA)\r\n        self.settings_img = CTkImage(dark_image=SETTINGS_IMG_DATA, light_image=SETTINGS_IMG_DATA)\r\n        self.logout_img = CTkImage(dark_image=LOGOUT_IMG_DATA, light_image=LOGOUT_IMG_DATA)\r\n        self.search_img = CTkImage(dark_image=SEARCH_IMG_DATA, light_image=SEARCH_IMG_DATA)\r\n\r\n        # Frame creation\r\n        self.side_frame = CTkFrame(master=self, fg_color=\"#601e88\", width=176, height=650, corner_radius=0)\r\n        self.side_frame.pack_propagate(0)\r\n        self.side_frame.pack(fill=\"y\", anchor=\"w\", side=\"left\")\r\n\r\n        CTkLabel(master=self.side_frame, text=\"\", image=self.logo_img).pack(pady=(38, 0), anchor=\"center\")\r\n\r\n        self.dashboard_button = CTkButton(master=self.side_frame, image=self.dashboard_img, text=\"Dashboard\",\r\n                                          fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#491669\",\r\n                                          anchor=\"w\", command=self.dashboard)\r\n        self.dashboard_button.pack(anchor=\"center\", ipady=5, pady=(60, 0))\r\n\r\n        self.employee_button = CTkButton(master=self.side_frame, image=self.employee_img, text=\"Employees\",\r\n                                         fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#491669\",\r\n                                         anchor=\"w\", command=self.employees)\r\n        self.employee_button.pack(anchor=\"center\", ipady=5, pady=(16, 0))\r\n\r\n        self.project_button = CTkButton(master=self.side_frame, image=self.project_img, text=\"Projects\",\r\n                                        fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#491669\",\r\n                                        anchor=\"w\", command=self.projects)\r\n        self.project_button.pack(anchor=\"center\", ipady=5, pady=(16, 0))\r\n\r\n        self.salary_button = CTkButton(master=self.side_frame, image=self.salary_img, text=\"Salary\",\r\n                                       fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#491669\",\r\n                                       anchor=\"w\", command=self.salary)\r\n        self.salary_button.pack(anchor=\"center\", ipady=5, pady=(16, 0))\r\n\r\n        self.settings_button = CTkButton(master=self.side_frame, image=self.settings_img, text=\"Settings\",\r\n                                         fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#491669\",\r\n                                         anchor=\"w\", command=self.settings)\r\n        self.settings_button.pack(anchor=\"center\", ipady=5, pady=(16, 0))\r\n\r\n        self.logout_button = CTkButton(master=self.side_frame, image=self.logout_img, text=\"Log Out\",\r\n                                       fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#491669\",\r\n                                       anchor=\"w\", command=self.logout_listner)\r\n        self.logout_button.pack(anchor=\"center\", ipady=5, pady=(160, 0))\r\n\r\n        self.window_count = 1\r\n        if self.window_count == 1:\r\n            self.dashboard()\r\n            global job\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT * FROM employee_details WHERE username=%s\"\r\n            val = (username,)\r\n\r\n            cursor.execute(sql, val)\r\n            job = cursor.fetchall()\r\n            print(job)\r\n            job = job[0][2]\r\n\r\n\r\n        except mysql.connector.Error as e:\r\n            print(e)\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured :{e}\")\r\n\r\n    def dashboard(self):\r\n        if self.window_count == 1:\r\n            pass\r\n        elif self.window_count == 2:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 3:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 4:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 5:\r\n            self.main_frame.destroy()\r\n\r\n        if self.window_count == self.window_count:\r\n            pass\r\n\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        # self.user_button = CTkButton(master=self.main_frame, text=\"username\", fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#ffffff\", anchor=\"ne\")\r\n        self.check_frame = CTkFrame(master=self.main_frame, fg_color=\"#ffffff\", width=200, height=30, corner_radius=0)\r\n        self.check_frame.pack(anchor=\"nw\", padx=10, pady=(10, 0))\r\n        self.radio_var = IntVar(value=0)\r\n        self.check_in = CTkRadioButton(master=self.check_frame, text=\"Check In\", font=(\"Arial Bold\", 14), value=1,\r\n                                       variable=self.radio_var, command=self.stop_timer)\r\n        self.check_in.pack(anchor=\"n\", side=\"left\", padx=27, pady=(20, 0))\r\n        self.check_out = CTkRadioButton(master=self.check_frame, text=\"Check Out\", font=(\"Arial Bold\", 14), value=2,\r\n                                        variable=self.radio_var, command=self.stop_timer)\r\n        self.check_out.pack(anchor=\"n\", side=\"right\", padx=27, pady=(20, 0))\r\n\r\n        self.graph_frame = CTkFrame(master=self.main_frame, fg_color=\"#F0F0F0\", width=720, height=280, corner_radius=13)\r\n        self.graph_frame.pack(anchor=\"center\", padx=27, pady=(20, 0))\r\n\r\n        global dt\r\n        # create a connection to the database\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n\r\n            # read the data from the database\r\n            query = 'SELECT employee_name, working_hours  FROM salary'\r\n            df = pd.read_sql(query, con=db)\r\n            dt = pd.DataFrame(df.sort_values(by='working_hours'))\r\n            print(dt)\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n            print(e)\r\n        # plot the data as a bar graph\r\n        plt.figure(figsize=(12, 9))\r\n        plt.bar(dt['employee_name'], dt['working_hours'])\r\n        plt.xlabel('employee name')\r\n        plt.ylabel('time (in hrs)')\r\n        plt.title('analytics')\r\n        # plt.style.use(\"Solarize_light2\")\r\n\r\n        # plt.show()\r\n        self.add = plt.gcf()\r\n        canvas = FigureCanvasTkAgg(self.add, master=self.graph_frame)\r\n        canvas.get_tk_widget().configure(width=900, height=360)\r\n        ctk_canvas = canvas.get_tk_widget()\r\n        ctk_canvas.place(relx=0, rely=0, anchor=\"nw\")\r\n\r\n        self.task_number = 5\r\n        self.complete_task = 10\r\n        self.current = float(self.task_number / self.complete_task)\r\n        self.task_progress_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"#F0F0F0\", width=345, height=200,\r\n                                                      corner_radius=13)\r\n        self.task_progress_frame.pack(anchor=\"n\", side=\"left\", padx=(27, 0), pady=(20, 0))\r\n\r\n        self.progress_bar_width = 310\r\n        self.label1 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\",\r\n                               width=30).pack(anchor=\"ne\", padx=(0, 25), pady=(5, 0))\r\n        self.progress_bar1 = CTkProgressBar(master=self.task_progress_frame, fg_color=\"#F0F0F0\",\r\n                                            width=self.progress_bar_width, height=20, corner_radius=8,\r\n                                            progress_color=COLORS[0], border_color=\"#491669\", border_width=2)\r\n        self.progress_bar1.pack(anchor=\"n\", padx=10, pady=(5, 0))\r\n        self.progress_bar1.set(self.current)\r\n\r\n        self.label2 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\",\r\n                               width=30).pack(\r\n            anchor=\"ne\", padx=(0, 25), pady=(35, 0))\r\n        self.progress_bar2 = CTkProgressBar(master=self.task_progress_frame, fg_color=\"#F0F0F0\",\r\n                                            width=self.progress_bar_width, height=20,\r\n                                            corner_radius=8, progress_color=COLORS[1], border_color=\"#491669\",\r\n                                            border_width=2)\r\n        self.progress_bar2.pack(anchor=\"n\", padx=10, pady=(5, 0))\r\n\r\n        self.label3 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\",\r\n                               width=30).pack(\r\n            anchor=\"ne\", padx=(0, 25), pady=(35, 0))\r\n        self.progress_bar3 = CTkProgressBar(master=self.task_progress_frame, fg_color=\"#F0F0F0\",\r\n                                            width=self.progress_bar_width, height=20,\r\n                                            corner_radius=8, progress_color=COLORS[4], border_color=\"#491669\",\r\n                                            border_width=2)\r\n        self.progress_bar3.pack(anchor=\"n\", padx=10, pady=(5, 0))\r\n\r\n        # self.label4 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\", width=30).pack(\r\n        #     anchor=\"ne\", padx=(0, 25), pady=(35, 0))\r\n        # self.progress_bar4 = CTkProgressBar(master=self.task_progress_frame, fg_color=\"#F0F0F0\", width=self.progress_bar_width, height=20,\r\n        #                                     corner_radius=8, progress_color=COLORS[2], border_color=\"#491669\", border_width=2)\r\n        # self.progress_bar4.pack(anchor=\"n\", padx=10, pady=(5, 0))\r\n        #\r\n        # self.label5 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\", width=30).pack(\r\n        #     anchor=\"ne\", padx=(0, 25), pady=(35, 0))\r\n        # self.progress_bar5 = CTkProgressBar(master=self.task_progress_frame, fg_color=\"#F0F0F0\", width=self.progress_bar_width, height=20,\r\n        #                                     corner_radius=8, progress_color=COLORS[3], border_color=\"#491669\", border_width=2)\r\n        # self.progress_bar5.pack(anchor=\"n\", padx=10, pady=(5, 0))\r\n\r\n        self.calendar_frame = CTkFrame(master=self.main_frame, fg_color=\"#F0F0F0\", width=330, height=230,\r\n                                       corner_radius=13)\r\n        self.calendar_frame.pack(anchor=\"n\", side=\"right\", padx=(0, 27), pady=(20, 0))\r\n\r\n        # self.cal = Calendar(self.calendar_frame, selectmode=\"day\", date_pattern=\"y-mm-dd\")\r\n        # self.cal.pack(fill=\"both\", expand=True)\r\n        self.window_count = 1\r\n\r\n    def stop_timer(self):\r\n        global stop_time, elapsed_time, salary\r\n        self.val = self.radio_var.get()\r\n        if self.val == 1:\r\n            stop_time = time.time()\r\n        # input(\"Press enter to stop the timer...\"\r\n        elif self.val == 2:\r\n            elapsed_time = time.time() - stop_time\r\n            elapsed_time = round(elapsed_time)\r\n            print(f\"time spend {elapsed_time} seconds\")\r\n            final_time = (elapsed_time * 10) / 60\r\n            print(final_time)\r\n            if job == 'Engineer':\r\n                salary = final_time * Engineer_salary\r\n            elif job == \"Administrator\":\r\n                salary = final_time * Administrative_salary\r\n            elif job == \"Management\":\r\n                salary = final_time * Management_salary\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"UPDATE salary SET working_hours=%s, salary=%s WHERE username=%s\"\r\n                val = (final_time, salary, self.username,)\r\n                cursor.execute(sql, val)\r\n\r\n                db.commit()\r\n            except mysql.connector.Error as e:\r\n                messagebox.showinfo(\"Database Error\", f\"Error Occured: {e}\")\r\n                print(e)\r\n\r\n    def employees(self):\r\n        if self.window_count == 1:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 2:\r\n            pass\r\n        elif self.window_count == 3:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 4:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 5:\r\n            self.main_frame.destroy()\r\n\r\n        if self.window_count == self.window_count:\r\n            pass\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        title_frame.pack(anchor=\"n\", fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n        self.label = CTkLabel(master=title_frame, text=\"Employee & their details\", font=(\"Arial Black\", 23),\r\n                              text_color=\"#601e88\")\r\n        self.label.pack(anchor=\"nw\", side=\"left\", pady=(8, 0))\r\n\r\n        self.add_employee_button = CTkButton(master=title_frame, text=\"+ New Employee\", font=(\"Arial Black\", 15),\r\n                                             text_color=\"#fff\", fg_color=\"#601e88\", hover_color=\"#491669\",\r\n                                             corner_radius=15, command=self.add_employee)\r\n        self.add_employee_button.pack(anchor=\"ne\", side=\"right\", ipady=10)\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Employee with its ID or Name\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28, command=self.search)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT * FROM employee_details\"\r\n            cursor.execute(sql)\r\n            results = cursor.fetchall()\r\n            for result in results:\r\n                print(result)\r\n        except mysql.connector.Error as e:\r\n            print(e)\r\n\r\n        self.table_data = [\r\n            [(\"ID\", \"Name\", \"Profession\", \"Date of Joining\", \"Contact No.\", \"Emergency\\nContact No.\")]\r\n        ]\r\n        self.table_data.append(results)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.pack(expand=True)\r\n\r\n        self.window_count = 2\r\n\r\n    def add_employee(self):\r\n        self.main_frame.destroy()\r\n        if self.window_count == 1:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 2:\r\n            pass\r\n        elif self.window_count == 3:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 4:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 5:\r\n            self.main_frame.destroy()\r\n\r\n        if self.window_count == self.window_count:\r\n            pass\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        title_frame.pack(anchor=\"n\", fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n        self.label = CTkLabel(master=title_frame, text=\"Employee & their details\", font=(\"Arial Black\", 23),\r\n                              text_color=\"#601e88\")\r\n        self.label.pack(anchor=\"nw\", side=\"left\", pady=(8, 0))\r\n\r\n        self.add_employee_button = CTkButton(master=title_frame, text=\"+ New Employee\", font=(\"Arial Black\", 15),\r\n                                             text_color=\"#fff\", fg_color=\"#601e88\", hover_color=\"#491669\",\r\n                                             corner_radius=15, command=self.add_employee)\r\n        self.add_employee_button.pack(anchor=\"ne\", side=\"right\", ipady=10)\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Employee with its ID or Name\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28, command=self.search)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT * FROM requests\"\r\n            cursor.execute(sql)\r\n            request = cursor.fetchall()\r\n            for result in request:\r\n                print(result)\r\n        except mysql.connector.Error as e:\r\n            print(e)\r\n\r\n        self.table_data = [\r\n            [(\"ID\", \"Name\", \"Profession\", \"Date of Joining\", \"Contact No.\", \"Emergency\\nContact No.\")]\r\n        ]\r\n        self.table_data.append(request)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.pack(expand=True)\r\n        # self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        # self.main_frame.pack_propagate(0)\r\n        # self.main_frame.pack(side=\"left\")\r\n        #\r\n        # self.s_pass = IntVar(value=0)\r\n        # self.name_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Enter name of Employee\", height=35,\r\n        #                            width=330,\r\n        #                            fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        # self.name_entry.pack(anchor=\"n\", padx=(25, 25), pady=(80, 0))\r\n        # self.profession_entry = CTkComboBox(master=self.main_frame, height=35, width=330, border_color=\"#601e88\",\r\n        #                                     button_color=\"#601e88\", dropdown_fg_color=\"#601e88\",\r\n        #                                     dropdown_text_color=\"#ffffff\", dropdown_hover_color=\"#491669\",\r\n        #                                     button_hover_color=\"#601e88\",\r\n        #                                     values=[\"Select Job role\", \"Administrator\", \"Engineer\", \"Management\"])\r\n        # self.profession_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n        # self.date_of_joining_entry = CTkEntry(master=self.main_frame,\r\n        #                                       placeholder_text=\"Enter Date of Joining i.e. dd/mm/yyyy\",\r\n        #                                       height=35, width=330, fg_color=\"#EEEEEE\", border_color=\"#601e88\",\r\n        #                                       font=(\"Arial\", 14))\r\n        # self.date_of_joining_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n        # self.contact_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Contact No.\", height=35, width=330,\r\n        #                               fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        # self.contact_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n        # self.emergency_contact_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Emergency Contact No.\",\r\n        #                                         height=35,\r\n        #                                         width=330, fg_color=\"#EEEEEE\", border_color=\"#601e88\",\r\n        #                                         font=(\"Arial\", 14))\r\n        # self.emergency_contact_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n        # self.username_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Username\", height=35, width=330,\r\n        #                                fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        # self.username_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n        # self.password_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Password\", height=35, width=330,\r\n        #                                fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14), show=\"●\")\r\n        # self.password_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n        # self.show_password = CTkCheckBox(master=self.main_frame, checkbox_height=15, checkbox_width=15,\r\n        #                                  text=\"Show Password ?\",\r\n        #                                  text_color=\"#7E7E7E\", variable=self.s_pass, onvalue=1, offvalue=0,\r\n        #                                  command=self.toggle_password).pack(anchor=\"n\", padx=(200, 0), pady=(5, 0))\r\n        # self.add_button = CTkButton(master=self.main_frame, text=\"Add Employee\", height=35, fg_color=\"#601e88\",\r\n        #                             hover_color=\"#491669\", text_color=\"#ffffff\", font=(\"Arial\", 14),\r\n        #                             command=self.get_entries).pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n\r\n    def get_entries(self):\r\n         global username\r\n        # employee_name = self.name_entry.get()\r\n        # profession = self.profession_entry.get()\r\n        # date_of_joining = self.date_of_joining_entry.get()\r\n        # contact = self.contact_entry.get()\r\n        # emergency_contact = self.emergency_contact_entry.get()\r\n        # username = self.username_entry.get()\r\n        # password = self.password_entry.get()\r\n        #\r\n        # if (\r\n        #         employee_name == '' or profession == '' or date_of_joining == '' or contact == '' or username == '' or password == ''):\r\n        #     messagebox.showinfo(\"Null Info\", \"All fields are required to create profile\")\r\n        # elif contact.isdigit() is not True or emergency_contact.isdigit() is not True:\r\n        #     messagebox.showinfo(\"Invalid\", \"Contact number should contain only digits\")\r\n        # elif len(contact) != 10 or len(emergency_contact) != 10:\r\n        #     messagebox.showinfo(\"Invalid\", \"Contact number should contain 10 digits\")\r\n        # elif password.isdigit() is not True:\r\n        #     messagebox.showinfo(\"Invalid\", \"Password should contain digits only\")\r\n        # elif not self.check_duplicate_user(username):\r\n        #     if profession == \"Select Job role\":\r\n        #         messagebox.showinfo(\"change\", \"Please select your Job role\")\r\n        #     elif profession == \"Administrator\":\r\n        #         hourly_salary = 300\r\n        #     elif profession == \"Engineer\":\r\n        #         hourly_salary = 400\r\n        #     elif profession == \"Management\":\r\n        #         hourly_salary = 500\r\n        #     try:\r\n        #         db = connection.Connection().get_connection()\r\n        #         cursor = db.cursor()\r\n        #\r\n        #         sql = \"INSERT INTO employee_details (employee_name, profession, date_of_joining, contact_no, emergency_contact_no) VALUES (%s, %s, %s, %s, %s)\"\r\n        #         val = (employee_name, profession, date_of_joining, contact, emergency_contact)\r\n        #         sql_2 = \"INSERT INTO salary (employee_name, profession, hourly_salary) VALUES (%s, %s, %s)\"\r\n        #         val_2 = (employee_name, profession, str(hourly_salary))\r\n        #\r\n        #         sql_1 = \"INSERT INTO user_login (username, password) VALUES (%s, %s)\"\r\n        #         val_1 = (username, password)\r\n        #\r\n        #         cursor.execute(sql, val)\r\n        #         cursor.execute(sql_1, val_1)\r\n        #         cursor.execute(sql_2, val_2)\r\n        #         print(\"name\")\r\n        #\r\n        #         db.commit()\r\n        #         self.main_frame.destroy()\r\n        #         messagebox.showinfo(\"Successful\", \"Employee profile is created successfully\")\r\n        #         self.main_frame.destroy()\r\n        #     except mysql.connector.Error as e:\r\n        #         messagebox.showerror(\"Database Error\", f\"Error occured: {e}\")\r\n        # else:\r\n        #     print(\"hello\")\r\n        # self.employees()\r\n\r\n    def search(self):\r\n        search_data = self.search_entry.get()\r\n        global data\r\n        if search_data == '':\r\n            messagebox.showinfo(\"Null Field\", \"There is Nothing to Search\")\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT * FROM employee_details WHERE employee_name=%s\"\r\n            val = (search_data,)\r\n\r\n            cursor.execute(sql, val)\r\n            data_fetch = cursor.fetchall()\r\n            for data in data_fetch:\r\n                print(data)\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n            print(e)\r\n        self.main_frame.destroy()\r\n\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        title_frame.pack(anchor=\"n\", fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n        self.label = CTkLabel(master=title_frame, text=\"Employee & their details\", font=(\"Arial Black\", 23),\r\n                              text_color=\"#601e88\")\r\n        self.label.pack(anchor=\"nw\", side=\"left\", pady=(8, 0))\r\n\r\n        self.add_employee_button = CTkButton(master=title_frame, text=\"+ New Employee\", font=(\"Arial Black\", 15),\r\n                                             text_color=\"#fff\", fg_color=\"#601e88\", hover_color=\"#491669\",\r\n                                             corner_radius=15, command=self.add_employee)\r\n        self.add_employee_button.pack(anchor=\"ne\", side=\"right\", ipady=10)\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Employee with its ID or Name\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28, command=self.search)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.table_data = [\r\n            [(\"ID\", \"Name\", \"Profession\", \"Date of Joining\", \"Contact No.\", \"Emergency\\nContact No.\")]\r\n        ]\r\n        self.table_data.append(data_fetch)\r\n        # print(self.table_data)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.pack(expand=True)\r\n\r\n        self.window_count = 2\r\n\r\n    def projects(self):\r\n        if self.window_count == 1:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 2:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 3:\r\n            pass\r\n        elif self.window_count == self.window_count:\r\n            pass\r\n        elif self.window_count == 4:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 5:\r\n            self.main_frame.destroy()\r\n\r\n        if self.window_count == self.window_count:\r\n            pass\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        title_frame.pack(anchor=\"n\", fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n        self.label = CTkLabel(master=title_frame, text=\"Project Details\", font=(\"Arial Black\", 23),\r\n                              text_color=\"#601e88\")\r\n        self.label.pack(anchor=\"nw\", side=\"left\", pady=(8, 0))\r\n\r\n        self.add_project_button = CTkButton(master=title_frame, text=\"Create New Project\", font=(\"Arial Black\", 15),\r\n                                            text_color=\"#fff\", fg_color=\"#601e88\", hover_color=\"#491669\",\r\n                                            corner_radius=15, command=self.create_new_project)\r\n        self.add_project_button.pack(anchor=\"ne\", side=\"right\", ipady=10)\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Project with Unique ID\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28, command=self.search_project)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT * FROM project\"\r\n            cursor.execute(sql)\r\n            results = cursor.fetchall()\r\n            for result in results:\r\n                print(result)\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n            print(e)\r\n\r\n        self.table_data = [\r\n            [(\"Unique\\nID\", \"Project Name\", \"Start Date\", \"Due Date\", \"Project\\nHead\", \"Number\\nof Tasks\",\r\n              \"Completed\\nTasks\")]\r\n        ]\r\n\r\n        self.table_data.append(results)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.edit_column(1, width=200)\r\n        self.table.pack(expand=True)\r\n\r\n        self.window_count = 3\r\n\r\n    def create_new_project(self):\r\n        self.main_frame.destroy()\r\n\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        self.s_pass = IntVar(value=0)\r\n        self.project_name_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Enter name of Project\", height=35,\r\n                                           width=330,\r\n                                           fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        self.project_name_entry.pack(anchor=\"n\", padx=(25, 25), pady=(120, 0))\r\n        self.start_date_entry = CTkEntry(master=self.main_frame,\r\n                                         placeholder_text=\"Enter Start Date of project i.e. dd/mm/yyyy\", height=35,\r\n                                         width=330,\r\n                                         fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        self.start_date_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n\r\n        self.due_date_entry = CTkEntry(master=self.main_frame,\r\n                                       placeholder_text=\"Enter Due date of project i.e. dd/mm/yyyy\", height=35,\r\n                                       width=330,\r\n                                       fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        self.due_date_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n\r\n        self.assign_task_entry = CTkEntry(master=self.main_frame,\r\n                                          placeholder_text=\"Enter name of Employee to assign this project\", height=35,\r\n                                          width=330,\r\n                                          fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        self.assign_task_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n\r\n        self.no_of_tasks_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Enter Number of Tasks\", height=35,\r\n                                          width=330,\r\n                                          fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        self.no_of_tasks_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n\r\n        self.create_project_button = CTkButton(master=self.main_frame, text=\"Create Project\", height=35,\r\n                                               fg_color=\"#601e88\",\r\n                                               hover_color=\"#491669\", text_color=\"#ffffff\", font=(\"Arial\", 14),\r\n                                               command=self.get_entries_project).pack(anchor=\"n\", padx=(25, 25),\r\n                                                                                      pady=(25, 0))\r\n\r\n    def get_entries_project(self):\r\n        project_name = self.project_name_entry.get()\r\n        start_date = self.start_date_entry.get()\r\n        due_date = self.due_date_entry.get()\r\n        assign_task = self.assign_task_entry.get()\r\n        number_of_tasks = self.no_of_tasks_entry.get()\r\n\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"INSERT INTO project (project_name, start_date, due_date, employee_name, total_tasks, tasks_done) VALUES (%s, %s, %s, %s, %s)\"\r\n            val = (project_name, start_date, due_date, assign_task, number_of_tasks)\r\n\r\n            # sql_1 = \"INSERT INTO user_login (username, password) VALUES (%s, %s)\"\r\n            # val_1 = (username, password)\r\n\r\n            cursor.execute(sql, val)\r\n            # cursor.execute(sql_1, val_1)\r\n            print(\"name\")\r\n\r\n            db.commit()\r\n            # self.main_frame.destroy()\r\n            messagebox.showinfo(\"Successful\", \"Project is created successfully\")\r\n            self.main_frame.destroy()\r\n            self.projects()\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database Error\", f\"Error occured: {e}\")\r\n\r\n    def search_project(self):\r\n        search_project = self.search_entry.get()\r\n\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT * FROM project WHERE project_name=%s\"\r\n            val = (search_project,)\r\n            cursor.execute(sql, val)\r\n\r\n            fetch_project = cursor.fetchall()\r\n            for project in fetch_project:\r\n                print(project)\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n            print(e)\r\n        self.main_frame.destroy()\r\n\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        title_frame.pack(anchor=\"n\", fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n        self.label = CTkLabel(master=title_frame, text=\"Project Details\", font=(\"Arial Black\", 23),\r\n                              text_color=\"#601e88\")\r\n        self.label.pack(anchor=\"nw\", side=\"left\", pady=(8, 0))\r\n\r\n        self.add_project_button = CTkButton(master=title_frame, text=\"Create New Project\", font=(\"Arial Black\", 15),\r\n                                            text_color=\"#fff\", fg_color=\"#601e88\", hover_color=\"#491669\",\r\n                                            corner_radius=15)\r\n        self.add_project_button.pack(anchor=\"ne\", side=\"right\", ipady=10)\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Project with Unique ID\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.table_data = [\r\n            [(\"Unique\\nID\", \"Project Name\", \"Start Date\", \"Due Date\", \"Project\\nHead\", \"Number\\nof Tasks\",\r\n              \"No. of\\nCompleted Tasks\")]\r\n        ]\r\n\r\n        self.table_data.append(fetch_project)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.edit_column(1, width=200)\r\n        self.table.pack(expand=True)\r\n\r\n        self.window_count = 3\r\n\r\n    def salary(self):\r\n        if self.window_count == 1:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 2:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 3:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 4:\r\n            pass\r\n        elif self.window_count == self.window_count:\r\n            pass\r\n        elif self.window_count == 5:\r\n            self.main_frame.destroy()\r\n\r\n        if self.window_count == self.window_count:\r\n            pass\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        # title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        # title_frame.pack(anchor=\"n\", fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n        # self.label = CTkLabel(master=title_frame, text=\"Projects History\", font=(\"Arial Black\", 23),\r\n        #                       text_color=\"#601e88\")\r\n        # self.label.pack(anchor=\"nw\", side=\"left\", pady=(8, 0))\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(anchor=\"n\", fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Employee with  its ID or Name\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28, command=self.salary_search)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT employee_id, employee_name, profession, working_hours, salary FROM salary\"\r\n            cursor.execute(sql)\r\n            results = cursor.fetchall()\r\n            for result in results:\r\n                print(result)\r\n        except mysql.connector.Error as e:\r\n            print(e)\r\n\r\n        self.table_data = [\r\n            [(\"ID\", \"Name\", \"Profession\", \"Working\\nHours\", \"Salary\")]\r\n        ]\r\n        self.table_data.append(results)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.pack(expand=True)\r\n\r\n        self.window_count = 4\r\n\r\n    def salary_search(self):\r\n        search_data = self.search_entry.get()\r\n        global data\r\n        if search_data == '':\r\n            messagebox.showinfo(\"Null Field\", \"There is Nothing to Search\")\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT employee_id, employee_name, profession, working_hours, salary FROM salary WHERE %s IN (employee_id, employee_name)\"\r\n            val = (search_data,)\r\n\r\n            cursor.execute(sql, val)\r\n            data_fetch = cursor.fetchall()\r\n            for data in data_fetch:\r\n                print(data)\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n            print(e)\r\n        self.main_frame.destroy()\r\n\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(anchor=\"n\", fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Employee with  its ID or Name\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.table_data = [\r\n            [(\"ID\", \"Name\", \"Profession\", \"Working\\nHours\", \"Salary\")]\r\n        ]\r\n        self.table_data.append(data_fetch)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.pack(expand=True)\r\n\r\n        self.window_count = 4\r\n\r\n    def settings(self):\r\n        if self.window_count == 1:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 2:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 3:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 4:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 5:\r\n            pass\r\n        elif self.window_count == self.window_count:\r\n            pass\r\n\r\n        if self.window_count == self.window_count:\r\n            pass\r\n\r\n        self.window_count = 5\r\n        pass\r\n\r\n    def toggle_password(self):\r\n        if self.s_pass.get() == 1:\r\n            self.password_entry.configure(show='')\r\n        else:\r\n            self.password_entry.configure(show='●')\r\n\r\n    def check_duplicate_user(self, e_username):\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"select * from user_login;\"\r\n            cursor.execute(sql)\r\n            users = cursor.fetchall()\r\n\r\n            for user in users:\r\n                db_username = user[0]\r\n                if e_username == db_username:\r\n                    messagebox.showinfo(\"Already Exist\", \"Username already exist\")\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database error\", f\"Error occured: {e}\")\r\n\r\n    def logout_listner(self):\r\n        self.destroy()\r\n        import user_login\r\n        app = user_login.Login()\r\n        app.mainloop()\r\n\r\n# if __name__ == '__main__':\r\n#     app = DashboardWindow()\r\n#     app.mainloop()\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app_admin_windows.py b/app_admin_windows.py
---- a/app_admin_windows.py	
-+++ b/app_admin_windows.py	
-@@ -34,9 +34,10 @@
-     def __init__(self, username, password):
-         super().__init__()
-         self.title("Dashboard")
--        set_appearance_mode("system")
-+        set_appearance_mode("Light")
-         self.geometry("956x645+350+100")
-         self.username = username
-+        self.timer_running = False
-         # Images
-         self.logo_img = CTkImage(dark_image=LOGO_IMG_DATA, light_image=LOGO_IMG_DATA, size=(77.68, 85.42))
-         self.dashboard_img = CTkImage(dark_image=DASHBOARD_IMG_DATA, light_image=DASHBOARD_IMG_DATA)
-@@ -138,7 +139,7 @@
-         self.graph_frame = CTkFrame(master=self.main_frame, fg_color="#F0F0F0", width=720, height=280, corner_radius=13)
-         self.graph_frame.pack(anchor="center", padx=27, pady=(20, 0))
- 
--        global dt
-+        global df, dt
-         # create a connection to the database
-         try:
-             db = connection.Connection().get_connection()
-@@ -146,7 +147,7 @@
-             # read the data from the database
-             query = 'SELECT employee_name, working_hours  FROM salary'
-             df = pd.read_sql(query, con=db)
--            dt = pd.DataFrame(df.sort_values(by='working_hours'))
-+            dt = pd.DataFrame(df.sort_values(by="working_hours"))
-             print(dt)
-         except mysql.connector.Error as e:
-             messagebox.showerror("Database Error", f"Error Occured: {e}")
-@@ -166,39 +167,52 @@
-         ctk_canvas = canvas.get_tk_widget()
-         ctk_canvas.place(relx=0, rely=0, anchor="nw")
- 
--        self.task_number = 5
--        self.complete_task = 10
--        self.current = float(self.task_number / self.complete_task)
-+        try:
-+            username = [self.username]
-+            db = connection.Connection().get_connection()
-+            cursor = db.cursor()
-+            sql = "SELECT unique_id, project_name, total_tasks, tasks_done FROM project WHERE username = %s"
-+            cursor.execute(sql, username, )
-+            result = cursor.fetchall()
-+            print(result)
-+        except mysql.connector.Error as e:
-+            print(e)
-+
-+        number_of_task = 1
-+        self.task_number = int(result[0][3])
-+        self.complete_task = int(result[0][2])
-         self.task_progress_frame = CTkScrollableFrame(master=self.main_frame, fg_color="#F0F0F0", width=345, height=200,
-                                                       corner_radius=13)
-         self.task_progress_frame.pack(anchor="n", side="left", padx=(27, 0), pady=(20, 0))
- 
-         self.progress_bar_width = 310
--        self.label1 = CTkLabel(master=self.task_progress_frame, text=f"{self.task_number}/{self.complete_task}",
--                               width=30).pack(anchor="ne", padx=(0, 25), pady=(5, 0))
--        self.progress_bar1 = CTkProgressBar(master=self.task_progress_frame, fg_color="#F0F0F0",
--                                            width=self.progress_bar_width, height=20, corner_radius=8,
--                                            progress_color=COLORS[0], border_color="#491669", border_width=2)
--        self.progress_bar1.pack(anchor="n", padx=10, pady=(5, 0))
--        self.progress_bar1.set(self.current)
-+        for i in range(number_of_task):
-+            self.label2 = (CTkLabel(master=self.task_progress_frame, text=result[0][1],
-+                                    width=30, fg_color="#F0F0F0").pack(anchor="w", padx=(0, 25), pady=(5, 0)))
-+            self.label1 = (CTkLabel(master=self.task_progress_frame, text=f"{self.task_number}/{self.complete_task}",
-+                                    width=30, fg_color="#F0F0F0").pack(anchor="w", padx=(0, 25), pady=(5, 0)))
-+            self.progress_bar1 = CTkProgressBar(master=self.task_progress_frame, fg_color="#F0F0F0",
-+                                                width=self.progress_bar_width, height=20, corner_radius=8,
-+                                                progress_color=COLORS[0], border_color="#491669", border_width=2)
-+            self.progress_bar1.pack(anchor="n", padx=10, pady=(5, 0))
-+            self.progress_bar1.set((self.task_number / self.complete_task))
- 
--        self.label2 = CTkLabel(master=self.task_progress_frame, text=f"{self.task_number}/{self.complete_task}",
--                               width=30).pack(
--            anchor="ne", padx=(0, 25), pady=(35, 0))
--        self.progress_bar2 = CTkProgressBar(master=self.task_progress_frame, fg_color="#F0F0F0",
--                                            width=self.progress_bar_width, height=20,
--                                            corner_radius=8, progress_color=COLORS[1], border_color="#491669",
--                                            border_width=2)
--        self.progress_bar2.pack(anchor="n", padx=10, pady=(5, 0))
--
--        self.label3 = CTkLabel(master=self.task_progress_frame, text=f"{self.task_number}/{self.complete_task}",
--                               width=30).pack(
--            anchor="ne", padx=(0, 25), pady=(35, 0))
--        self.progress_bar3 = CTkProgressBar(master=self.task_progress_frame, fg_color="#F0F0F0",
--                                            width=self.progress_bar_width, height=20,
--                                            corner_radius=8, progress_color=COLORS[4], border_color="#491669",
--                                            border_width=2)
--        self.progress_bar3.pack(anchor="n", padx=10, pady=(5, 0))
-+        # self.label1 = CTkLabel(master=self.task_progress_frame, text=f"{self.task_number}/{self.complete_task}", width=30).pack(anchor="ne", padx=(0, 25), pady=(5,0))
-+        # self.progress_bar1 = CTkProgressBar(master=self.task_progress_frame, fg_color="#F0F0F0", width=self.progress_bar_width, height=20, corner_radius=8, progress_color=COLORS[0], border_color="#491669", border_width=2)
-+        # self.progress_bar1.pack(anchor="n", padx=10, pady=(5, 0))
-+        # self.progress_bar1.set(self.current)
-+        #
-+        # self.label2 = CTkLabel(master=self.task_progress_frame, text=f"{self.task_number}/{self.complete_task}", width=30).pack(
-+        #     anchor="ne", padx=(0, 25), pady=(35, 0))
-+        # self.progress_bar2 = CTkProgressBar(master=self.task_progress_frame, fg_color="#F0F0F0", width=self.progress_bar_width, height=20,
-+        #                                     corner_radius=8, progress_color=COLORS[1], border_color="#491669", border_width=2)
-+        # self.progress_bar2.pack(anchor="n", padx=10, pady=(5, 0))
-+        #
-+        # self.label3 = CTkLabel(master=self.task_progress_frame, text=f"{self.task_number}/{self.complete_task}", width=30).pack(
-+        #     anchor="ne", padx=(0, 25), pady=(35, 0))
-+        # self.progress_bar3 = CTkProgressBar(master=self.task_progress_frame, fg_color="#F0F0F0", width=self.progress_bar_width, height=20,
-+        #                                     corner_radius=8, progress_color=COLORS[4], border_color="#491669", border_width=2)
-+        # self.progress_bar3.pack(anchor="n", padx=10, pady=(5, 0))
- 
-         # self.label4 = CTkLabel(master=self.task_progress_frame, text=f"{self.task_number}/{self.complete_task}", width=30).pack(
-         #     anchor="ne", padx=(0, 25), pady=(35, 0))
-@@ -324,169 +338,102 @@
- 
-     def add_employee(self):
-         self.main_frame.destroy()
--        if self.window_count == 1:
--            self.main_frame.destroy()
--        elif self.window_count == 2:
--            pass
--        elif self.window_count == 3:
--            self.main_frame.destroy()
--        elif self.window_count == 4:
--            self.main_frame.destroy()
--        elif self.window_count == 5:
--            self.main_frame.destroy()
--
--        if self.window_count == self.window_count:
--            pass
-         self.main_frame = CTkFrame(master=self, fg_color="#ffffff", width=780, height=650, corner_radius=0)
-         self.main_frame.pack_propagate(0)
-         self.main_frame.pack(side="left")
- 
--        title_frame = CTkFrame(master=self.main_frame, fg_color="transparent")
--        title_frame.pack(anchor="n", fill="x", padx=27, pady=(29, 0))
--
--        self.label = CTkLabel(master=title_frame, text="Employee & their details", font=("Arial Black", 23),
--                              text_color="#601e88")
--        self.label.pack(anchor="nw", side="left", pady=(8, 0))
--
--        self.add_employee_button = CTkButton(master=title_frame, text="+ New Employee", font=("Arial Black", 15),
--                                             text_color="#fff", fg_color="#601e88", hover_color="#491669",
--                                             corner_radius=15, command=self.add_employee)
--        self.add_employee_button.pack(anchor="ne", side="right", ipady=10)
--
--        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color="#F0F0F0")
--        self.search_container.pack(fill="x", pady=(30, 0), padx=27)
-+        self.s_pass = IntVar(value=0)
-+        self.name_entry = CTkEntry(master=self.main_frame, placeholder_text="Enter name of Employee", height=35,
-+                                   width=330,
-+                                   fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14))
-+        self.name_entry.pack(anchor="n", padx=(25, 25), pady=(80, 0))
-+        self.profession_entry = CTkComboBox(master=self.main_frame, height=35, width=330, border_color="#601e88",
-+                                            button_color="#601e88", dropdown_fg_color="#601e88",
-+                                            dropdown_text_color="#ffffff", dropdown_hover_color="#491669",
-+                                            button_hover_color="#601e88",
-+                                            values=["Select Job role", "Administrator", "Engineer", "Management"])
-+        self.profession_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
-+        self.date_of_joining_entry = CTkEntry(master=self.main_frame,
-+                                              placeholder_text="Enter Date of Joining i.e. dd/mm/yyyy",
-+                                              height=35, width=330, fg_color="#EEEEEE", border_color="#601e88",
-+                                              font=("Arial", 14))
-+        self.date_of_joining_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
-+        self.contact_entry = CTkEntry(master=self.main_frame, placeholder_text="Contact No.", height=35, width=330,
-+                                      fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14))
-+        self.contact_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
-+        self.emergency_contact_entry = CTkEntry(master=self.main_frame, placeholder_text="Emergency Contact No.",
-+                                                height=35,
-+                                                width=330, fg_color="#EEEEEE", border_color="#601e88",
-+                                                font=("Arial", 14))
-+        self.emergency_contact_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
-+        self.username_entry = CTkEntry(master=self.main_frame, placeholder_text="Username", height=35, width=330,
-+                                       fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14))
-+        self.username_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
-+        self.password_entry = CTkEntry(master=self.main_frame, placeholder_text="Password", height=35, width=330,
-+                                       fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14), show="●")
-+        self.password_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
-+        self.show_password = CTkCheckBox(master=self.main_frame, checkbox_height=15, checkbox_width=15,
-+                                         text="Show Password ?",
-+                                         text_color="#7E7E7E", variable=self.s_pass, onvalue=1, offvalue=0,
-+                                         command=self.toggle_password).pack(anchor="n", padx=(200, 0), pady=(5, 0))
-+        self.add_button = CTkButton(master=self.main_frame, text="Add Employee", height=35, fg_color="#601e88",
-+                                    hover_color="#491669", text_color="#ffffff", font=("Arial", 14),
-+                                    command=self.get_entries).pack(anchor="n", padx=(25, 25), pady=(25, 0))
- 
--        self.search_entry = CTkEntry(master=self.search_container, width=650,
--                                     placeholder_text="Search Employee with its ID or Name",
--                                     border_color="#70438C", border_width=2)
--        self.search_entry.pack(side="left", padx=(13, 0), pady=15)
-+    def get_entries(self):
-+        global username
-+        employee_name = self.name_entry.get()
-+        profession = self.profession_entry.get()
-+        date_of_joining = self.date_of_joining_entry.get()
-+        contact = self.contact_entry.get()
-+        emergency_contact = self.emergency_contact_entry.get()
-+        username = self.username_entry.get()
-+        password = self.password_entry.get()
- 
--        self.search_button = CTkButton(master=self.search_container, text="", image=self.search_img, fg_color="#601e88",
--                                       hover_color="#491669", width=28, command=self.search)
--        self.search_button.pack(side="left", padx=(13, 0), pady=15)
--
--        try:
--            db = connection.Connection().get_connection()
--            cursor = db.cursor()
-+        if (
-+                employee_name == '' or profession == '' or date_of_joining == '' or contact == '' or username == '' or password == ''):
-+            messagebox.showinfo("Null Info", "All fields are required to create profile")
-+        elif contact.isdigit() is not True or emergency_contact.isdigit() is not True:
-+            messagebox.showinfo("Invalid", "Contact number should contain only digits")
-+        elif len(contact) != 10 or len(emergency_contact) != 10:
-+            messagebox.showinfo("Invalid", "Contact number should contain 10 digits")
-+        elif password.isdigit() is not True:
-+            messagebox.showinfo("Invalid", "Password should contain digits only")
-+        elif not self.check_duplicate_user(username):
-+            if profession == "Select Job role":
-+                messagebox.showinfo("change", "Please select your Job role")
-+            elif profession == "Administrator":
-+                hourly_salary = 300
-+            elif profession == "Engineer":
-+                hourly_salary = 400
-+            elif profession == "Management":
-+                hourly_salary = 500
-+            try:
-+                db = connection.Connection().get_connection()
-+                cursor = db.cursor()
- 
--            sql = "SELECT * FROM requests"
--            cursor.execute(sql)
--            request = cursor.fetchall()
--            for result in request:
--                print(result)
--        except mysql.connector.Error as e:
--            print(e)
--
--        self.table_data = [
--            [("ID", "Name", "Profession", "Date of Joining", "Contact No.", "Emergency\nContact No.")]
--        ]
--        self.table_data.append(request)
--        self.table_data = list(itertools.chain(*self.table_data))
--
--        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color="transparent")
--        self.table_frame.pack(expand=True, fill="both", padx=27, pady=21)
--        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=["#E6E6E6", "#EEEEEE"],
--                              header_color="#601e88",
--                              hover_color="#DCDCDC")
--        self.table.edit_row(0, font=("Arial Bold", 14))
--        self.table.edit_row(0, text_color="#fff", hover_color="#491669")
--        self.table.pack(expand=True)
--        # self.main_frame = CTkFrame(master=self, fg_color="#ffffff", width=780, height=650, corner_radius=0)
--        # self.main_frame.pack_propagate(0)
--        # self.main_frame.pack(side="left")
--        #
--        # self.s_pass = IntVar(value=0)
--        # self.name_entry = CTkEntry(master=self.main_frame, placeholder_text="Enter name of Employee", height=35,
--        #                            width=330,
--        #                            fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14))
--        # self.name_entry.pack(anchor="n", padx=(25, 25), pady=(80, 0))
--        # self.profession_entry = CTkComboBox(master=self.main_frame, height=35, width=330, border_color="#601e88",
--        #                                     button_color="#601e88", dropdown_fg_color="#601e88",
--        #                                     dropdown_text_color="#ffffff", dropdown_hover_color="#491669",
--        #                                     button_hover_color="#601e88",
--        #                                     values=["Select Job role", "Administrator", "Engineer", "Management"])
--        # self.profession_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
--        # self.date_of_joining_entry = CTkEntry(master=self.main_frame,
--        #                                       placeholder_text="Enter Date of Joining i.e. dd/mm/yyyy",
--        #                                       height=35, width=330, fg_color="#EEEEEE", border_color="#601e88",
--        #                                       font=("Arial", 14))
--        # self.date_of_joining_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
--        # self.contact_entry = CTkEntry(master=self.main_frame, placeholder_text="Contact No.", height=35, width=330,
--        #                               fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14))
--        # self.contact_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
--        # self.emergency_contact_entry = CTkEntry(master=self.main_frame, placeholder_text="Emergency Contact No.",
--        #                                         height=35,
--        #                                         width=330, fg_color="#EEEEEE", border_color="#601e88",
--        #                                         font=("Arial", 14))
--        # self.emergency_contact_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
--        # self.username_entry = CTkEntry(master=self.main_frame, placeholder_text="Username", height=35, width=330,
--        #                                fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14))
--        # self.username_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
--        # self.password_entry = CTkEntry(master=self.main_frame, placeholder_text="Password", height=35, width=330,
--        #                                fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14), show="●")
--        # self.password_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
--        # self.show_password = CTkCheckBox(master=self.main_frame, checkbox_height=15, checkbox_width=15,
--        #                                  text="Show Password ?",
--        #                                  text_color="#7E7E7E", variable=self.s_pass, onvalue=1, offvalue=0,
--        #                                  command=self.toggle_password).pack(anchor="n", padx=(200, 0), pady=(5, 0))
--        # self.add_button = CTkButton(master=self.main_frame, text="Add Employee", height=35, fg_color="#601e88",
--        #                             hover_color="#491669", text_color="#ffffff", font=("Arial", 14),
--        #                             command=self.get_entries).pack(anchor="n", padx=(25, 25), pady=(25, 0))
--
--    def get_entries(self):
--         global username
--        # employee_name = self.name_entry.get()
--        # profession = self.profession_entry.get()
--        # date_of_joining = self.date_of_joining_entry.get()
--        # contact = self.contact_entry.get()
--        # emergency_contact = self.emergency_contact_entry.get()
--        # username = self.username_entry.get()
--        # password = self.password_entry.get()
--        #
--        # if (
--        #         employee_name == '' or profession == '' or date_of_joining == '' or contact == '' or username == '' or password == ''):
--        #     messagebox.showinfo("Null Info", "All fields are required to create profile")
--        # elif contact.isdigit() is not True or emergency_contact.isdigit() is not True:
--        #     messagebox.showinfo("Invalid", "Contact number should contain only digits")
--        # elif len(contact) != 10 or len(emergency_contact) != 10:
--        #     messagebox.showinfo("Invalid", "Contact number should contain 10 digits")
--        # elif password.isdigit() is not True:
--        #     messagebox.showinfo("Invalid", "Password should contain digits only")
--        # elif not self.check_duplicate_user(username):
--        #     if profession == "Select Job role":
--        #         messagebox.showinfo("change", "Please select your Job role")
--        #     elif profession == "Administrator":
--        #         hourly_salary = 300
--        #     elif profession == "Engineer":
--        #         hourly_salary = 400
--        #     elif profession == "Management":
--        #         hourly_salary = 500
--        #     try:
--        #         db = connection.Connection().get_connection()
--        #         cursor = db.cursor()
--        #
--        #         sql = "INSERT INTO employee_details (employee_name, profession, date_of_joining, contact_no, emergency_contact_no) VALUES (%s, %s, %s, %s, %s)"
--        #         val = (employee_name, profession, date_of_joining, contact, emergency_contact)
--        #         sql_2 = "INSERT INTO salary (employee_name, profession, hourly_salary) VALUES (%s, %s, %s)"
--        #         val_2 = (employee_name, profession, str(hourly_salary))
--        #
--        #         sql_1 = "INSERT INTO user_login (username, password) VALUES (%s, %s)"
--        #         val_1 = (username, password)
--        #
--        #         cursor.execute(sql, val)
--        #         cursor.execute(sql_1, val_1)
--        #         cursor.execute(sql_2, val_2)
--        #         print("name")
--        #
--        #         db.commit()
--        #         self.main_frame.destroy()
--        #         messagebox.showinfo("Successful", "Employee profile is created successfully")
--        #         self.main_frame.destroy()
--        #     except mysql.connector.Error as e:
--        #         messagebox.showerror("Database Error", f"Error occured: {e}")
--        # else:
--        #     print("hello")
--        # self.employees()
-+                sql = "INSERT INTO employee_details (employee_name, profession, date_of_joining, contact_no, emergency_contact_no) VALUES (%s, %s, %s, %s, %s)"
-+                val = (employee_name, profession, date_of_joining, contact, emergency_contact)
-+                sql_2 = "INSERT INTO salary (employee_name, profession, hourly_salary) VALUES (%s, %s, %s)"
-+                val_2 = (employee_name, profession, str(hourly_salary))
-+
-+                sql_1 = "INSERT INTO user_login (username, password) VALUES (%s, %s)"
-+                val_1 = (username, password)
-+
-+                cursor.execute(sql, val)
-+                cursor.execute(sql_1, val_1)
-+                cursor.execute(sql_2, val_2)
-+                print("name")
-+
-+                db.commit()
-+                self.main_frame.destroy()
-+                messagebox.showinfo("Successful", "Employee profile is created successfully")
-+                self.main_frame.destroy()
-+            except mysql.connector.Error as e:
-+                messagebox.showerror("Database Error", f"Error occured: {e}")
-+        else:
-+            print("hello")
-+        self.employees()
- 
-     def search(self):
-         search_data = self.search_entry.get()
-Index: demo.py
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/demo.py b/demo.py
-new file mode 100644
---- /dev/null	
-+++ b/demo.py	
-@@ -0,0 +1,35 @@
-+import tkinter as tk
-+
-+class TimerApp:
-+    def __init__(self, root):
-+        self.root = root
-+        self.counter = 0
-+        self.timer_running = False
-+
-+        self.root.protocol("WM_DELETE_WINDOW", self.stop_timer)
-+
-+        self.timer_label = tk.Label(self.root, text="0")
-+        self.timer_label.pack()
-+
-+        self.start_timer()
-+
-+    def start_timer(self):
-+        self.timer_running = True
-+        self.update_timer()
-+
-+    def stop_timer(self):
-+        global time
-+        self.timer_running = False
-+        time = self.counter
-+        print(time)
-+        root.destroy()
-+
-+    def update_timer(self):
-+        if self.timer_running:
-+            self.counter += 1
-+            self.timer_label.config(text=str(self.counter))
-+            self.root.after(1000, self.update_timer)
-+
-+root = tk.Tk()
-+app = TimerApp(root)
-+root.mainloop()
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_19-04-2024_23_25__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_19-04-2024_23_25__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_19-04-2024_23_25__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_19-04-2024_23_25__Changes_.xml	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
+++ /dev/null	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_19-04-2024_23_25_[Changes]" date="1713549334119" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19-04-2024_23_25_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 19-04-2024 23:25 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_00_45__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_00_45__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_00_45__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_00_45__Changes_.xml	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
+++ /dev/null	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_20-04-2024_00_45_[Changes]" date="1713554160689" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_00_45_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 20-04-2024 00:45 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_49_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_49_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_49_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_49_[Changes]/shelved.patch	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
+++ /dev/null	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
@@ -1,455 +0,0 @@
-Index: app_admin_windows.py
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import itertools\r\nimport time\r\nimport customtkinter\r\nfrom tkinter import *\r\nimport mysql.connector\r\nimport pandas as pd\r\nfrom customtkinter import *\r\nfrom tkinter import messagebox, ttk\r\nfrom CTkTable import CTkTable\r\nfrom PIL import Image\r\nfrom matplotlib import pyplot as plt\r\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\r\nimport connection\r\nfrom tkcalendar import Calendar\r\nfrom calendar import Calendar\r\n\r\nLOGO_IMG_DATA = Image.open(\"images/logo.png\")\r\nDASHBOARD_IMG_DATA = Image.open(\"images/dashboard_icon.png\")\r\nEMPLOYEE_IMG_DATA = Image.open(\"images/employee_icon.png\")\r\nPROJECT_IMG_DATA = Image.open(\"images/project.png\")\r\nSALARY_IMG_DATA = Image.open(\"images/salary_icon.png\")\r\nSETTINGS_IMG_DATA = Image.open(\"images/settings_icon.png\")\r\nLOGOUT_IMG_DATA = Image.open(\"images/log-out.png\")\r\nSEARCH_IMG_DATA = Image.open(\"images/search-icon.png\")\r\n\r\nCOLORS = [\"#D60000\", \"#FF9700\", \"#005DFF\", \"#42F200\", \"#DAE801\"]\r\n\r\nEngineer_salary = 400\r\nManagement_salary = 500\r\nAdministrative_salary = 300\r\n\r\n\r\nclass DashboardWindow(customtkinter.CTk):\r\n    def __init__(self, username, password):\r\n        super().__init__()\r\n        self.title(\"Dashboard\")\r\n        set_appearance_mode(\"Light\")\r\n        self.geometry(\"956x645+350+100\")\r\n        self.username = username\r\n        self.timer_running = False\r\n        # Images\r\n        self.logo_img = CTkImage(dark_image=LOGO_IMG_DATA, light_image=LOGO_IMG_DATA, size=(77.68, 85.42))\r\n        self.dashboard_img = CTkImage(dark_image=DASHBOARD_IMG_DATA, light_image=DASHBOARD_IMG_DATA)\r\n        self.employee_img = CTkImage(dark_image=EMPLOYEE_IMG_DATA, light_image=EMPLOYEE_IMG_DATA)\r\n        self.project_img = CTkImage(dark_image=PROJECT_IMG_DATA, light_image=PROJECT_IMG_DATA)\r\n        self.salary_img = CTkImage(dark_image=SALARY_IMG_DATA, light_image=SALARY_IMG_DATA)\r\n        self.settings_img = CTkImage(dark_image=SETTINGS_IMG_DATA, light_image=SETTINGS_IMG_DATA)\r\n        self.logout_img = CTkImage(dark_image=LOGOUT_IMG_DATA, light_image=LOGOUT_IMG_DATA)\r\n        self.search_img = CTkImage(dark_image=SEARCH_IMG_DATA, light_image=SEARCH_IMG_DATA)\r\n\r\n        # Frame creation\r\n        self.side_frame = CTkFrame(master=self, fg_color=\"#601e88\", width=176, height=650, corner_radius=0)\r\n        self.side_frame.pack_propagate(0)\r\n        self.side_frame.pack(fill=\"y\", anchor=\"w\", side=\"left\")\r\n\r\n        CTkLabel(master=self.side_frame, text=\"\", image=self.logo_img).pack(pady=(38, 0), anchor=\"center\")\r\n\r\n        self.dashboard_button = CTkButton(master=self.side_frame, image=self.dashboard_img, text=\"Dashboard\",\r\n                                          fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#491669\",\r\n                                          anchor=\"w\", command=self.dashboard)\r\n        self.dashboard_button.pack(anchor=\"center\", ipady=5, pady=(60, 0))\r\n\r\n        self.employee_button = CTkButton(master=self.side_frame, image=self.employee_img, text=\"Employees\",\r\n                                         fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#491669\",\r\n                                         anchor=\"w\", command=self.employees)\r\n        self.employee_button.pack(anchor=\"center\", ipady=5, pady=(16, 0))\r\n\r\n        self.project_button = CTkButton(master=self.side_frame, image=self.project_img, text=\"Projects\",\r\n                                        fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#491669\",\r\n                                        anchor=\"w\", command=self.projects)\r\n        self.project_button.pack(anchor=\"center\", ipady=5, pady=(16, 0))\r\n\r\n        self.salary_button = CTkButton(master=self.side_frame, image=self.salary_img, text=\"Salary\",\r\n                                       fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#491669\",\r\n                                       anchor=\"w\", command=self.salary)\r\n        self.salary_button.pack(anchor=\"center\", ipady=5, pady=(16, 0))\r\n\r\n        self.settings_button = CTkButton(master=self.side_frame, image=self.settings_img, text=\"Settings\",\r\n                                         fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#491669\",\r\n                                         anchor=\"w\", command=self.settings)\r\n        self.settings_button.pack(anchor=\"center\", ipady=5, pady=(16, 0))\r\n\r\n        self.logout_button = CTkButton(master=self.side_frame, image=self.logout_img, text=\"Log Out\",\r\n                                       fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#491669\",\r\n                                       anchor=\"w\", command=self.logout_listner)\r\n        self.logout_button.pack(anchor=\"center\", ipady=5, pady=(160, 0))\r\n\r\n        self.window_count = 1\r\n        if self.window_count == 1:\r\n            self.dashboard()\r\n            global job\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT * FROM employee_details WHERE username=%s\"\r\n            val = (username,)\r\n\r\n            cursor.execute(sql, val)\r\n            job = cursor.fetchall()\r\n            print(job)\r\n            job = job[0][2]\r\n\r\n\r\n        except mysql.connector.Error as e:\r\n            print(e)\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured :{e}\")\r\n\r\n    def dashboard(self):\r\n        if self.window_count == 1:\r\n            pass\r\n        elif self.window_count == 2:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 3:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 4:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 5:\r\n            self.main_frame.destroy()\r\n\r\n        if self.window_count == self.window_count:\r\n            pass\r\n\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        # self.user_button = CTkButton(master=self.main_frame, text=\"username\", fg_color=\"transparent\", font=(\"Arial Bold\", 14), hover_color=\"#ffffff\", anchor=\"ne\")\r\n        self.check_frame = CTkFrame(master=self.main_frame, fg_color=\"#ffffff\", width=200, height=30, corner_radius=0)\r\n        self.check_frame.pack(anchor=\"nw\", padx=10, pady=(10, 0))\r\n        self.radio_var = IntVar(value=0)\r\n        self.check_in = CTkRadioButton(master=self.check_frame, text=\"Check In\", font=(\"Arial Bold\", 14), value=1,\r\n                                       variable=self.radio_var, command=self.stop_timer)\r\n        self.check_in.pack(anchor=\"n\", side=\"left\", padx=27, pady=(20, 0))\r\n        self.check_out = CTkRadioButton(master=self.check_frame, text=\"Check Out\", font=(\"Arial Bold\", 14), value=2,\r\n                                        variable=self.radio_var, command=self.stop_timer)\r\n        self.check_out.pack(anchor=\"n\", side=\"right\", padx=27, pady=(20, 0))\r\n\r\n        self.graph_frame = CTkFrame(master=self.main_frame, fg_color=\"#F0F0F0\", width=720, height=280, corner_radius=13)\r\n        self.graph_frame.pack(anchor=\"center\", padx=27, pady=(20, 0))\r\n\r\n        global df, dt\r\n        # create a connection to the database\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n\r\n            # read the data from the database\r\n            query = 'SELECT employee_name, working_hours  FROM salary'\r\n            df = pd.read_sql(query, con=db)\r\n            dt = pd.DataFrame(df.sort_values(by=\"working_hours\"))\r\n            print(dt)\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n            print(e)\r\n        # plot the data as a bar graph\r\n        plt.figure(figsize=(12, 9))\r\n        plt.bar(dt['employee_name'], dt['working_hours'])\r\n        plt.xlabel('employee name')\r\n        plt.ylabel('time (in hrs)')\r\n        plt.title('analytics')\r\n        # plt.style.use(\"Solarize_light2\")\r\n\r\n        # plt.show()\r\n        self.add = plt.gcf()\r\n        canvas = FigureCanvasTkAgg(self.add, master=self.graph_frame)\r\n        canvas.get_tk_widget().configure(width=900, height=360)\r\n        ctk_canvas = canvas.get_tk_widget()\r\n        ctk_canvas.place(relx=0, rely=0, anchor=\"nw\")\r\n\r\n        try:\r\n            username = [self.username]\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n            sql = \"SELECT unique_id, project_name, total_tasks, tasks_done FROM project WHERE username = %s\"\r\n            cursor.execute(sql, username, )\r\n            result = cursor.fetchall()\r\n            print(result)\r\n        except mysql.connector.Error as e:\r\n            print(e)\r\n\r\n        number_of_task = 1\r\n        self.task_number = int(result[0][3])\r\n        self.complete_task = int(result[0][2])\r\n        self.task_progress_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"#F0F0F0\", width=345, height=200,\r\n                                                      corner_radius=13)\r\n        self.task_progress_frame.pack(anchor=\"n\", side=\"left\", padx=(27, 0), pady=(20, 0))\r\n\r\n        self.progress_bar_width = 310\r\n        for i in range(number_of_task):\r\n            self.label2 = (CTkLabel(master=self.task_progress_frame, text=result[0][1],\r\n                                    width=30, fg_color=\"#F0F0F0\").pack(anchor=\"w\", padx=(0, 25), pady=(5, 0)))\r\n            self.label1 = (CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\",\r\n                                    width=30, fg_color=\"#F0F0F0\").pack(anchor=\"w\", padx=(0, 25), pady=(5, 0)))\r\n            self.progress_bar1 = CTkProgressBar(master=self.task_progress_frame, fg_color=\"#F0F0F0\",\r\n                                                width=self.progress_bar_width, height=20, corner_radius=8,\r\n                                                progress_color=COLORS[0], border_color=\"#491669\", border_width=2)\r\n            self.progress_bar1.pack(anchor=\"n\", padx=10, pady=(5, 0))\r\n            self.progress_bar1.set((self.task_number / self.complete_task))\r\n\r\n        # self.label1 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\", width=30).pack(anchor=\"ne\", padx=(0, 25), pady=(5,0))\r\n        # self.progress_bar1 = CTkProgressBar(master=self.task_progress_frame, fg_color=\"#F0F0F0\", width=self.progress_bar_width, height=20, corner_radius=8, progress_color=COLORS[0], border_color=\"#491669\", border_width=2)\r\n        # self.progress_bar1.pack(anchor=\"n\", padx=10, pady=(5, 0))\r\n        # self.progress_bar1.set(self.current)\r\n        #\r\n        # self.label2 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\", width=30).pack(\r\n        #     anchor=\"ne\", padx=(0, 25), pady=(35, 0))\r\n        # self.progress_bar2 = CTkProgressBar(master=self.task_progress_frame, fg_color=\"#F0F0F0\", width=self.progress_bar_width, height=20,\r\n        #                                     corner_radius=8, progress_color=COLORS[1], border_color=\"#491669\", border_width=2)\r\n        # self.progress_bar2.pack(anchor=\"n\", padx=10, pady=(5, 0))\r\n        #\r\n        # self.label3 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\", width=30).pack(\r\n        #     anchor=\"ne\", padx=(0, 25), pady=(35, 0))\r\n        # self.progress_bar3 = CTkProgressBar(master=self.task_progress_frame, fg_color=\"#F0F0F0\", width=self.progress_bar_width, height=20,\r\n        #                                     corner_radius=8, progress_color=COLORS[4], border_color=\"#491669\", border_width=2)\r\n        # self.progress_bar3.pack(anchor=\"n\", padx=10, pady=(5, 0))\r\n\r\n        # self.label4 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\", width=30).pack(\r\n        #     anchor=\"ne\", padx=(0, 25), pady=(35, 0))\r\n        # self.progress_bar4 = CTkProgressBar(master=self.task_progress_frame, fg_color=\"#F0F0F0\", width=self.progress_bar_width, height=20,\r\n        #                                     corner_radius=8, progress_color=COLORS[2], border_color=\"#491669\", border_width=2)\r\n        # self.progress_bar4.pack(anchor=\"n\", padx=10, pady=(5, 0))\r\n        #\r\n        # self.label5 = CTkLabel(master=self.task_progress_frame, text=f\"{self.task_number}/{self.complete_task}\", width=30).pack(\r\n        #     anchor=\"ne\", padx=(0, 25), pady=(35, 0))\r\n        # self.progress_bar5 = CTkProgressBar(master=self.task_progress_frame, fg_color=\"#F0F0F0\", width=self.progress_bar_width, height=20,\r\n        #                                     corner_radius=8, progress_color=COLORS[3], border_color=\"#491669\", border_width=2)\r\n        # self.progress_bar5.pack(anchor=\"n\", padx=10, pady=(5, 0))\r\n\r\n        self.calendar_frame = CTkFrame(master=self.main_frame, fg_color=\"#F0F0F0\", width=330, height=230,\r\n                                       corner_radius=13)\r\n        self.calendar_frame.pack(anchor=\"n\", side=\"right\", padx=(0, 27), pady=(20, 0))\r\n\r\n        # self.cal = Calendar(self.calendar_frame, selectmode=\"day\", date_pattern=\"y-mm-dd\")\r\n        # self.cal.pack(fill=\"both\", expand=True)\r\n        self.window_count = 1\r\n\r\n    def stop_timer(self):\r\n        global stop_time, elapsed_time, salary\r\n        self.val = self.radio_var.get()\r\n        if self.val == 1:\r\n            stop_time = time.time()\r\n        # input(\"Press enter to stop the timer...\"\r\n        elif self.val == 2:\r\n            elapsed_time = time.time() - stop_time\r\n            elapsed_time = round(elapsed_time)\r\n            print(f\"time spend {elapsed_time} seconds\")\r\n            final_time = (elapsed_time * 10) / 60\r\n            print(final_time)\r\n            if job == 'Engineer':\r\n                salary = final_time * Engineer_salary\r\n            elif job == \"Administrator\":\r\n                salary = final_time * Administrative_salary\r\n            elif job == \"Management\":\r\n                salary = final_time * Management_salary\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"UPDATE salary SET working_hours=%s, salary=%s WHERE username=%s\"\r\n                val = (final_time, salary, self.username,)\r\n                cursor.execute(sql, val)\r\n\r\n                db.commit()\r\n            except mysql.connector.Error as e:\r\n                messagebox.showinfo(\"Database Error\", f\"Error Occured: {e}\")\r\n                print(e)\r\n\r\n    def employees(self):\r\n        if self.window_count == 1:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 2:\r\n            pass\r\n        elif self.window_count == 3:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 4:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 5:\r\n            self.main_frame.destroy()\r\n\r\n        if self.window_count == self.window_count:\r\n            pass\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        title_frame.pack(anchor=\"n\", fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n        self.label = CTkLabel(master=title_frame, text=\"Employee & their details\", font=(\"Arial Black\", 23),\r\n                              text_color=\"#601e88\")\r\n        self.label.pack(anchor=\"nw\", side=\"left\", pady=(8, 0))\r\n\r\n        self.add_employee_button = CTkButton(master=title_frame, text=\"+ New Employee\", font=(\"Arial Black\", 15),\r\n                                             text_color=\"#fff\", fg_color=\"#601e88\", hover_color=\"#491669\",\r\n                                             corner_radius=15, command=self.add_employee)\r\n        self.add_employee_button.pack(anchor=\"ne\", side=\"right\", ipady=10)\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Employee with its ID or Name\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28, command=self.search)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT * FROM employee_details\"\r\n            cursor.execute(sql)\r\n            results = cursor.fetchall()\r\n            for result in results:\r\n                print(result)\r\n        except mysql.connector.Error as e:\r\n            print(e)\r\n\r\n        self.table_data = [\r\n            [(\"ID\", \"Name\", \"Profession\", \"Date of Joining\", \"Contact No.\", \"Emergency\\nContact No.\")]\r\n        ]\r\n        self.table_data.append(results)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.pack(expand=True)\r\n\r\n        self.window_count = 2\r\n\r\n    def add_employee(self):\r\n        self.main_frame.destroy()\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        self.s_pass = IntVar(value=0)\r\n        self.name_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Enter name of Employee\", height=35,\r\n                                   width=330,\r\n                                   fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        self.name_entry.pack(anchor=\"n\", padx=(25, 25), pady=(80, 0))\r\n        self.profession_entry = CTkComboBox(master=self.main_frame, height=35, width=330, border_color=\"#601e88\",\r\n                                            button_color=\"#601e88\", dropdown_fg_color=\"#601e88\",\r\n                                            dropdown_text_color=\"#ffffff\", dropdown_hover_color=\"#491669\",\r\n                                            button_hover_color=\"#601e88\",\r\n                                            values=[\"Select Job role\", \"Administrator\", \"Engineer\", \"Management\"])\r\n        self.profession_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n        self.date_of_joining_entry = CTkEntry(master=self.main_frame,\r\n                                              placeholder_text=\"Enter Date of Joining i.e. dd/mm/yyyy\",\r\n                                              height=35, width=330, fg_color=\"#EEEEEE\", border_color=\"#601e88\",\r\n                                              font=(\"Arial\", 14))\r\n        self.date_of_joining_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n        self.contact_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Contact No.\", height=35, width=330,\r\n                                      fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        self.contact_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n        self.emergency_contact_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Emergency Contact No.\",\r\n                                                height=35,\r\n                                                width=330, fg_color=\"#EEEEEE\", border_color=\"#601e88\",\r\n                                                font=(\"Arial\", 14))\r\n        self.emergency_contact_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n        self.username_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Username\", height=35, width=330,\r\n                                       fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        self.username_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n        self.password_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Password\", height=35, width=330,\r\n                                       fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14), show=\"●\")\r\n        self.password_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n        self.show_password = CTkCheckBox(master=self.main_frame, checkbox_height=15, checkbox_width=15,\r\n                                         text=\"Show Password ?\",\r\n                                         text_color=\"#7E7E7E\", variable=self.s_pass, onvalue=1, offvalue=0,\r\n                                         command=self.toggle_password).pack(anchor=\"n\", padx=(200, 0), pady=(5, 0))\r\n        self.add_button = CTkButton(master=self.main_frame, text=\"Add Employee\", height=35, fg_color=\"#601e88\",\r\n                                    hover_color=\"#491669\", text_color=\"#ffffff\", font=(\"Arial\", 14),\r\n                                    command=self.get_entries).pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n\r\n    def get_entries(self):\r\n        global username\r\n        employee_name = self.name_entry.get()\r\n        profession = self.profession_entry.get()\r\n        date_of_joining = self.date_of_joining_entry.get()\r\n        contact = self.contact_entry.get()\r\n        emergency_contact = self.emergency_contact_entry.get()\r\n        username = self.username_entry.get()\r\n        password = self.password_entry.get()\r\n\r\n        if (\r\n                employee_name == '' or profession == '' or date_of_joining == '' or contact == '' or username == '' or password == ''):\r\n            messagebox.showinfo(\"Null Info\", \"All fields are required to create profile\")\r\n        elif contact.isdigit() is not True or emergency_contact.isdigit() is not True:\r\n            messagebox.showinfo(\"Invalid\", \"Contact number should contain only digits\")\r\n        elif len(contact) != 10 or len(emergency_contact) != 10:\r\n            messagebox.showinfo(\"Invalid\", \"Contact number should contain 10 digits\")\r\n        elif password.isdigit() is not True:\r\n            messagebox.showinfo(\"Invalid\", \"Password should contain digits only\")\r\n        elif not self.check_duplicate_user(username):\r\n            if profession == \"Select Job role\":\r\n                messagebox.showinfo(\"change\", \"Please select your Job role\")\r\n            elif profession == \"Administrator\":\r\n                hourly_salary = 300\r\n            elif profession == \"Engineer\":\r\n                hourly_salary = 400\r\n            elif profession == \"Management\":\r\n                hourly_salary = 500\r\n            try:\r\n                db = connection.Connection().get_connection()\r\n                cursor = db.cursor()\r\n\r\n                sql = \"INSERT INTO employee_details (employee_name, profession, date_of_joining, contact_no, emergency_contact_no) VALUES (%s, %s, %s, %s, %s)\"\r\n                val = (employee_name, profession, date_of_joining, contact, emergency_contact)\r\n                sql_2 = \"INSERT INTO salary (employee_name, profession, hourly_salary) VALUES (%s, %s, %s)\"\r\n                val_2 = (employee_name, profession, str(hourly_salary))\r\n\r\n                sql_1 = \"INSERT INTO user_login (username, password) VALUES (%s, %s)\"\r\n                val_1 = (username, password)\r\n\r\n                cursor.execute(sql, val)\r\n                cursor.execute(sql_1, val_1)\r\n                cursor.execute(sql_2, val_2)\r\n                print(\"name\")\r\n\r\n                db.commit()\r\n                self.main_frame.destroy()\r\n                messagebox.showinfo(\"Successful\", \"Employee profile is created successfully\")\r\n                self.main_frame.destroy()\r\n            except mysql.connector.Error as e:\r\n                messagebox.showerror(\"Database Error\", f\"Error occured: {e}\")\r\n        else:\r\n            print(\"hello\")\r\n        self.employees()\r\n\r\n    def search(self):\r\n        search_data = self.search_entry.get()\r\n        global data\r\n        if search_data == '':\r\n            messagebox.showinfo(\"Null Field\", \"There is Nothing to Search\")\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT * FROM employee_details WHERE employee_name=%s\"\r\n            val = (search_data,)\r\n\r\n            cursor.execute(sql, val)\r\n            data_fetch = cursor.fetchall()\r\n            for data in data_fetch:\r\n                print(data)\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n            print(e)\r\n        self.main_frame.destroy()\r\n\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        title_frame.pack(anchor=\"n\", fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n        self.label = CTkLabel(master=title_frame, text=\"Employee & their details\", font=(\"Arial Black\", 23),\r\n                              text_color=\"#601e88\")\r\n        self.label.pack(anchor=\"nw\", side=\"left\", pady=(8, 0))\r\n\r\n        self.add_employee_button = CTkButton(master=title_frame, text=\"+ New Employee\", font=(\"Arial Black\", 15),\r\n                                             text_color=\"#fff\", fg_color=\"#601e88\", hover_color=\"#491669\",\r\n                                             corner_radius=15, command=self.add_employee)\r\n        self.add_employee_button.pack(anchor=\"ne\", side=\"right\", ipady=10)\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Employee with its ID or Name\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28, command=self.search)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.table_data = [\r\n            [(\"ID\", \"Name\", \"Profession\", \"Date of Joining\", \"Contact No.\", \"Emergency\\nContact No.\")]\r\n        ]\r\n        self.table_data.append(data_fetch)\r\n        # print(self.table_data)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.pack(expand=True)\r\n\r\n        self.window_count = 2\r\n\r\n    def projects(self):\r\n        if self.window_count == 1:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 2:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 3:\r\n            pass\r\n        elif self.window_count == self.window_count:\r\n            pass\r\n        elif self.window_count == 4:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 5:\r\n            self.main_frame.destroy()\r\n\r\n        if self.window_count == self.window_count:\r\n            pass\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        title_frame.pack(anchor=\"n\", fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n        self.label = CTkLabel(master=title_frame, text=\"Project Details\", font=(\"Arial Black\", 23),\r\n                              text_color=\"#601e88\")\r\n        self.label.pack(anchor=\"nw\", side=\"left\", pady=(8, 0))\r\n\r\n        self.add_project_button = CTkButton(master=title_frame, text=\"Create New Project\", font=(\"Arial Black\", 15),\r\n                                            text_color=\"#fff\", fg_color=\"#601e88\", hover_color=\"#491669\",\r\n                                            corner_radius=15, command=self.create_new_project)\r\n        self.add_project_button.pack(anchor=\"ne\", side=\"right\", ipady=10)\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Project with Unique ID\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28, command=self.search_project)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT * FROM project\"\r\n            cursor.execute(sql)\r\n            results = cursor.fetchall()\r\n            for result in results:\r\n                print(result)\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n            print(e)\r\n\r\n        self.table_data = [\r\n            [(\"Unique\\nID\", \"Project Name\", \"Start Date\", \"Due Date\", \"Project\\nHead\", \"Number\\nof Tasks\",\r\n              \"Completed\\nTasks\")]\r\n        ]\r\n\r\n        self.table_data.append(results)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.edit_column(1, width=200)\r\n        self.table.pack(expand=True)\r\n\r\n        self.window_count = 3\r\n\r\n    def create_new_project(self):\r\n        self.main_frame.destroy()\r\n\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        self.s_pass = IntVar(value=0)\r\n        self.project_name_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Enter name of Project\", height=35,\r\n                                           width=330,\r\n                                           fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        self.project_name_entry.pack(anchor=\"n\", padx=(25, 25), pady=(120, 0))\r\n        self.start_date_entry = CTkEntry(master=self.main_frame,\r\n                                         placeholder_text=\"Enter Start Date of project i.e. dd/mm/yyyy\", height=35,\r\n                                         width=330,\r\n                                         fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        self.start_date_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n\r\n        self.due_date_entry = CTkEntry(master=self.main_frame,\r\n                                       placeholder_text=\"Enter Due date of project i.e. dd/mm/yyyy\", height=35,\r\n                                       width=330,\r\n                                       fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        self.due_date_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n\r\n        self.assign_task_entry = CTkEntry(master=self.main_frame,\r\n                                          placeholder_text=\"Enter name of Employee to assign this project\", height=35,\r\n                                          width=330,\r\n                                          fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        self.assign_task_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n\r\n        self.no_of_tasks_entry = CTkEntry(master=self.main_frame, placeholder_text=\"Enter Number of Tasks\", height=35,\r\n                                          width=330,\r\n                                          fg_color=\"#EEEEEE\", border_color=\"#601e88\", font=(\"Arial\", 14))\r\n        self.no_of_tasks_entry.pack(anchor=\"n\", padx=(25, 25), pady=(25, 0))\r\n\r\n        self.create_project_button = CTkButton(master=self.main_frame, text=\"Create Project\", height=35,\r\n                                               fg_color=\"#601e88\",\r\n                                               hover_color=\"#491669\", text_color=\"#ffffff\", font=(\"Arial\", 14),\r\n                                               command=self.get_entries_project).pack(anchor=\"n\", padx=(25, 25),\r\n                                                                                      pady=(25, 0))\r\n\r\n    def get_entries_project(self):\r\n        project_name = self.project_name_entry.get()\r\n        start_date = self.start_date_entry.get()\r\n        due_date = self.due_date_entry.get()\r\n        assign_task = self.assign_task_entry.get()\r\n        number_of_tasks = self.no_of_tasks_entry.get()\r\n\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"INSERT INTO project (project_name, start_date, due_date, employee_name, total_tasks, tasks_done) VALUES (%s, %s, %s, %s, %s)\"\r\n            val = (project_name, start_date, due_date, assign_task, number_of_tasks)\r\n\r\n            # sql_1 = \"INSERT INTO user_login (username, password) VALUES (%s, %s)\"\r\n            # val_1 = (username, password)\r\n\r\n            cursor.execute(sql, val)\r\n            # cursor.execute(sql_1, val_1)\r\n            print(\"name\")\r\n\r\n            db.commit()\r\n            # self.main_frame.destroy()\r\n            messagebox.showinfo(\"Successful\", \"Project is created successfully\")\r\n            self.main_frame.destroy()\r\n            self.projects()\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database Error\", f\"Error occured: {e}\")\r\n\r\n    def search_project(self):\r\n        search_project = self.search_entry.get()\r\n\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT * FROM project WHERE project_name=%s\"\r\n            val = (search_project,)\r\n            cursor.execute(sql, val)\r\n\r\n            fetch_project = cursor.fetchall()\r\n            for project in fetch_project:\r\n                print(project)\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n            print(e)\r\n        self.main_frame.destroy()\r\n\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        title_frame.pack(anchor=\"n\", fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n        self.label = CTkLabel(master=title_frame, text=\"Project Details\", font=(\"Arial Black\", 23),\r\n                              text_color=\"#601e88\")\r\n        self.label.pack(anchor=\"nw\", side=\"left\", pady=(8, 0))\r\n\r\n        self.add_project_button = CTkButton(master=title_frame, text=\"Create New Project\", font=(\"Arial Black\", 15),\r\n                                            text_color=\"#fff\", fg_color=\"#601e88\", hover_color=\"#491669\",\r\n                                            corner_radius=15)\r\n        self.add_project_button.pack(anchor=\"ne\", side=\"right\", ipady=10)\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Project with Unique ID\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.table_data = [\r\n            [(\"Unique\\nID\", \"Project Name\", \"Start Date\", \"Due Date\", \"Project\\nHead\", \"Number\\nof Tasks\",\r\n              \"No. of\\nCompleted Tasks\")]\r\n        ]\r\n\r\n        self.table_data.append(fetch_project)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.edit_column(1, width=200)\r\n        self.table.pack(expand=True)\r\n\r\n        self.window_count = 3\r\n\r\n    def salary(self):\r\n        if self.window_count == 1:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 2:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 3:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 4:\r\n            pass\r\n        elif self.window_count == self.window_count:\r\n            pass\r\n        elif self.window_count == 5:\r\n            self.main_frame.destroy()\r\n\r\n        if self.window_count == self.window_count:\r\n            pass\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        # title_frame = CTkFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        # title_frame.pack(anchor=\"n\", fill=\"x\", padx=27, pady=(29, 0))\r\n\r\n        # self.label = CTkLabel(master=title_frame, text=\"Projects History\", font=(\"Arial Black\", 23),\r\n        #                       text_color=\"#601e88\")\r\n        # self.label.pack(anchor=\"nw\", side=\"left\", pady=(8, 0))\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(anchor=\"n\", fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Employee with  its ID or Name\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28, command=self.salary_search)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT employee_id, employee_name, profession, working_hours, salary FROM salary\"\r\n            cursor.execute(sql)\r\n            results = cursor.fetchall()\r\n            for result in results:\r\n                print(result)\r\n        except mysql.connector.Error as e:\r\n            print(e)\r\n\r\n        self.table_data = [\r\n            [(\"ID\", \"Name\", \"Profession\", \"Working\\nHours\", \"Salary\")]\r\n        ]\r\n        self.table_data.append(results)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.pack(expand=True)\r\n\r\n        self.window_count = 4\r\n\r\n    def salary_search(self):\r\n        search_data = self.search_entry.get()\r\n        global data\r\n        if search_data == '':\r\n            messagebox.showinfo(\"Null Field\", \"There is Nothing to Search\")\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"SELECT employee_id, employee_name, profession, working_hours, salary FROM salary WHERE %s IN (employee_id, employee_name)\"\r\n            val = (search_data,)\r\n\r\n            cursor.execute(sql, val)\r\n            data_fetch = cursor.fetchall()\r\n            for data in data_fetch:\r\n                print(data)\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database Error\", f\"Error Occured: {e}\")\r\n            print(e)\r\n        self.main_frame.destroy()\r\n\r\n        self.main_frame = CTkFrame(master=self, fg_color=\"#ffffff\", width=780, height=650, corner_radius=0)\r\n        self.main_frame.pack_propagate(0)\r\n        self.main_frame.pack(side=\"left\")\r\n\r\n        self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color=\"#F0F0F0\")\r\n        self.search_container.pack(anchor=\"n\", fill=\"x\", pady=(30, 0), padx=27)\r\n\r\n        self.search_entry = CTkEntry(master=self.search_container, width=650,\r\n                                     placeholder_text=\"Search Employee with  its ID or Name\",\r\n                                     border_color=\"#70438C\", border_width=2)\r\n        self.search_entry.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.search_button = CTkButton(master=self.search_container, text=\"\", image=self.search_img, fg_color=\"#601e88\",\r\n                                       hover_color=\"#491669\", width=28)\r\n        self.search_button.pack(side=\"left\", padx=(13, 0), pady=15)\r\n\r\n        self.table_data = [\r\n            [(\"ID\", \"Name\", \"Profession\", \"Working\\nHours\", \"Salary\")]\r\n        ]\r\n        self.table_data.append(data_fetch)\r\n        self.table_data = list(itertools.chain(*self.table_data))\r\n\r\n        self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color=\"transparent\")\r\n        self.table_frame.pack(expand=True, fill=\"both\", padx=27, pady=21)\r\n        self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=[\"#E6E6E6\", \"#EEEEEE\"],\r\n                              header_color=\"#601e88\",\r\n                              hover_color=\"#DCDCDC\")\r\n        self.table.edit_row(0, font=(\"Arial Bold\", 14))\r\n        self.table.edit_row(0, text_color=\"#fff\", hover_color=\"#491669\")\r\n        self.table.pack(expand=True)\r\n\r\n        self.window_count = 4\r\n\r\n    def settings(self):\r\n        if self.window_count == 1:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 2:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 3:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 4:\r\n            self.main_frame.destroy()\r\n        elif self.window_count == 5:\r\n            pass\r\n        elif self.window_count == self.window_count:\r\n            pass\r\n\r\n        if self.window_count == self.window_count:\r\n            pass\r\n\r\n        self.window_count = 5\r\n        pass\r\n\r\n    def toggle_password(self):\r\n        if self.s_pass.get() == 1:\r\n            self.password_entry.configure(show='')\r\n        else:\r\n            self.password_entry.configure(show='●')\r\n\r\n    def check_duplicate_user(self, e_username):\r\n        try:\r\n            db = connection.Connection().get_connection()\r\n            cursor = db.cursor()\r\n\r\n            sql = \"select * from user_login;\"\r\n            cursor.execute(sql)\r\n            users = cursor.fetchall()\r\n\r\n            for user in users:\r\n                db_username = user[0]\r\n                if e_username == db_username:\r\n                    messagebox.showinfo(\"Already Exist\", \"Username already exist\")\r\n        except mysql.connector.Error as e:\r\n            messagebox.showerror(\"Database error\", f\"Error occured: {e}\")\r\n\r\n    def logout_listner(self):\r\n        self.destroy()\r\n        import user_login\r\n        app = user_login.Login()\r\n        app.mainloop()\r\n\r\n# if __name__ == '__main__':\r\n#     app = DashboardWindow()\r\n#     app.mainloop()\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app_admin_windows.py b/app_admin_windows.py
---- a/app_admin_windows.py	(revision b212977b2491ee031a1740a2513807e73d00a2b2)
-+++ b/app_admin_windows.py	(date 1713601098575)
-@@ -150,7 +150,7 @@
-             dt = pd.DataFrame(df.sort_values(by="working_hours"))
-             print(dt)
-         except mysql.connector.Error as e:
--            messagebox.showerror("Database Error", f"Error Occured: {e}")
-+            messagebox.showerror("Database Error", f"Error Occurred: {e}")
-             print(e)
-         # plot the data as a bar graph
-         plt.figure(figsize=(12, 9))
-@@ -378,84 +378,23 @@
-                                          command=self.toggle_password).pack(anchor="n", padx=(200, 0), pady=(5, 0))
-         self.add_button = CTkButton(master=self.main_frame, text="Add Employee", height=35, fg_color="#601e88",
-                                     hover_color="#491669", text_color="#ffffff", font=("Arial", 14),
--                                    command=self.get_entries).pack(anchor="n", padx=(25, 25), pady=(25, 0))
--
--    def get_entries(self):
--        global username
--        employee_name = self.name_entry.get()
--        profession = self.profession_entry.get()
--        date_of_joining = self.date_of_joining_entry.get()
--        contact = self.contact_entry.get()
--        emergency_contact = self.emergency_contact_entry.get()
--        username = self.username_entry.get()
--        password = self.password_entry.get()
-+                                    command=self.add_new_employee).pack(anchor="n", padx=(25, 25), pady=(25, 0))
- 
--        if (
--                employee_name == '' or profession == '' or date_of_joining == '' or contact == '' or username == '' or password == ''):
--            messagebox.showinfo("Null Info", "All fields are required to create profile")
--        elif contact.isdigit() is not True or emergency_contact.isdigit() is not True:
--            messagebox.showinfo("Invalid", "Contact number should contain only digits")
--        elif len(contact) != 10 or len(emergency_contact) != 10:
--            messagebox.showinfo("Invalid", "Contact number should contain 10 digits")
--        elif password.isdigit() is not True:
--            messagebox.showinfo("Invalid", "Password should contain digits only")
--        elif not self.check_duplicate_user(username):
--            if profession == "Select Job role":
--                messagebox.showinfo("change", "Please select your Job role")
--            elif profession == "Administrator":
--                hourly_salary = 300
--            elif profession == "Engineer":
--                hourly_salary = 400
--            elif profession == "Management":
--                hourly_salary = 500
--            try:
--                db = connection.Connection().get_connection()
--                cursor = db.cursor()
--
--                sql = "INSERT INTO employee_details (employee_name, profession, date_of_joining, contact_no, emergency_contact_no) VALUES (%s, %s, %s, %s, %s)"
--                val = (employee_name, profession, date_of_joining, contact, emergency_contact)
--                sql_2 = "INSERT INTO salary (employee_name, profession, hourly_salary) VALUES (%s, %s, %s)"
--                val_2 = (employee_name, profession, str(hourly_salary))
--
--                sql_1 = "INSERT INTO user_login (username, password) VALUES (%s, %s)"
--                val_1 = (username, password)
--
--                cursor.execute(sql, val)
--                cursor.execute(sql_1, val_1)
--                cursor.execute(sql_2, val_2)
--                print("name")
--
--                db.commit()
--                self.main_frame.destroy()
--                messagebox.showinfo("Successful", "Employee profile is created successfully")
--                self.main_frame.destroy()
--            except mysql.connector.Error as e:
--                messagebox.showerror("Database Error", f"Error occured: {e}")
--        else:
--            print("hello")
--        self.employees()
--
--    def search(self):
--        search_data = self.search_entry.get()
--        global data
--        if search_data == '':
--            messagebox.showinfo("Null Field", "There is Nothing to Search")
--        try:
--            db = connection.Connection().get_connection()
--            cursor = db.cursor()
--
--            sql = "SELECT * FROM employee_details WHERE employee_name=%s"
--            val = (search_data,)
--
--            cursor.execute(sql, val)
--            data_fetch = cursor.fetchall()
--            for data in data_fetch:
--                print(data)
--        except mysql.connector.Error as e:
--            messagebox.showerror("Database Error", f"Error Occured: {e}")
--            print(e)
--        self.main_frame.destroy()
-+    def add_new_employee(self):
-+        self.main_frame.destroy()
-+        if self.window_count == 1:
-+            self.main_frame.destroy()
-+        elif self.window_count == 2:
-+            pass
-+        elif self.window_count == 3:
-+            self.main_frame.destroy()
-+        elif self.window_count == 4:
-+            self.main_frame.destroy()
-+        elif self.window_count == 5:
-+            self.main_frame.destroy()
- 
-+        if self.window_count == self.window_count:
-+            pass
-         self.main_frame = CTkFrame(master=self, fg_color="#ffffff", width=780, height=650, corner_radius=0)
-         self.main_frame.pack_propagate(0)
-         self.main_frame.pack(side="left")
-@@ -484,11 +423,22 @@
-                                        hover_color="#491669", width=28, command=self.search)
-         self.search_button.pack(side="left", padx=(13, 0), pady=15)
- 
-+        try:
-+            db = connection.Connection().get_connection()
-+            cursor = db.cursor()
-+
-+            sql = "SELECT * FROM requests"
-+            cursor.execute(sql)
-+            request = cursor.fetchall()
-+            for result in request:
-+                print(result)
-+        except mysql.connector.Error as e:
-+            print(e)
-+
-         self.table_data = [
-             [("ID", "Name", "Profession", "Date of Joining", "Contact No.", "Emergency\nContact No.")]
-         ]
--        self.table_data.append(data_fetch)
--        # print(self.table_data)
-+        self.table_data.append(request)
-         self.table_data = list(itertools.chain(*self.table_data))
- 
-         self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color="transparent")
-@@ -499,8 +449,170 @@
-         self.table.edit_row(0, font=("Arial Bold", 14))
-         self.table.edit_row(0, text_color="#fff", hover_color="#491669")
-         self.table.pack(expand=True)
-+        # self.main_frame = CTkFrame(master=self, fg_color="#ffffff", width=780, height=650, corner_radius=0)
-+        # self.main_frame.pack_propagate(0)
-+        # self.main_frame.pack(side="left")
-+        #
-+        # self.s_pass = IntVar(value=0)
-+        # self.name_entry = CTkEntry(master=self.main_frame, placeholder_text="Enter name of Employee", height=35,
-+        #                            width=330,
-+        #                            fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14))
-+        # self.name_entry.pack(anchor="n", padx=(25, 25), pady=(80, 0))
-+        # self.profession_entry = CTkComboBox(master=self.main_frame, height=35, width=330, border_color="#601e88",
-+        #                                     button_color="#601e88", dropdown_fg_color="#601e88",
-+        #                                     dropdown_text_color="#ffffff", dropdown_hover_color="#491669",
-+        #                                     button_hover_color="#601e88",
-+        #                                     values=["Select Job role", "Administrator", "Engineer", "Management"])
-+        # self.profession_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
-+        # self.date_of_joining_entry = CTkEntry(master=self.main_frame,
-+        #                                       placeholder_text="Enter Date of Joining i.e. dd/mm/yyyy",
-+        #                                       height=35, width=330, fg_color="#EEEEEE", border_color="#601e88",
-+        #                                       font=("Arial", 14))
-+        # self.date_of_joining_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
-+        # self.contact_entry = CTkEntry(master=self.main_frame, placeholder_text="Contact No.", height=35, width=330,
-+        #                               fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14))
-+        # self.contact_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
-+        # self.emergency_contact_entry = CTkEntry(master=self.main_frame, placeholder_text="Emergency Contact No.",
-+        #                                         height=35,
-+        #                                         width=330, fg_color="#EEEEEE", border_color="#601e88",
-+        #                                         font=("Arial", 14))
-+        # self.emergency_contact_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
-+        # self.username_entry = CTkEntry(master=self.main_frame, placeholder_text="Username", height=35, width=330,
-+        #                                fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14))
-+        # self.username_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
-+        # self.password_entry = CTkEntry(master=self.main_frame, placeholder_text="Password", height=35, width=330,
-+        #                                fg_color="#EEEEEE", border_color="#601e88", font=("Arial", 14), show="●")
-+        # self.password_entry.pack(anchor="n", padx=(25, 25), pady=(25, 0))
-+        # self.show_password = CTkCheckBox(master=self.main_frame, checkbox_height=15, checkbox_width=15,
-+        #                                  text="Show Password ?",
-+        #                                  text_color="#7E7E7E", variable=self.s_pass, onvalue=1, offvalue=0,
-+        #                                  command=self.toggle_password).pack(anchor="n", padx=(200, 0), pady=(5, 0))
-+        # self.add_button = CTkButton(master=self.main_frame, text="Add Employee", height=35, fg_color="#601e88",
-+        #                             hover_color="#491669", text_color="#ffffff", font=("Arial", 14),
-+        #                             command=self.get_entries).pack(anchor="n", padx=(25, 25), pady=(25, 0))
- 
--        self.window_count = 2
-+    # def get_entries(self):
-+    #     global username, hourly_salary
-+    #     employee_name = self.name_entry.get()
-+    #     profession = self.profession_entry.get()
-+    #     date_of_joining = self.date_of_joining_entry.get()
-+    #     contact = self.contact_entry.get()
-+    #     emergency_contact = self.emergency_contact_entry.get()
-+    #     username = self.username_entry.get()
-+    #     password = self.password_entry.get()
-+    #
-+    #     if (
-+    #             employee_name == '' or profession == '' or date_of_joining == '' or contact == '' or username == '' or password == ''):
-+    #         messagebox.showinfo("Null Info", "All fields are required to create profile")
-+    #     elif contact.isdigit() is not True or emergency_contact.isdigit() is not True:
-+    #         messagebox.showinfo("Invalid", "Contact number should contain only digits")
-+    #     elif len(contact) != 10 or len(emergency_contact) != 10:
-+    #         messagebox.showinfo("Invalid", "Contact number should contain 10 digits")
-+    #     elif password.isdigit() is not True:
-+    #         messagebox.showinfo("Invalid", "Password should contain digits only")
-+    #     elif not self.check_duplicate_user(username):
-+    #         if profession == "Select Job role":
-+    #             messagebox.showinfo("change", "Please select your Job role")
-+    #         elif profession == "Administrator":
-+    #             hourly_salary = 300
-+    #         elif profession == "Engineer":
-+    #             hourly_salary = 400
-+    #         elif profession == "Management":
-+    #             hourly_salary = 500
-+    #         try:
-+    #             db = connection.Connection().get_connection()
-+    #             cursor = db.cursor()
-+    #
-+    #             sql = ("INSERT INTO employee_details (employee_name, profession, date_of_joining, contact_no, "
-+    #                    "emergency_contact_no) VALUES (%s, %s, %s, %s, %s)")
-+    #             val = (employee_name, profession, date_of_joining, contact, emergency_contact)
-+    #             sql_2 = "INSERT INTO salary (employee_name, profession, hourly_salary) VALUES (%s, %s, %s)"
-+    #             val_2 = (employee_name, profession, str(hourly_salary))
-+    #
-+    #             sql_1 = "INSERT INTO user_login (username, password) VALUES (%s, %s)"
-+    #             val_1 = (username, password)
-+    #
-+    #             cursor.execute(sql, val)
-+    #             cursor.execute(sql_1, val_1)
-+    #             cursor.execute(sql_2, val_2)
-+    #             print("name")
-+    #
-+    #             db.commit()
-+    #             self.main_frame.destroy()
-+    #             messagebox.showinfo("Successful", "Employee profile is created successfully")
-+    #             self.main_frame.destroy()
-+    #         except mysql.connector.Error as e:
-+    #             messagebox.showerror("Database Error", f"Error occured: {e}")
-+    #     else:
-+    #         print("hello")
-+    #     self.employees()
-+    #
-+    # def search(self):
-+    #     search_data = self.search_entry.get()
-+    #     global data
-+    #     if search_data == '':
-+    #         messagebox.showinfo("Null Field", "There is Nothing to Search")
-+    #     try:
-+    #         db = connection.Connection().get_connection()
-+    #         cursor = db.cursor()
-+    #
-+    #         sql = "SELECT * FROM employee_details WHERE employee_name=%s"
-+    #         val = (search_data,)
-+    #
-+    #         cursor.execute(sql, val)
-+    #         data_fetch = cursor.fetchall()
-+    #         for data in data_fetch:
-+    #             print(data)
-+    #     except mysql.connector.Error as e:
-+    #         messagebox.showerror("Database Error", f"Error Occured: {e}")
-+    #         print(e)
-+    #     self.main_frame.destroy()
-+    #
-+    #     self.main_frame = CTkFrame(master=self, fg_color="#ffffff", width=780, height=650, corner_radius=0)
-+    #     self.main_frame.pack_propagate(0)
-+    #     self.main_frame.pack(side="left")
-+    #
-+    #     title_frame = CTkFrame(master=self.main_frame, fg_color="transparent")
-+    #     title_frame.pack(anchor="n", fill="x", padx=27, pady=(29, 0))
-+    #
-+    #     self.label = CTkLabel(master=title_frame, text="Employee & their details", font=("Arial Black", 23),
-+    #                           text_color="#601e88")
-+    #     self.label.pack(anchor="nw", side="left", pady=(8, 0))
-+    #
-+    #     self.add_employee_button = CTkButton(master=title_frame, text="+ New Employee", font=("Arial Black", 15),
-+    #                                          text_color="#fff", fg_color="#601e88", hover_color="#491669",
-+    #                                          corner_radius=15, command=self.add_employee)
-+    #     self.add_employee_button.pack(anchor="ne", side="right", ipady=10)
-+    #
-+    #     self.search_container = CTkFrame(master=self.main_frame, height=50, fg_color="#F0F0F0")
-+    #     self.search_container.pack(fill="x", pady=(30, 0), padx=27)
-+    #
-+    #     self.search_entry = CTkEntry(master=self.search_container, width=650,
-+    #                                  placeholder_text="Search Employee with its ID or Name",
-+    #                                  border_color="#70438C", border_width=2)
-+    #     self.search_entry.pack(side="left", padx=(13, 0), pady=15)
-+    #
-+    #     self.search_button = CTkButton(master=self.search_container, text="", image=self.search_img, fg_color="#601e88",
-+    #                                    hover_color="#491669", width=28, command=self.search)
-+    #     self.search_button.pack(side="left", padx=(13, 0), pady=15)
-+    #
-+    #     self.table_data = [
-+    #         [("ID", "Name", "Profession", "Date of Joining", "Contact No.", "Emergency\nContact No.")]
-+    #     ]
-+    #     self.table_data.append(data_fetch)
-+    #     # print(self.table_data)
-+    #     self.table_data = list(itertools.chain(*self.table_data))
-+    #
-+    #     self.table_frame = CTkScrollableFrame(master=self.main_frame, fg_color="transparent")
-+    #     self.table_frame.pack(expand=True, fill="both", padx=27, pady=21)
-+    #     self.table = CTkTable(master=self.table_frame, values=self.table_data, colors=["#E6E6E6", "#EEEEEE"],
-+    #                           header_color="#601e88",
-+    #                           hover_color="#DCDCDC")
-+    #     self.table.edit_row(0, font=("Arial Bold", 14))
-+    #     self.table.edit_row(0, text_color="#fff", hover_color="#491669")
-+    #     self.table.pack(expand=True)
-+    #
-+    #     self.window_count = 2
- 
-     def projects(self):
-         if self.window_count == 1:
-Index: demo.py
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/demo.py b/demo.py
-new file mode 100644
---- /dev/null	(date 1713555865471)
-+++ b/demo.py	(date 1713555865471)
-@@ -0,0 +1,35 @@
-+import tkinter as tk
-+
-+class TimerApp:
-+    def __init__(self, root):
-+        self.root = root
-+        self.counter = 0
-+        self.timer_running = False
-+
-+        self.root.protocol("WM_DELETE_WINDOW", self.stop_timer)
-+
-+        self.timer_label = tk.Label(self.root, text="0")
-+        self.timer_label.pack()
-+
-+        self.start_timer()
-+
-+    def start_timer(self):
-+        self.timer_running = True
-+        self.update_timer()
-+
-+    def stop_timer(self):
-+        global time
-+        self.timer_running = False
-+        time = self.counter
-+        print(time)
-+        root.destroy()
-+
-+    def update_timer(self):
-+        if self.timer_running:
-+            self.counter += 1
-+            self.timer_label.config(text=str(self.counter))
-+            self.root.after(1000, self.update_timer)
-+
-+root = tk.Tk()
-+app = TimerApp(root)
-+root.mainloop()
-\ No newline at end of file
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"4e78766d-d8c5-4b96-99f3-65bc1cc254a9\" name=\"Changes\" comment=\"workspace management system\">\r\n      <change afterPath=\"$PROJECT_DIR$/demo.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/add_employee.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/add_employee.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app_admin_windows.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app_admin_windows.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/connection.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/connection.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/user_login.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/user_login.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"jayesh\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;omkar2816&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/omkar2816/Workspace-Management-System.git&quot;,\r\n    &quot;accountId&quot;: &quot;b920635d-5297-450b-83fd-33eaca86895d&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2e5srZnsWtTGq5l8r3JRaH0GNPp\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.add_employee.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.app_admin_windows.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.app_user_windows.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.app_windows.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.connection.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.db_connection.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.demo.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.demo2.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.ex.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.login_main.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.screentime.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.test.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.user_admin.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.user_login.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;run.code.analysis.last.selected.profile&quot;: &quot;aDefault&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Omkar Korgaonkar\\PycharmProjects\\Workspace Management System\\images\" />\r\n      <recent name=\"C:\\Users\\Omkar Korgaonkar\\PycharmProjects\\Workspace Management System\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.demo\">\r\n    <configuration name=\"admin_main\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Workspace Management System\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/admin_main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"app_user_windows\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Workspace Management System\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/app_user_windows.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"demo\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Workspace Management System\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/demo.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"test\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Workspace Management System\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/test.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"user_login\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Workspace Management System\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/user_login.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.demo\" />\r\n        <item itemvalue=\"Python.user_login\" />\r\n        <item itemvalue=\"Python.test\" />\r\n        <item itemvalue=\"Python.app_user_windows\" />\r\n        <item itemvalue=\"Python.admin_main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-0509580d9d50-746f403e7f0c-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-241.14494.241\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"4e78766d-d8c5-4b96-99f3-65bc1cc254a9\" name=\"Changes\" comment=\"\" />\r\n      <created>1711205972182</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1711205972182</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1711821937785</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1711821937785</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1711822117231</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1711822117231</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1711822175916</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1711822175916</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712174045261</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712174045261</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712424775276</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712424775277</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712427396300</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712427396300</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712432402451</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712432402451</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712437011012</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712437011012</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712605236657</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712605236657</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712657978163</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712657978163</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712716312124</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712716312124</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712731968223</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712731968223</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"13\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"workspace management system\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"workspace management system\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision b212977b2491ee031a1740a2513807e73d00a2b2)
-+++ b/.idea/workspace.xml	(date 1713600981233)
-@@ -7,10 +7,8 @@
-     <list default="true" id="4e78766d-d8c5-4b96-99f3-65bc1cc254a9" name="Changes" comment="workspace management system">
-       <change afterPath="$PROJECT_DIR$/demo.py" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/add_employee.py" beforeDir="false" afterPath="$PROJECT_DIR$/add_employee.py" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/app_admin_windows.py" beforeDir="false" afterPath="$PROJECT_DIR$/app_admin_windows.py" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/connection.py" beforeDir="false" afterPath="$PROJECT_DIR$/connection.py" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/user_login.py" beforeDir="false" afterPath="$PROJECT_DIR$/user_login.py" afterDir="false" />
-     </list>
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-@@ -41,7 +39,7 @@
-   <component name="GithubPullRequestsUISettings">{
-   &quot;selectedUrlAndAccountId&quot;: {
-     &quot;url&quot;: &quot;https://github.com/omkar2816/Workspace-Management-System.git&quot;,
--    &quot;accountId&quot;: &quot;b920635d-5297-450b-83fd-33eaca86895d&quot;
-+    &quot;accountId&quot;: &quot;d338abf0-6f2f-4639-8ed1-6523e282415b&quot;
-   }
- }</component>
-   <component name="ProblemsViewState">
-@@ -87,7 +85,7 @@
-       <recent name="C:\Users\Omkar Korgaonkar\PycharmProjects\Workspace Management System" />
-     </key>
-   </component>
--  <component name="RunManager" selected="Python.demo">
-+  <component name="RunManager" selected="Python.user_login">
-     <configuration name="admin_main" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
-       <module name="Workspace Management System" />
-       <option name="ENV_FILES" value="" />
-@@ -200,8 +198,8 @@
-     </configuration>
-     <recent_temporary>
-       <list>
--        <item itemvalue="Python.demo" />
-         <item itemvalue="Python.user_login" />
-+        <item itemvalue="Python.demo" />
-         <item itemvalue="Python.test" />
-         <item itemvalue="Python.app_user_windows" />
-         <item itemvalue="Python.admin_main" />
-@@ -320,7 +318,23 @@
-       <option name="project" value="LOCAL" />
-       <updated>1712731968223</updated>
-     </task>
--    <option name="localTasksCounter" value="13" />
-+    <task id="LOCAL-00013" summary="workspace management system">
-+      <option name="closed" value="true" />
-+      <created>1713556089788</created>
-+      <option name="number" value="00013" />
-+      <option name="presentableId" value="LOCAL-00013" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1713556089788</updated>
-+    </task>
-+    <task id="LOCAL-00014" summary="workspace management system">
-+      <option name="closed" value="true" />
-+      <created>1713556193522</created>
-+      <option name="number" value="00014" />
-+      <option name="presentableId" value="LOCAL-00014" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1713556193522</updated>
-+    </task>
-+    <option name="localTasksCounter" value="15" />
-     <servers />
-   </component>
-   <component name="Vcs.Log.Tabs.Properties">
-Index: connection.py
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import mysql.connector\r\n\r\n\r\nclass Connection:\r\n    _instance = None\r\n\r\n    def __new__(cls, *args, **kwargs):\r\n        try:\r\n            if not cls._instance:\r\n                cls._instance = super().__new__(cls)\r\n                cls._instance.cnx = mysql.connector.connect(\r\n                    user='root',\r\n                    password='Omkar@2802',\r\n                    host='localhost',\r\n                    port='3306',\r\n                    database='wms'\r\n                )\r\n                print(\"Connection done\")\r\n            return cls._instance\r\n\r\n        except mysql.connector.Error as e:\r\n            print(\"Connection failed\", e)\r\n\r\n    def get_connection(self):\r\n        return self.cnx\r\n\r\nif __name__ == \"__main__\":\r\n    connection = Connection()\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/connection.py b/connection.py
---- a/connection.py	(revision b212977b2491ee031a1740a2513807e73d00a2b2)
-+++ b/connection.py	(date 1713554160624)
-@@ -10,7 +10,7 @@
-                 cls._instance = super().__new__(cls)
-                 cls._instance.cnx = mysql.connector.connect(
-                     user='root',
--                    password='Omkar@2802',
-+                    password='529374Channe@',
-                     host='localhost',
-                     port='3306',
-                     database='wms'
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"4e78766d-d8c5-4b96-99f3-65bc1cc254a9\" name=\"Changes\" comment=\"workspace management system\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;omkar2816&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/omkar2816/Workspace-Management-System.git&quot;,\r\n    &quot;accountId&quot;: &quot;b920635d-5297-450b-83fd-33eaca86895d&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2e5srZnsWtTGq5l8r3JRaH0GNPp\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.add_employee.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.admin_login.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.app_admin_windows.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.app_user_windows.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.app_windows.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.connection.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.db_connection.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.demo.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.demo2.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.ex.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.login_main.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.screentime.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.starter.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.test.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.user_admin.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.user_login.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;run.code.analysis.last.selected.profile&quot;: &quot;aDefault&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Omkar Korgaonkar\\PycharmProjects\\Workspace Management System\\images\" />\r\n      <recent name=\"C:\\Users\\Omkar Korgaonkar\\PycharmProjects\\Workspace Management System\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.admin_login\">\r\n    <configuration name=\"admin_login\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Workspace Management System\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/admin_login.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"starter\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Workspace Management System\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/starter.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"user_login\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Workspace Management System\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/user_login.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.starter\" />\r\n        <item itemvalue=\"Python.user_login\" />\r\n        <item itemvalue=\"Python.admin_login\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-0509580d9d50-746f403e7f0c-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-241.14494.241\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"4e78766d-d8c5-4b96-99f3-65bc1cc254a9\" name=\"Changes\" comment=\"\" />\r\n      <created>1711205972182</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1711205972182</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1711821937785</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1711821937785</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1711822117231</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1711822117231</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1711822175916</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1711822175916</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712174045261</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712174045261</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712424775276</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712424775277</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712427396300</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712427396300</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712432402451</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712432402451</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712437011012</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712437011012</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712605236657</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712605236657</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712657978163</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712657978163</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712716312124</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712716312124</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1712731968223</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1712731968223</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713777267202</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713777267202</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713777476630</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713777476630</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713783638771</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713783638771</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713783707711</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713783707711</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713783802026</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713783802026</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713783811996</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713783811996</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713784555797</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713784555797</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713790259825</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713790259825</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713790429856</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713790429856</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713793925843</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713793925843</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713796508952</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713796508952</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713810482337</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713810482337</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713857486506</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713857486506</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713862960771</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713862960771</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713870292663</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713870292663</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713874288127</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713874288127</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713903892581</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713903892581</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713937651702</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713937651702</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713938699152</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713938699152</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00032\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713943378290</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713943378290</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00033\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713943818300</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713943818300</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00034\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713943879046</created>\r\n      <option name=\"number\" value=\"00034\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713943879046</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00035\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713953190086</created>\r\n      <option name=\"number\" value=\"00035\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713953190086</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00036\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713979992789</created>\r\n      <option name=\"number\" value=\"00036\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713979992789</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00037\" summary=\"workspace management system\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713981902854</created>\r\n      <option name=\"number\" value=\"00037\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713981902854</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"38\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"workspace management system\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"workspace management system\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 0813aaf3acfa39f73634ca50fb2c8094f3dfff5d)
+++ b/.idea/workspace.xml	(date 1714230369444)
@@ -5,7 +5,20 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="4e78766d-d8c5-4b96-99f3-65bc1cc254a9" name="Changes" comment="workspace management system">
+      <change afterPath="$PROJECT_DIR$/tet.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_19-04-2024_23_24__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_00_44__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_00_45__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_49_[Changes]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_49__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_51_[Changes]1/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_51__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_51__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_20-04-2024_13_51__Changes_1.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19-04-2024_23_25__Changes_.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app_admin_windows.py" beforeDir="false" afterPath="$PROJECT_DIR$/app_admin_windows.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/connection.py" beforeDir="false" afterPath="$PROJECT_DIR$/connection.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/starter.py" beforeDir="false" afterPath="$PROJECT_DIR$/starter.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -61,7 +74,6 @@
     &quot;Python.demo2.executor&quot;: &quot;Run&quot;,
     &quot;Python.ex.executor&quot;: &quot;Run&quot;,
     &quot;Python.login_main.executor&quot;: &quot;Run&quot;,
-    &quot;Python.main.executor&quot;: &quot;Run&quot;,
     &quot;Python.screentime.executor&quot;: &quot;Run&quot;,
     &quot;Python.starter.executor&quot;: &quot;Run&quot;,
     &quot;Python.test.executor&quot;: &quot;Run&quot;,
@@ -80,7 +92,7 @@
       <recent name="C:\Users\Omkar Korgaonkar\PycharmProjects\Workspace Management System" />
     </key>
   </component>
-  <component name="RunManager" selected="Python.admin_login">
+  <component name="RunManager" selected="Python.starter">
     <configuration name="admin_login" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="Workspace Management System" />
       <option name="ENV_FILES" value="" />
@@ -459,15 +471,7 @@
       <option name="project" value="LOCAL" />
       <updated>1713979992789</updated>
     </task>
-    <task id="LOCAL-00037" summary="workspace management system">
-      <option name="closed" value="true" />
-      <created>1713981902854</created>
-      <option name="number" value="00037" />
-      <option name="presentableId" value="LOCAL-00037" />
-      <option name="project" value="LOCAL" />
-      <updated>1713981902854</updated>
-    </task>
-    <option name="localTasksCounter" value="38" />
+    <option name="localTasksCounter" value="37" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
Index: tet.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tet.py b/tet.py
new file mode 100644
--- /dev/null	(date 1714230110544)
+++ b/tet.py	(date 1714230110544)
@@ -0,0 +1,4 @@
+from faker import Faker
+fake = Faker()
+for i in range(10):
+    print(fake.ipv4())
\ No newline at end of file
